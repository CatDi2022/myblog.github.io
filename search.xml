<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS进阶笔记(四)</title>
      <link href="/myblog.github.io/2022/04/24/CSS%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0(%E5%9B%9B)/"/>
      <url>/myblog.github.io/2022/04/24/CSS%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><p><img src="https://img-blog.csdnimg.cn/7cd9a35cc5c6481e8e91aa91b473db5b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="精灵图Sprites🔥"><a href="#精灵图Sprites🔥" class="headerlink" title="精灵图Sprites🔥"></a>精灵图Sprites🔥</h1><ul><li>为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术</li><li>核心原理：<strong>将网页中的一些小背景图像整合到一张大图中，这样服务器只需要一次请求就可以了</strong></li></ul><h2 id="精灵图的使用🔥"><a href="#精灵图的使用🔥" class="headerlink" title="精灵图的使用🔥"></a>精灵图的使用🔥</h2><p><strong>使用精灵图的核心</strong>：</p><ol><li>精灵技术主要针对于背景图片的使用，就是把多个小背景图片整合到一张大图片中</li><li>这个大图片也称为 sprites 精灵图 或者 雪碧图</li><li>移动背景图片的位置，此时可以使用 background-position</li><li>移动的距离就是这个目标图片的x和y坐标，注意网页中的坐标有所不同（x轴右边走是正值，左边走是负值，y轴下边走是正值，上边走是负值）</li><li>一般情况下都是往上往左移动，所以数值是负值</li><li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li></ol><p><strong>精灵图的优点很多，但是缺点也很明显</strong></p><ol><li>图片文件还是比较大的</li><li>图片本身放大和缩小会失真</li><li>一旦图片制作完毕想要更换非常复杂</li></ol><p>此时，有一种技术的出现很好的解决了以上问题，就是字体图标 iconfont</p><h1 id="字体图标iconfont🔥"><a href="#字体图标iconfont🔥" class="headerlink" title="字体图标iconfont🔥"></a>字体图标iconfont🔥</h1><p>字体图标使用场景： 主要用于显示网页中通用、常用的一些小图标。<strong>展示的是图标，本质属于字体</strong></p><p>优点：</p><ol><li>轻量级：一个图标字体比一系列的图像要小，一旦字体加载了，图标就会马上渲染出来，减少了服务器的请求</li><li>灵活性：本质其实是文字，可以很随意的改变颜色，产生阴影，透明效果，旋转等</li><li>兼容性：几乎支持所有的浏览器</li></ol><p>步骤：</p><ol><li>字体图标的下载</li><li>字体图标的引入(引入到我们html页面中)</li><li>字体图标的追加(以后添加新的小图标)</li></ol><h2 id="字体图标的下载🔥"><a href="#字体图标的下载🔥" class="headerlink" title="字体图标的下载🔥"></a>字体图标的下载🔥</h2><ol><li><p>icomoon字库</p><p>外网，不需要登录即可下载 <a href="http://icomoon.io/">http://icomoon.io </a></p><ul><li>点击 IcoMoon App</li><li>选择需要的图标</li><li>点击<code>Generate Font</code></li><li>点击 下载</li></ul></li><li><p>阿里iconfont字库</p><p>免费，但是需要登录 <a href="http://www.iconfont.cn/">http://www.iconfont.cn/ </a></p></li></ol><h2 id="字体图标的引入🔥"><a href="#字体图标的引入🔥" class="headerlink" title="字体图标的引入🔥"></a>字体图标的引入🔥</h2><p>我们以 icomoon 字库网为例，将下载包解压，解压之后的文件如图：</p><p><img src="https://img-blog.csdnimg.cn/de6636aa2791418ea0b7687610ca311f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>把下载包里面的 fonts 文件夹放入页面根目录下</li></ol><p><img src="https://img-blog.csdnimg.cn/d02f2b4a81ff4e2ba3badc003fc0bea9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li><p>在CSS样式中<strong>全局声明</strong>字体：简单理解把这些字体通过css引入到我们页面中</p><p>右键打开 style.css，这里我演示用notepad++打开，复制如图代码引入我们自己的CSS文件中</p></li></ol><p><img src="https://img-blog.csdnimg.cn/7a25356ff5d543679fc846c54b1566b5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li><p>html标签内添加小图标</p><p>我们打开解压文件中的 demo.html ，复制想要的图标，粘贴进我们的 <code>&lt;span&gt;&lt;/span&gt;</code>标签中</p></li></ol><p><img src="https://img-blog.csdnimg.cn/b54ee91dd0b74854a8afcce8b1bf37fb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>给标签定义字体</li></ol><p><img src="https://img-blog.csdnimg.cn/d03f4bec9701491ea0ecc0bd69d89f5a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>注意：标签中的 <code>font-family</code> 的值和我们之前引入字体图标的<code>font-family</code> 必须一样，这里均为 icomoon</p><ol><li>完成，所以我们的整体代码为：</li></ol><p>测试效果为：</p><p><img src="https://img-blog.csdnimg.cn/fac058a088f2454ba22fcb0c99ee679d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="字体图标的追加🔥"><a href="#字体图标的追加🔥" class="headerlink" title="字体图标的追加🔥"></a>字体图标的追加🔥</h2><ul><li>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标到原来的字体文件中。</li><li>以 icomoon字库 网为例，点击网站内<code>import icons</code></li><li>把压缩包里面的 selection.json 重新上传，然后选中自己想要新的图标，重新下载压缩包，并替换原来的文件即可。</li></ul><p><img src="https://img-blog.csdnimg.cn/136b1488a4cb4233ad7ff77f5f9deb44.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="字体文件格式"><a href="#字体文件格式" class="headerlink" title="字体文件格式"></a>字体文件格式</h2><p>不同浏览器所支持的字体格式是不一样的，字体图标之所以兼容，就是因为包含了主流浏览器支持的字体文件。</p><p>.ttf 格式、.woff 格式、.eot 格式、.svg 格式，不同浏览器支持不同的格式</p><p><img src="https://img-blog.csdnimg.cn/ec0439450c03456483a147d5b0eafef5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="字体图标总结"><a href="#字体图标总结" class="headerlink" title="字体图标总结"></a>字体图标总结</h2><ol><li>如果遇到一些结构和样式比较简单的小图标，就用字体图标</li><li>如果遇到一些结构和样式复杂一点的小图片，就用精灵图</li></ol><h1 id="界面样式🔥"><a href="#界面样式🔥" class="headerlink" title="界面样式🔥"></a>界面样式🔥</h1><p>所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验。</p><ul><li>更改用户的鼠标样式</li><li>表单轮廓</li><li>防止表单域拖拽</li></ul><h2 id="鼠标样式cursor🔥"><a href="#鼠标样式cursor🔥" class="headerlink" title="鼠标样式cursor🔥"></a>鼠标样式cursor🔥</h2><p>鼠标样式<code>cursor</code></p><ul><li>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>小白，默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><h2 id="轮廓线outline🔥"><a href="#轮廓线outline🔥" class="headerlink" title="轮廓线outline🔥"></a>轮廓线outline🔥</h2><p>轮廓线<code>outline</code>：</p><ul><li>给表单添加 <code>outline:0</code>; 或者<code>outline: none</code>;样式后，就可以去掉默认的蓝色边框</li></ul><h2 id="防止拖拽文本域"><a href="#防止拖拽文本域" class="headerlink" title="防止拖拽文本域"></a>防止拖拽文本域</h2><p>防止拖拽文本域<code>resize</code></p><h1 id="vertical-align🔥"><a href="#vertical-align🔥" class="headerlink" title="vertical-align🔥"></a>vertical-align🔥</h1><p><code>vertical-align</code>:</p><ul><li>使用场景：经常用于设置<strong>图片</strong>或者**表单（行内块元素）**和**文字垂直对齐**。</li><li>官方解释：用于设置一个元素的垂直对齐方式，但是它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>有效</li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认，元素放置在父元素的基线上</td></tr><tr><td>top</td><td>把元素的顶端与行中最高元素的顶端对齐（顶线对齐）</td></tr><tr><td>middle</td><td>把此元素放置在父元素的中部（中线对齐）</td></tr><tr><td>bottom</td><td>把元素的顶端与行中最低的元素的顶端对齐（底线对齐）</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/2f7832a64527405181bd3edbcd3a736a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="图片、表单和文字对齐🔥"><a href="#图片、表单和文字对齐🔥" class="headerlink" title="图片、表单和文字对齐🔥"></a>图片、表单和文字对齐🔥</h2><p>图片、表单都属于行内块元素，默认的 vertical-align 是基线对齐。</p><p><img src="https://img-blog.csdnimg.cn/159dbd0d98f941f5b17eb713341d3c64.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>此时可以给图片、表单这些行内块元素的 vertical-align 属性设置为 <code>middle</code> 就可以让文字和图片垂直居中对齐了。</p><h2 id="图片底侧空白缝隙解决🔥"><a href="#图片底侧空白缝隙解决🔥" class="headerlink" title="图片底侧空白缝隙解决🔥"></a>图片底侧空白缝隙解决🔥</h2><ul><li>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐（给图片加边框就可以看见）</li></ul><p><img src="https://img-blog.csdnimg.cn/6ab28389075f4478a70a11cae3e5a58e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>主要解决办法有两种：</p><ol><li>给图片添加 <code>vertical-align : middle | top |bottom</code> 等</li><li>把图片转换为块级元素 <code>display:block;</code>，因为块级元素不会有<code>vertical-align</code> 属性</li></ol><h1 id="溢出文字省略显示🔥"><a href="#溢出文字省略显示🔥" class="headerlink" title="溢出文字省略显示🔥"></a>溢出文字省略显示🔥</h1><h2 id="单行文本溢出省略号显示🔥"><a href="#单行文本溢出省略号显示🔥" class="headerlink" title="单行文本溢出省略号显示🔥"></a>单行文本溢出省略号显示🔥</h2><p>必须满足三个条件：</p><h2 id="多行文本溢出显示省略号显示"><a href="#多行文本溢出显示省略号显示" class="headerlink" title="多行文本溢出显示省略号显示"></a>多行文本溢出显示省略号显示</h2><p>多行文本溢出显示省略号，有较大的兼容性问题，适合于webKit浏览器或移动端(移动端大部分是webKit内核)</p><p>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</p><h1 id="常见布局技巧🔥"><a href="#常见布局技巧🔥" class="headerlink" title="常见布局技巧🔥"></a>常见布局技巧🔥</h1><h2 id="margin负值的运用🔥"><a href="#margin负值的运用🔥" class="headerlink" title="margin负值的运用🔥"></a>margin负值的运用🔥</h2><ul><li>两个盒子加边框1px，浮动，贴紧会出现 1 + 1 = 2px</li><li>给右边盒子添加<code>margin-left: -1px</code></li><li>正数向右边走，负数向左边走</li></ul><p><img src="https://img-blog.csdnimg.cn/49161c07333346c990eab8dca70b4425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>当我们有多个盒子时的解决办法：</p><p><img src="https://img-blog.csdnimg.cn/8bf8e78f78bf4dfa89950aa8dd76bfd6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>让每个盒子 margin 往左侧移动 -1px 正好压住相邻盒子边框</li><li>鼠标经过某个盒子的时候，提高当前盒子的层级即可   <ul><li>如果没有定位，则加相对定位(保留位置)</li><li>如果有定位，则加 z-index</li></ul></li></ol><p><img src="https://img-blog.csdnimg.cn/3359f694ecc94214a1a4530afdbefe2e.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="文字围绕浮动元素🔥"><a href="#文字围绕浮动元素🔥" class="headerlink" title="文字围绕浮动元素🔥"></a>文字围绕浮动元素🔥</h2><p>巧妙运用浮动元素不会压住文字的特性</p><p><img src="https://img-blog.csdnimg.cn/71377b1f43f34ff1aaf153cf1dceb0b6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="行内块巧妙运用🔥"><a href="#行内块巧妙运用🔥" class="headerlink" title="行内块巧妙运用🔥"></a>行内块巧妙运用🔥</h2><p><img src="https://img-blog.csdnimg.cn/7d1aaaf6a6d549e7b1a90c25447fb370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs基础之JavaScript模块化(一)</title>
      <link href="/myblog.github.io/2022/04/24/Nodejs%E5%9F%BA%E7%A1%80%E4%B9%8BJavaScript%E6%A8%A1%E5%9D%97%E5%8C%96(%E4%B8%80)/"/>
      <url>/myblog.github.io/2022/04/24/Nodejs%E5%9F%BA%E7%A1%80%E4%B9%8BJavaScript%E6%A8%A1%E5%9D%97%E5%8C%96(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="✍目录脑图"><a href="#✍目录脑图" class="headerlink" title="✍目录脑图"></a>✍目录脑图</h1><p><img src="https://img-blog.csdnimg.cn/692d30934aa54ba685410b0589e93ea5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ul><li>参考视频：</li><li><a href="https://www.bilibili.com/video/BV1UE411H71P?from=search&seid=4380085066966008976">Node.js 黑马程序员</a></li><li><a href="https://www.bilibili.com/video/BV11t411k79h?from=search&seid=4268305071411376003">Node.js大地老师讲解</a></li></ul><h1 id="JavaScript模块化"><a href="#JavaScript模块化" class="headerlink" title="JavaScript模块化"></a>JavaScript模块化</h1><p>什么是模块化开发呢？</p><ul><li>事实上模块化开发最终的目的是将程序划分成一个个小的结构</li><li>这个结构中编写属于自己的逻辑代码，有自己的作用域，不会影响到其他的结构</li><li>这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用</li><li>也可以通过某种方式，导入另外结构中的变量、函数、对象等</li></ul><p>上面说提到的结构，就是模块；按照这种结构划分开发程序的过程，就是模块化开发的过程</p><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>我们需要知道CommonJS是一个规范，最初提出来是在浏览器以外的地方使用，并且当时被命名为ServerJS，后来为了体现它的广泛性，修改为CommonJS，平时我们也会简称为CJS。</p><ul><li>Node是CommonJS在服务器端一个具有代表性的实现</li><li>Node中对CommonJS进行了支持和实现，让我们在开发node的过程中可以方便的进行模块化开发</li><li>在Node中<strong>每一个js文件都是一个单独的模块</strong></li><li>这个模块中包括 <strong>CommonJS规范的核心变量</strong>：exports、module.exports、require</li><li>我们可以使用这些变量来方便的进行<strong>模块化开发</strong></li></ul><p>模块化的核心是导出和导入，Node中对其进行了实现：</p><ul><li><code>exports</code>和<code>module.exports</code>可以负责对模块中的内容进行导出</li><li><code>require</code> 函数可以帮助我们<strong>导入其他模块（自定义模块、系统模块、第三方库模块）中的内容</strong></li></ul><h2 id="自定义模块的规定"><a href="#自定义模块的规定" class="headerlink" title="自定义模块的规定"></a>自定义模块的规定</h2><ol><li>我们可以把公共的功能抽离成为一个单独的 js 文件作为一个模块，Node.js规定一个 <strong>JavaScript 文件</strong>就是一个模块，模块<strong>内部定义的变量和函数</strong>默认情况下<strong>外部无法得到</strong>。如果要让外部可以访问模块里面的方法或属性，就必须在模块里面通过<code>exports</code> 或者 <code>module.exports</code> 暴露属性或者方法</li><li>在需要使用这些模块的文件中，通过 <code>require</code> 的方式引入这个模块。这个时候就可以使用模块里面暴露的属性和方法</li></ol><p><img src="https://img-blog.csdnimg.cn/af2296f9c2e84bdbb89685b95541b344.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>注意：</p><ul><li>require 里面的路径要加 <strong>单引号</strong></li><li>require 里面引入的模块可以跟后缀 .js，也可以不跟后缀 .js</li><li>若我们要暴露的是对象(属性)，则建议使用 <code>module.exports</code> ;若我们要暴露的是方法，则建议使用<code>exports</code></li></ul><p><img src="https://img-blog.csdnimg.cn/1159216f22304e7fa244dfe0dffb4d71.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2e12889b045f4a568f62108615329d4e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>我们以后的自定义模块都会放在 <code>node_modules</code> 文件夹下，此时引入不需要添加 <code>node_modules</code> 路径也可以引入</li></ul><p><img src="https://img-blog.csdnimg.cn/dbf0d2802db6412da7ca275e84b6730c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h2><p>JavaScript没有模块化一直是它的痛点，所以才会产生我们前面学习的社区规范：CommonJS、AMD、CMD等，<br> 所以在ES推出自己的模块化系统时，大家也是兴奋异常。</p><p>ES Module和CommonJS的模块化有一些不同之处：</p><ul><li>一方面它使用了import和export关键字</li><li>另一方面它采用编译期的静态分析，并且也加入了动态引用的方式</li></ul><p>ES Module模块采用export和import关键字来实现模块化</p><ul><li><code>export</code>负责将模块内的内容导出</li><li><code>import</code>负责从其他模块导入内容</li></ul><h2 id="export关键字"><a href="#export关键字" class="headerlink" title="export关键字"></a>export关键字</h2><p>export关键字将一个模块中的变量、函数、类等导出</p><ul><li><code>export</code> 指令用于导出变量，比如下面的代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&#x27;why&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> height = <span class="number">1.88</span></span><br></pre></td></tr></table></figure><ul><li>上面的代码还有另外一种写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;why&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> height = <span class="number">1.88</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>&#123;name,age,height&#125;</span><br></pre></td></tr></table></figure><h2 id="导出函数或类"><a href="#导出函数或类" class="headerlink" title="导出函数或类"></a>导出函数或类</h2><p>上面我们主要是输出变量，也可以输出函数或者输出类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">content</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;在奔跑&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的代码也可以写成这种形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">test</span><span class="params">(content)</span> &#123;</span><br><span class="line">    console.log(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    constructor(name,age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    run() &#123;</span><br><span class="line">        console.log(<span class="built_in">this</span>.name + <span class="string">&#x27;在奔跑&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;test,Person&#125;</span><br></pre></td></tr></table></figure><h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h2><ul><li>某些情况下，一个模块中包含某个功能，我们并不希望给这个功能命名，而是让导入者可以自己来命名</li><li>这个时候就可以使用 <code>export default</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;default function&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>我们来到 <code>main.js</code> 中，这样使用就可以了</p><ul><li>这里的 <code>myFunc</code> 是我自己命名的，你可以根据需要命名它对应的名字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myFunc form <span class="string">&#x27;./info.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>()</span><br></pre></td></tr></table></figure></li><li><p>另外，需要注意：</p><ul><li><code>export default</code> 在同一个模块中，不允许同时存在多个</li></ul></li></ul><h2 id="ES6-import的使用"><a href="#ES6-import的使用" class="headerlink" title="ES6 import的使用"></a>ES6 import的使用</h2><p>我们使用 export 指令导出了模块对外提供的接口，下面我们就可以通过 <code>import</code> 命令来加载对应的这个模块了</p><ul><li>首先，我们需要在 HTML 代码中引入两个j文件，并且类型需要设置为 module</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;info.js&quot;</span> <span class="attr">type</span> = <span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;main.js&quot;</span> <span class="attr">type</span> = <span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>import</code> 指令用于导入模块中的内容，比如 <code>main.js</code> 的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name,age,height&#125; <span class="keyword">from</span> <span class="string">&quot;./info.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name,age,height);</span><br></pre></td></tr></table></figure><ul><li>如果我们希望某个模块中所有的信息都导入，一个个导入显然有些麻烦   <ul><li>p通过<code>*</code>可以导入模块中所有的export变量</li><li>p但是通常情况下我们需要给<code>*</code>起一个别名，方便后续的使用</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> info <span class="keyword">from</span> <span class="string">&#x27;./info.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>,info.<span class="property">age</span>,info.<span class="property">height</span>);</span><br></pre></td></tr></table></figure><iframe id="csdn-buyside-iframe2" name="csdnBuysideIframe2" src="https://mall.csdn.net/sales/vip-buyside?from=" scrolling="no" width="0" height="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> 模块化开发 </tag>
            
            <tag> Express框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs基础之包管理工具npm(二)</title>
      <link href="/myblog.github.io/2022/04/24/Nodejs%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7npm(%E4%BA%8C)/"/>
      <url>/myblog.github.io/2022/04/24/Nodejs%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7npm(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>参考视频：</li><li><a href="https://www.bilibili.com/video/BV1UE411H71P?from=search&seid=4380085066966008976">Node.js 黑马程序员</a></li><li><a href="https://www.bilibili.com/video/BV11t411k79h?from=search&seid=4268305071411376003">Node.js大地老师讲解</a></li></ul><h2 id="包管理工具npm"><a href="#包管理工具npm" class="headerlink" title="包管理工具npm"></a>包管理工具npm</h2><p>包管理工具npm</p><ul><li>Node Package Manager，也就是Node包管理器</li><li>但是目前已经不仅仅是Node包管理器了，在前端项目中我们也在使用它来管理依赖的包</li><li>比如express、koa、react、react-dom、axios、babel、webpack等等</li></ul><p>npm管理的包可以在哪里查看、搜索呢？</p><ul><li><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li><li>这是我们安装相关的npm包的官网</li></ul><p>完全符合 CommonJs 规范的包目录一般包含如下这些文件</p><ul><li>package.json ：包描述文件</li><li>bin：用于存放可执行二进制文件的目录</li><li>lib：用于存放 JavaScript 代码的目录</li><li>doc：用于存放文档的目录</li></ul><h2 id="npm-init-生成package-json"><a href="#npm-init-生成package-json" class="headerlink" title="npm init 生成package.json"></a>npm init 生成package.json</h2><p>package.json 定义了这个项目所需要的各种模块，以及项目的配置信息(比如名称、版本、许可证等元数据)</p><p>我们这里以引入并使用 MD5加密包来举例 package.json 的用法</p><ol><li>首先在项目根路径下创建 package.json</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init  或者 npm init --yse</span><br></pre></td></tr></table></figure><ol><li>去 <a href="https://www.npmjs.com/">www.npmjs.com</a> 搜索我们 MD5加密包</li></ol><p><img src="https://img-blog.csdnimg.cn/15a6506b29164d83a3e3ce3df04894a9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li><p>在我们的根目录下打开 cmd 下载</p><p>我们使用 <code>npm install md5 --save</code> 下载，将 md5 写入 package.json</p></li></ol><p><img src="https://img-blog.csdnimg.cn/d755589913454069b54436686ba6e0c1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li>使用 MD5</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密 123456</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> md5 = <span class="built_in">require</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 md5 加密的功能</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">md5</span>(<span class="string">&#x27;123456&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/159fd19e59c847029b5b4d5a96fed601.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>这样我们就实现了导模块并使用模块，此时查看我们的package.json 文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mytest&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;md5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.3.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      </span><br><span class="line">  <span class="punctuation">&#125;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>dependencies -&gt; 配置当前程序所依赖的其他包</li><li>devDependencie -&gt; 配置当前程序所依赖的其他包，比如一些工具之类的配置在这里</li></ul><p><img src="https://img-blog.csdnimg.cn/f1f58104610b4a46a6a7141b8f8a87b7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>dependencies 与 devDependencies 之间的区别？</p><ul><li>使用 <code>npm install node_module --save</code> 会自动更新 dependencies 字段值</li><li>使用 <code>npm install node_module --save -dev</code> 会自动更新 devDependencies 字段值</li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><ul><li>package.json 是项目描述文件，记录了当前项目信息，例如项目名称、版本、作者、github地址、当前项目依赖了哪些第三方模块等。<ul><li>锁定包的版本，确保再次下载时不会因为包版本不同而产生问题</li><li>加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可，不需要做额外的工作</li><li>每次创建新项目，记得先 npm init 生成package.json</li></ul></li></ul><h2 id="package-json常见属性"><a href="#package-json常见属性" class="headerlink" title="package.json常见属性"></a>package.json常见属性</h2><p>必须填写的属性：name、version</p><ul><li>name 是项目的名称</li><li>version 是当前项目的版本号</li><li>description是描述信息，很多时候是作为项目的基本描述</li><li>author是作者相关信息（发布时用到）</li><li>license是开源协议（发布时用到）</li></ul><p><strong>private 属性</strong>：</p><ul><li>private属性记录当前的项目是否是私有的</li><li>当值为true时，npm是不能发布它的，这是防止私有项目或模块发布出去的方式</li></ul><p><strong>main 属性</strong>：</p><ul><li>设置程序的入口。</li></ul><p><strong>scripts 属性</strong>：</p><ul><li>scripts 属性用于配置一些脚本命令，以键值对的形式存在</li><li>配置后我们可以通过 <code>npm run 命令</code>的key来执行这个命令</li><li>npm start和npm run start的区别是什么?   <ul><li>它们是等价的</li><li>对于常用的start、test、stop、restart可以省略掉run直接通过npm start等方式运行</li></ul></li></ul><p><strong>dependencies 属性</strong>：项目依赖</p><ul><li>dependencies 属性是指定无论开发环境还是生成环境都需要依赖的包</li><li>使用<strong>npm install</strong> 包名命令下载的文件会默认被添加到 <strong>package.json</strong> 文件的 <strong>dependencies</strong> 字段中</li><li>与之对应的是devDependencies</li></ul><p><strong>devDependencies 属性</strong>：开发依赖</p><ul><li>一些包在生成环境是不需要的，比如webpack、babel等</li><li>这个时候我们会通过<code>npm install webpack --save-dev</code>，将它安装到devDependencies属性中</li><li>那么在生成环境如何保证不安装这些包呢？</li><li>生成环境不需要安装时，我们需要通过<code>npm install --production</code> 来安装文件的依赖</li></ul><h2 id="版本管理的问题"><a href="#版本管理的问题" class="headerlink" title="版本管理的问题"></a>版本管理的问题</h2><p>我们会发现安装的依赖版本出现：^2.0.3或~2.0.3，这是什么意思呢？</p><p>我们这里解释一下^和~的区别：</p><ul><li>^x.y.z：表示x是保持不变的，y和z永远安装最新的版本</li><li>~x.y.z：表示x和y保持不变的，z永远安装最新的版本</li></ul><h2 id="npm-install-命令"><a href="#npm-install-命令" class="headerlink" title="npm install 命令"></a>npm install 命令</h2><p>安装npm包分两种情况：</p><ul><li>全局安装（global install）： <code>npm install ModuleName -g</code></li><li>项目（局部）安装（local install）： <code>npm install</code></li></ul><p>全局安装：</p><ul><li>全局安装是直接将某个包安装到全局</li></ul><p>但是很多人对全局安装有一些误会：</p><ul><li>通常使用npm全局安装的包都是一些工具包：yarn、webpack等</li><li>并不是类似于axios、express、koa等库文件</li><li>所以全局安装了之后并不能让我们在所有的项目中使用axios等库</li></ul><hr><ol><li><p><code>npm -v</code> 查看 npm 版本</p></li><li><p>使用 npm 命令安装模块 <code>npm install ModuleName</code></p><p>我们推荐安装模块后面加上 <code>--save</code>，这样可以安装模块并把模块写入 package.json</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如安装 jq 模块</span></span><br><span class="line">npm install jquery --save</span><br></pre></td></tr></table></figure><ol><li>卸载模块 <code>npm uninstall moduleName</code></li><li>查看当前目录下已安装的 node 包 <code>npm list</code></li><li>查看 模块 的版本 <code>npm info 模块</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如查看 jquery 的版本</span></span><br><span class="line">npm info 模块</span><br></pre></td></tr></table></figure><ol><li>指定版本安装 <code>npm install jquery@1.8.0 --save</code> 🔥</li></ol><h2 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h2><p>项目安装会在当前目录下生产一个node_modules 文件夹</p><p>局部安装分为开发时依赖和生产时依赖</p><p><img src="https://img-blog.csdnimg.cn/38dde8775adb4645b8b1a754d58e6b87.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="npm-install-原理"><a href="#npm-install-原理" class="headerlink" title="npm install 原理"></a>npm install 原理</h2><p>执行npm install它背后帮助我们完成了什么操作？</p><p>我们会发现还有一个成为package-lock.json的文件，它的作用是什么？</p><p>从npm5开始，npm支持缓存策略（来自yarn的压力），缓存有什么作用呢？</p><p><img src="https://img-blog.csdnimg.cn/3fb96d34ecb341449a1d35ca7434e768.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>npm install会检测是有package-lock.json文件：</p><ul><li>没有lock文件   <ul><li>分析依赖关系，这是因为我们可能包会依赖其他的包，并且多个包之间会产生相同依赖的情况</li><li>从registry仓库中下载压缩包（如果我们设置了镜像，那么会从镜像服务器下载压缩包）</li><li>获取到压缩包后会对压缩包进行缓存（从npm5开始有的）</li><li>将压缩包解压到项目的node_modules文件夹中</li></ul></li><li>有lock文件   <ul><li>检测lock中包的版本是否和package.json中一致     <ul><li>不一致，那么会重新构建依赖关系，直接会走顶层的流程</li></ul></li><li>一致的情况下，会去优先查找缓存     <ul><li>没有找到，会从registry仓库下载，直接走顶层流程</li><li>查找到，会获取缓存中的压缩文件，并且将压缩文件解压到node_modules文件夹中</li></ul></li></ul></li></ul><h2 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h2><p>package-lock.json文件解析：</p><ul><li>name：项目的名称</li><li>version：项目的版本</li><li>lockfileVersion：lock文件的版本</li><li>requires：使用requires来跟着模块的依赖关系</li><li>dependencies：项目的依赖</li></ul><h2 id="npm其他命令"><a href="#npm其他命令" class="headerlink" title="npm其他命令"></a>npm其他命令</h2><p>卸载某个依赖包：</p><ul><li>npm uninstall package</li><li>npm uninstall package –save-dev</li><li>npm uninstall package -D</li></ul><p>强制重新build</p><ul><li>npm rebuild</li></ul><p>清除缓存</p><ul><li>npm cache clean</li></ul><h2 id="cnpm工具"><a href="#cnpm工具" class="headerlink" title="cnpm工具"></a>cnpm工具</h2><p>查看npm镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>我们可以直接设置npm的淘宝镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>但是对于大多数人来说），并不希望将npm镜像修改了</p><ul><li>第一，不太希望随意修改npm原本从官方下来包的渠道</li><li>第二，担心某天淘宝的镜像挂了或者不维护了，又要改来改去</li></ul><p>这个时候，我们可以使用cnpm，并且将cnpm设置为淘宝的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>查看cnpm镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm config get registry</span><br></pre></td></tr></table></figure><iframe id="csdn-buyside-iframe2" name="csdnBuysideIframe2" src="https://mall.csdn.net/sales/vip-buyside?from=" scrolling="no" width="0" height="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> 模块化开发 </tag>
            
            <tag> Express框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX基础</title>
      <link href="/myblog.github.io/2022/04/24/AJAX%20%E5%9F%BA%E7%A1%80/"/>
      <url>/myblog.github.io/2022/04/24/AJAX%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h2><p>AJAX 全称为Asynchronous JavaScript And XML，就是异步的JS 和XML<br>通过AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong><br>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p><h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a>XML 简介</h2><p>XML 可扩展标记语言。<br>XML 被设计用来传输和存储数据。<br>XML 和HTML 类似，不同的是HTML 中都是预定义标签，而XML 中没有预定义标签，<br>全都是自定义标签，用来表示一些数据。</p><p>比如说我有一个学生数据：<br>name = “孙悟空” ; age = 18 ; gender = “男” ;<br>用XML 表示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在已经被JSON 取代了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h2><h3 id="AJAX-的优点"><a href="#AJAX-的优点" class="headerlink" title="AJAX 的优点"></a>AJAX 的优点</h3><ol><li>可以无需刷新页面而与服务器端进行通信</li><li>允许你根据用户事件来更新部分页面内容</li></ol><h3 id="AJAX-的缺点"><a href="#AJAX-的缺点" class="headerlink" title="AJAX 的缺点"></a>AJAX 的缺点</h3><ol><li>没有浏览历史，不能回退</li><li>存在跨域问题(同源)</li><li>SEO 不友好</li></ol><h1 id="HTTP相关问题"><a href="#HTTP相关问题" class="headerlink" title="HTTP相关问题"></a>HTTP相关问题</h1><h2 id="MDN-文档"><a href="#MDN-文档" class="headerlink" title="MDN 文档"></a>MDN 文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></p><h2 id="HTTP-请求交互的基本过程"><a href="#HTTP-请求交互的基本过程" class="headerlink" title="HTTP 请求交互的基本过程"></a>HTTP 请求交互的基本过程</h2><p><img src="https://img-blog.csdnimg.cn/20210302161144256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>前后应用从浏览器端向服务器发送HTTP 请求(请求报文)</li><li>后台服务器接收到请求后, 调度服务器应用处理请求, 向浏览器端返回HTTP响应(响应报文)</li><li>浏览器端接收到响应, 解析显示响应体/调用监视回调</li></ol><h2 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h2><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method url`</span><br><span class="line">`GET /product_detail?id=2`</span><br><span class="line">`POST /login</span><br></pre></td></tr></table></figure><h3 id="多个请求头"><a href="#多个请求头" class="headerlink" title="多个请求头"></a>多个请求头</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host: www.baidu.com`</span><br><span class="line">`Cookie: BAIDUID=AD3B0FA706E; BIDUPSID=AD3B0FA706;`</span><br><span class="line">`Content-Type: application/x-www-form-urlencoded 或者application/json</span><br></pre></td></tr></table></figure><h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=tom&amp;pwd=123`</span><br><span class="line">`&#123;&quot;username&quot;: &quot;tom&quot;, &quot;pwd&quot;: 123&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h2><ol><li>响应状态行: <code>status statusText</code></li><li>多个响应头<br><code>Content-Type: text/html;charset=utf-8</code><br><code>Set-Cookie: BD_CK_SAM=1;path=/</code></li><li>响应体<br><code>html 文本/json 文本/js/css/图片...</code></li></ol><h2 id="post-请求体参数格式"><a href="#post-请求体参数格式" class="headerlink" title="post 请求体参数格式"></a>post 请求体参数格式</h2><ol><li><code>Content-Type: application/x-www-form-urlencoded;charset=utf-8</code><br>用于键值对参数，参数的键值用=连接, 参数之间用&amp;连接<br>例如: <code>name=%E5%B0%8F%E6%98%8E&amp;age=12</code></li><li><code>Content-Type: application/json;charset=utf-8</code><br>用于 json 字符串参数<br>例如: <code>&#123;&quot;name&quot;: &quot;%E5%B0%8F%E6%98%8E&quot;, &quot;age&quot;: 12&#125;</code></li><li><code>Content-Type: multipart/form-data</code><br>用于文件上传请求</li></ol><h2 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h2><p><code>200 OK</code> 请求成功。一般用于GET 与POST 请求<br><code>201 Created</code> 已创建。成功请求并创建了新的资源<br><code>401 Unauthorized</code> 未授权/请求要求用户的身份认证<br><code>404 Not Found</code> 服务器无法根据客户端的请求找到资源<br><code>500 Internal Server Error</code> 服务器内部错误，无法完成请求</p><h2 id="不同类型的请求及其作用"><a href="#不同类型的请求及其作用" class="headerlink" title="不同类型的请求及其作用"></a>不同类型的请求及其作用</h2><ol><li><code>GET</code>: 从服务器端<strong>读取</strong>数据（查）</li><li><code>POST</code>: 向服务器端<strong>添加</strong>新数据 （增）</li><li><code>PUT</code>: <strong>更新</strong>服务器端已经数据 （改）</li><li><code>DELETE</code>: <strong>删除</strong>服务器端数据 （删）</li></ol><h2 id="API-的分类"><a href="#API-的分类" class="headerlink" title="API 的分类"></a>API 的分类</h2><ol><li>REST API: restful （Representational State Transfer (资源)表现层状态转化）<br>(1) 发送请求进行CRUD 哪个操作由请求方式来决定<br>(2) 同一个请求路径可以进行多个操作<br>(3) 请求方式会用到GET/POST/PUT/DELETE</li><li>非REST API: restless<br>(1) 请求方式不决定请求的CRUD 操作<br>(2) 一个请求路径只对应一个操作<br>(3) 一般只有GET/POST</li></ol><h2 id="区别-一般http请求-与-ajax请求"><a href="#区别-一般http请求-与-ajax请求" class="headerlink" title="区别 一般http请求 与 ajax请求"></a>区别 一般http请求 与 ajax请求</h2><ol><li>ajax请求 是一种特别的 http请求</li><li>对服务器端来说, 没有任何区别, 区别在<strong>浏览器端</strong></li><li>浏览器端发请求: 只有<code>XHR</code> 或<code>fetch</code> 发出的才是ajax 请求, 其它所有的都是非ajax 请求</li><li>浏览器端接收到响应<br>(1) 一般请求: 浏览器一般会直接显示响应体数据, 也就是我们常说的刷新/跳转页面<br>(2) ajax请求: 浏览器不会对界面进行任何更新操作, 只是<strong>调用监视的回调函数</strong>并<strong>传入响应相关数据</strong></li></ol><h1 id="原生AJAX-的基本使用-XHR"><a href="#原生AJAX-的基本使用-XHR" class="headerlink" title="原生AJAX 的基本使用 XHR"></a>原生AJAX 的基本使用 XHR</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p><a href="http://nodejs.cn/">http://nodejs.cn/</a></p><h3 id="安装express（服务端框架）"><a href="#安装express（服务端框架）" class="headerlink" title="安装express（服务端框架）"></a>安装express（服务端框架）</h3><p><a href="https://www.expressjs.com.cn/![%E5%9C%A8%E8%BF%99%E9%87%8C%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%8F%8F%E8%BF%B0](https://img-blog.csdnimg.cn/20210209164615378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70)">https://www.expressjs.com.cn/![在这里插入图片描述](https://img-blog.csdnimg.cn/20210209164615378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70)</a></p><ol><li>初始化环境</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure><ol><li>下载express包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><ol><li>编写js代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  设置响应</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&quot;Hello Express&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中...&quot;</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ol><li>运行js程序</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node .\01express使用.js</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210209165304650.png" alt="在这里插入图片描述"></p><ol><li>打开网页显示页面<br><img src="https://img-blog.csdnimg.cn/20210209165339872.png" alt="在这里插入图片描述"></li><li>调试程序可以查看请求和响应<br><img src="https://img-blog.csdnimg.cn/2021020916541663.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210209165526228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h3 id="安装nodemon自动重启工具"><a href="#安装nodemon自动重启工具" class="headerlink" title="安装nodemon自动重启工具"></a>安装nodemon自动重启工具</h3><p>文件内容有修改自动重新启动服务<br><a href="https://www.npmjs.com/package/nodemon">https://www.npmjs.com/package/nodemon</a><br><img src="https://img-blog.csdnimg.cn/20210301205043799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> nodemon</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndoemon server.js</span><br></pre></td></tr></table></figure><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ol><li>使用<code>XMLHttpRequest</code> (XHR)对象可以与服务器交互, 也就是发送ajax 请求</li><li>前端可以获取到数据，而无需让整个的页面刷新。</li><li>这使得Web 页面可以只更新页面的局部，而不影响用户的操作。</li></ol><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a><br><code>XMLHttpRequest</code>，AJAX 的所有操作都是通过该对象进行的</p><h2 id="核心对象使用步骤"><a href="#核心对象使用步骤" class="headerlink" title="核心对象使用步骤"></a>核心对象使用步骤</h2><h3 id="创建XMLHttpRequest-对象"><a href="#创建XMLHttpRequest-对象" class="headerlink" title="创建XMLHttpRequest 对象"></a>创建XMLHttpRequest 对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><h3 id="设置请求信息（请求方法和url）"><a href="#设置请求信息（请求方法和url）" class="headerlink" title="设置请求信息（请求方法和url）"></a>设置请求信息（请求方法和url）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求方式</span></span><br><span class="line">xhr.<span class="title function_">open</span>(method, url);</span><br><span class="line"><span class="comment">//可以设置请求头，一般不设置</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(body) <span class="comment">//get请求不传 body 参数，只有post请求使用</span></span><br></pre></td></tr></table></figure><h3 id="接收响应（事件绑定，处理服务端返回的结果）"><a href="#接收响应（事件绑定，处理服务端返回的结果）" class="headerlink" title="接收响应（事件绑定，处理服务端返回的结果）"></a>接收响应（事件绑定，处理服务端返回的结果）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xhr.responseXML 接收 xml格式 的响应数据</span></span><br><span class="line"><span class="comment">//xhr.responseText 接收 文本格式 的响应数据</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// readyState 是 xhr对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line"><span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> text = xhr.<span class="property">responseText</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><p>点击返回响应信息<br><img src="https://img-blog.csdnimg.cn/20210209170011230.gif#pic_center" alt="在这里插入图片描述"><br>创建两个文件，浏览器端使用的html文件和服务器端使用的js文件<br><img src="https://img-blog.csdnimg.cn/20210209165720344.png" alt="在这里插入图片描述"><br>服务器端 server.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头 设置允许跨域</span></span><br><span class="line">  request.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&quot;Hello Ajax&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中...&quot;</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210209171737175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>前端页面 html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax GET 请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#result</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#90b</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取button元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 创建对象 </span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 初始化 设置请求方法和url</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3. 发送</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 4. 事件绑定 处理服务端返回的结果</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// readyState 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//判断 (服务端返回了所有的结果)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//判断响应状态码 200  404  403 401 500</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 处理结果 行 头 空行 体</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 响应</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态码&#x27;</span>, xhr.<span class="property">status</span>); <span class="comment">// 状态码</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态字符串&#x27;</span>, xhr.<span class="property">statusText</span>); <span class="comment">// 状态字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有响应头&#x27;</span>, xhr.<span class="title function_">getAllResponseHeaders</span>()); <span class="comment">// 所有响应头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应体&#x27;</span>, xhr.<span class="property">response</span>); <span class="comment">// 响应体</span></span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//设置 result 的文本</span></span></span><br><span class="line"><span class="language-javascript">            result.<span class="property">innerHTML</span>=xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125; </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021020917150363.gif#pic_center" alt="在这里插入图片描述"></p><h4 id="GET-请求设置请求参数"><a href="#GET-请求设置请求参数" class="headerlink" title="# GET 请求设置请求参数"></a># GET 请求设置请求参数</h4><p>设置url参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210209175142103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210209175221929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>鼠标放到div中，发post请求，将响应体放在div中呈现</p><p>server.js添加post</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头, 设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&quot;Hello Ajax POST&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>post.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax POST 请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#result</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#903</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 绑定事件</span></span></span><br><span class="line"><span class="language-javascript">    result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 创建对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 初始化 设置类型（请求方式）与url</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3. 发送   设置请求参数（请求体）</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 4. 事件绑定</span></span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 判断</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 处理服务端返回的结果</span></span></span><br><span class="line"><span class="language-javascript">            result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210218162905183.gif#pic_center" alt="在这里插入图片描述"></p><h4 id="设置请求头信息"><a href="#设置请求头信息" class="headerlink" title="# 设置请求头信息"></a># 设置请求头信息</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求体内容的类型</span></span><br><span class="line">xhr.<span class="title function_">setRequesHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-from-urlencoded&#x27;</span>);</span><br><span class="line"><span class="comment">// 自定义头信息</span></span><br><span class="line">xhr.<span class="title function_">setRequesHeader</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ykyk&#x27;</span>);</span><br></pre></td></tr></table></figure><p>server.js中设置响应头允许自定义请求头 post改成all</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Header&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="json数据请求"><a href="#json数据请求" class="headerlink" title="json数据请求"></a>json数据请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/json-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头, 设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应头, 设置允许自定义头信息</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 响应一个数据</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 对 对象 进行 字符串 转换</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">  <span class="comment">// 设置响应体 </span></span><br><span class="line">  response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="number">1234567891011121314</span></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;JSON&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #result &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      border: solid 1px #89b;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const result = document.getElementById(&#x27;result&#x27;);</span><br><span class="line">    // 绑定键盘按下事件</span><br><span class="line">    window.onkeydown = function()&#123;</span><br><span class="line">      // 发送请求</span><br><span class="line">      const xhr = new XMLHttpRequest();</span><br><span class="line">      // *2*.(自动转换) 设置响应体数据的类型(自动转换)</span><br><span class="line">      xhr.responseType = &#x27;json&#x27;;</span><br><span class="line">      // 初始化</span><br><span class="line">      xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/json-server&#x27;);</span><br><span class="line">      // 发送</span><br><span class="line">      xhr.send();</span><br><span class="line">      // 事件绑定</span><br><span class="line">      xhr.onreadystatechange = function()&#123;</span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line">            console.log(xhr.response);</span><br><span class="line">            // 1. 手动对数据转化 (字符串再转换成json)</span><br><span class="line">            // let data = JSON.parse(xhr.response); //转换成json</span><br><span class="line">            // result.innerHTML = data.name;</span><br><span class="line">            // *2*. (自动转换)自动转换(自动转换)</span><br><span class="line">            result.innerHTML = xhr.response.name; //已经自动变成json</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210218175629329.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="请求超时与网络异常"><a href="#请求超时与网络异常" class="headerlink" title="请求超时与网络异常"></a>请求超时与网络异常</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超时设置 （2秒）</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 超时回调</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;网络超时，请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 网络异常回调</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;网络异常，请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动取消</span></span><br><span class="line">xhr.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure><h2 id="请求重复发送问题"><a href="#请求重复发送问题" class="headerlink" title="请求重复发送问题"></a>请求重复发送问题</h2><h2 id="解决-IE-缓存问题"><a href="#解决-IE-缓存问题" class="headerlink" title="解决 IE 缓存问题"></a>解决 IE 缓存问题</h2><p><strong>问题</strong>：在一些浏览器中(IE),由于缓存机制的存在，ajax 只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。<br><strong>解决方式</strong>：浏览器的缓存是根据url 地址来记录的，所以我们只需要修改url 地址即可避免缓存问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;/testAJAX?t=&quot;</span>+<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure><h2 id="AJAX-请求状态"><a href="#AJAX-请求状态" class="headerlink" title="AJAX 请求状态"></a>AJAX 请求状态</h2><p><code>xhr.readyState</code> 可以用来查看请求当前的状态<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a><br><img src="https://img-blog.csdnimg.cn/20210218121704846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk3MjAwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>0: 表示XMLHttpRequest 实例已经生成，但是open()方法还没有被调用</li><li>1: 表示send()方法还没有被调用，仍然可以使用setRequestHeader()，设定HTTP请求的头信息</li><li>2: 表示send()方法已经执行，并且头信息和状态码已经收到</li><li>3: 表示正在接收服务器传来的body 部分的数据</li><li>4: 表示服务器数据已经完全接收，或者本次接收已经失败了</li></ul><h2 id="API总结"><a href="#API总结" class="headerlink" title="API总结"></a>API总结</h2><ul><li><code>XMLHttpRequest()</code>：创建 XHR 对象的构造函数</li><li><code>status</code>：响应状态码值，如 200、404</li><li><code>statusText</code>：响应状态文本，如 ’ok‘、‘not found’</li><li><code>readyState</code>：标识请求状态的只读属性 0-1-2-3-4</li><li><code>onreadystatechange</code>：绑定 readyState 改变的监听</li><li><code>responseType</code>：指定响应数据类型，如果是 ‘json’，得到响应后自动解析响应</li><li><code>response</code>：响应体数据，类型取决于 responseType 的指定</li><li><code>timeout</code>：指定请求超时时间，默认为 0 代表没有限制</li><li><code>ontimeout</code>：绑定超时的监听</li><li><code>onerror</code>：绑定请求网络错误的监听</li><li><code>open()</code>：初始化一个请求，参数为：<code>(method, url[, async])</code></li><li><code>send(data)</code>：发送请求</li><li><code>abort()</code>：中断请求 （发出到返回之间）</li><li><code>getResponseHeader(name)</code>：获取指定名称的响应头值</li><li><code>getAllResponseHeaders()</code>：获取所有响应头组成的字符串</li><li><code>setRequestHeader(name, value)</code>：设置请求头</li></ul><h1 id="jQuery-中的AJAX"><a href="#jQuery-中的AJAX" class="headerlink" title="jQuery 中的AJAX"></a>jQuery 中的AJAX</h1><h2 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure><ul><li>url:请求的URL 地址</li><li>data:请求携带的参数</li><li>callback:载入成功时回调函数</li><li>type:设置返回内容格式，xml, html, script, json, text, _default</li></ul><h2 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure><ul><li>url:请求的URL 地址</li><li>data:请求携带的参数</li><li>callback:载入成功时回调函数</li><li>type:设置返回内容格式，xml, html, script, json, text, _default</li></ul><h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="comment">// url</span></span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="attr">data</span>: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line"><span class="comment">// 请求类型</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line"><span class="comment">// 响应体结果</span></span><br><span class="line"><span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line"><span class="comment">// 成功的回调</span></span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(data);&#125;,</span><br><span class="line"><span class="comment">// 超时时间</span></span><br><span class="line"><span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="comment">// 失败的回调</span></span><br><span class="line"><span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错拉~&#x27;</span>);&#125;,</span><br><span class="line"><span class="comment">// 头信息</span></span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="attr">c</span>: <span class="number">300</span>,</span><br><span class="line"><span class="attr">d</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ul><li>同源策略(Same-Origin Policy)最早由Netscape 公司提出，是浏览器的一种安全策略</li><li>同源： 协议、域名、端口号必须完全相同</li><li>跨域： 违背同源策略就是<strong>跨域</strong></li></ul><h2 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><h4 id="1-JSONP-是什么"><a href="#1-JSONP-是什么" class="headerlink" title="1) JSONP 是什么"></a>1) JSONP 是什么</h4><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明<br>才智开发出来，只支持get 请求。</p><h4 id="2-JSONP-怎么工作的？"><a href="#2-JSONP-怎么工作的？" class="headerlink" title="2) JSONP 怎么工作的？"></a>2) JSONP 怎么工作的？</h4><p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>JSONP 就是利用script 标签的跨域能力来发送请求的。</p><h4 id="3-JSONP-的使用"><a href="#3-JSONP-的使用" class="headerlink" title="3) JSONP 的使用"></a>3) JSONP 的使用</h4><h5 id="1-动态的创建一个script-标签"><a href="#1-动态的创建一个script-标签" class="headerlink" title="1.动态的创建一个script 标签"></a>1.动态的创建一个script 标签</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="2-设置script-的src，设置回调函数"><a href="#2-设置script-的src，设置回调函数" class="headerlink" title="2.设置script 的src，设置回调函数"></a>2.设置script 的src，设置回调函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script.<span class="property">src</span> = <span class="string">&quot;http://localhost:3000/testAJAX?callback=abc&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(data.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="3-将script-添加到body-中"><a href="#3-将script-添加到body-中" class="headerlink" title="3.将script 添加到body 中"></a>3.将script 添加到body 中</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><h5 id="4-服务器中路由的处理"><a href="#4-服务器中路由的处理" class="headerlink" title="4.服务器中路由的处理"></a>4.服务器中路由的处理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/testAJAX&quot;</span> , <span class="keyword">function</span> (<span class="params">req , res</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到请求&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> callback = req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">res.<span class="title function_">send</span>(callback+<span class="string">&quot;(&quot;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4-jQuery-中的JSONP"><a href="#4-jQuery-中的JSONP" class="headerlink" title="4) jQuery 中的JSONP"></a>4) jQuery 中的JSONP</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./jquery-1.12.3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">getJSON</span>(<span class="string">&quot;http://api.douban.com/v2/movie/in_theaters?callback=?&quot;</span>,<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取所有的电影的条目</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> subjects = data.<span class="property">subjects</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//遍历电影条目</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;subjects.<span class="property">length</span> ; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#list&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;li&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript">subjects[i].<span class="property">title</span>+<span class="string">&quot;&lt;br /&gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;&lt;img src=\&quot;&quot;</span>+subjects[i].<span class="property">images</span>.<span class="property">large</span>+<span class="string">&quot;\&quot; &gt;&quot;</span>+</span></span><br><span class="line"><span class="language-javascript"><span class="string">&quot;&lt;/li&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p><h4 id="1-CORS-是什么？"><a href="#1-CORS-是什么？" class="headerlink" title="1) CORS 是什么？"></a>1) CORS 是什么？</h4><p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方<br>案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持<br>get 和post 请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些<br>源站通过浏览器有权限访问哪些资源</p><h4 id="2-CORS-怎么工作的？"><a href="#2-CORS-怎么工作的？" class="headerlink" title="2) CORS 怎么工作的？"></a>2) CORS 怎么工作的？</h4><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应<br>以后就会对响应放行。</p><h4 id="3-CORS-的使用"><a href="#3-CORS-的使用" class="headerlink" title="3) CORS 的使用"></a>3) CORS 的使用</h4><p>主要是服务器端的设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/testAJAX&quot;</span> , <span class="keyword">function</span> (<span class="params">req , res</span>) &#123;</span><br><span class="line"><span class="comment">//通过res 来设置响应头，来允许跨域请求</span></span><br><span class="line"><span class="comment">//res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1:3000&quot;);</span></span><br><span class="line">res.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&quot;testAJAX 返回的响应&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax前后端交互利器详解(二)</title>
      <link href="/myblog.github.io/2022/04/24/Ajax%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E5%88%A9%E5%99%A8%E8%AF%A6%E8%A7%A3(%E4%BA%8C)/"/>
      <url>/myblog.github.io/2022/04/24/Ajax%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E5%88%A9%E5%99%A8%E8%AF%A6%E8%A7%A3(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>参考配套视频：<a href="https://www.bilibili.com/video/BV1ji4y1876Y?p=2">web前后端交互 Ajax</a></li></ul><h1 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h1><h2 id="Ajax请求限制"><a href="#Ajax请求限制" class="headerlink" title="Ajax请求限制"></a>Ajax请求限制</h2><p>Ajax 只能向自己的服务器发送请求。比如现在有一个A网站、有一个B网站，A网站中的 HTML 文件只能向A网站服务器中发送 Ajax  请求，B网站中的 HTML 文件只能向 B 网站中发送 Ajax 请求，但是 A 网站是不能向 B 网站发送 Ajax请求的，同理，B  网站也不能向 A 网站发送 Ajax请求。</p><h2 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h2><p>如果两个页面拥有相同的协议、域名和端口，那么这两个页面就属于同一个源，其中只要有一个不相同，就是不同源</p><p><img src="https://img-blog.csdnimg.cn/eae7bf0e17b24738bb995f7dc6c29c1f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>例如我们开启两个服务器，一个端口是3000，另一个端口是3001</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="number">12345678910</span></span><br><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><p>我们在端口为3000的客户端发送ajax请求至端口为3001的服务器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/ajax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:3001/test&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dd5a51d82f6e40c7b40e6f4c51ce008b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="同源政策的目的"><a href="#同源政策的目的" class="headerlink" title="同源政策的目的"></a>同源政策的目的</h2><ul><li>同源政策是为了保证用户信息的安全，防止恶意的网站窃取数据。最初的同源政策是指 A 网站在客户端设置的 Cookie，B网站是不能访问的。</li><li>随着互联网的发展，同源政策也越来越严格，在不同源的情况下，其中有一项规定就是无法向非同源地址发送Ajax 请求，如果请求，浏览器就会报错</li></ul><h2 id="使用JSONP解决同源限制问题"><a href="#使用JSONP解决同源限制问题" class="headerlink" title="使用JSONP解决同源限制问题"></a>使用JSONP解决同源限制问题</h2><p>jsonp 是 json with padding 的缩写，它不属于 Ajax 请求，但它可以模拟 Ajax 请求</p><ol><li>将不同源的服务器端请求地址写在 script 标签的 src 属性中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;www.example.com&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">“https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>服务器端响应数据必须是一个函数的调用，真正要发送给客户端的数据需要作为函数调用的参数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="string">&#x27;fn(&#123;name: &quot;张三&quot;, age: &quot;20&quot;&#125;)&#x27;</span>;</span><br><span class="line">res.<span class="title function_">send</span>(data);</span><br></pre></td></tr></table></figure><ol><li><p>在客户端全局作用域下定义函数 fn</p><p>注意要将函数定义放在 script 标签的前面，因为 script 标签加载完服务器端的响应内容以后会直接调用这个准备好的函数，如果客户端没有定义这个函数，函数在调用时找不到这个函数的定义部分，代码将会报错</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (data) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 fn 函数内部对服务器端返回的数据进行处理</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (data) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们开启两个服务器，一个端口是3000，另一个端口是3001，我们在端口为3000的客户端发送ajax请求至端口为3001的服务器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn</span> (data) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 在客户端定义函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端的fn函数被调用了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.将非同源服务器端的请求地址写在script标签的src属性中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:3001/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在服务器端调用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在服务器调用函数</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="string">&#x27;fn(&#123;name: &quot;张三&quot;&#125;)&#x27;</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0021040acb4b42578a66dee0c6265f02.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="JSONP代码优化"><a href="#JSONP代码优化" class="headerlink" title="JSONP代码优化"></a>JSONP代码优化</h2><ol><li>客户端需要将函数名称传递到服务器端</li><li>将 script 请求的发送变成动态请求。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn</span> (data) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端的fn函数被调用了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.将非同源服务器端的请求地址写在script标签的src属性中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:3001/better?callback=fn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在非同源服务器端进行接收客户端传递的函数名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/better&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接收客户端传递过来的函数的名称</span></span><br><span class="line">    <span class="keyword">const</span> fnName = req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line">    <span class="comment">// 将函数名称对应的函数调用代码返回给客户端</span></span><br><span class="line">    <span class="keyword">const</span> result = fnName + <span class="string">&#x27;(&#123;&quot;name&quot;: &quot;张三&quot;&#125;)&#x27;</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/024ba9ff37d1498194634abb7a83fe44.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>我们将函数名称进行改变为f1，也使得 callback 的值改变为f1</p><p><img src="https://img-blog.csdnimg.cn/b7bb279282a54720a2d22f6884a320b2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li>封装 jsonp 函数，方便请求发送</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span> (options) &#123;</span><br><span class="line"><span class="comment">// 动态创建script标签</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"><span class="comment">// 拼接字符串的变量</span></span><br><span class="line"><span class="keyword">var</span> params = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> options.<span class="property">data</span>) &#123;</span><br><span class="line">params += <span class="string">&#x27;&amp;&#x27;</span> + attr + <span class="string">&#x27;=&#x27;</span> + options.<span class="property">data</span>[attr];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// myJsonp0124741</span></span><br><span class="line"><span class="keyword">var</span> fnName = <span class="string">&#x27;myJsonp&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// 它已经不是一个全局函数了</span></span><br><span class="line"><span class="comment">// 我们要想办法将它变成全局函数</span></span><br><span class="line"><span class="variable language_">window</span>[fnName] = options.<span class="property">success</span>;</span><br><span class="line"><span class="comment">// 为script标签添加src属性</span></span><br><span class="line">script.<span class="property">src</span> = options.<span class="property">url</span> + <span class="string">&#x27;?callback=&#x27;</span> + fnName + params;</span><br><span class="line"><span class="comment">// 将script标签追加到页面中</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"><span class="comment">// 为script标签添加onload事件</span></span><br><span class="line">script.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以说是封装了 JSONP 函数，我们可以将 JSONP 抽离为 jsonp.js文件，这样我们在客户端就可以引入 jsonp.js 文件使用了</p><ol><li><p>服务器端代码优化之 res.jsonp 方法。</p><p>服务器端接收客户端传递过来的函数名称，并且拼接函数调用，在函数调用的内部，我们还需要将真实的数据写在里面，如果数据是从数据库查出来的 json 对象，我们还需要先转换成 json 字符串，比较麻烦，express 框架给我们 res 下提供了 res.jsonp 方法</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/better&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">jsonp</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;lisi&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h2><p>CORS：全称为 Cross-origin resource sharing，即跨域资源共享，它允许浏览器向跨域服务器发送 Ajax 请求，克服了 Ajax 只能同源使用的限制。</p><h2 id="访问非同源数据服务器端"><a href="#访问非同源数据服务器端" class="headerlink" title="访问非同源数据服务器端"></a>访问非同源数据服务器端</h2><p>同源政策是浏览器给予 Ajax 技术的限制，服务器端是不存在同源政策限制，服务器端可以直接访问非同源网站中的数据。</p><p>所以对于客户端来讲，如果要获取非同源网站中的数据，可以让自己的服务器端获取非同源网站中的数据，等到自己的服务器端获取到数据之后，自己网站的服务器端再将数据响应到客户端，这样就绕过了浏览器的同源政策限制。</p><p><img src="https://img-blog.csdnimg.cn/a202baff345e472fa6253f432fada06c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>我们开启两个服务器，一个端口是3000，另一个端口是3001</p><p>客户端代码如下：</p><ul><li>客户端访问自己的服务器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/ajax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 为按钮添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/server&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器3000端代码如下:</p><ul><li>服务器端获取非同源网站的数据，需要引入第三方模块 request</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 向其他服务器端请求数据的模块</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(<span class="string">&#x27;http://localhost:3001/cross&#x27;</span>, <span class="function">(<span class="params">err, response, body</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第一个参数是请求地址</span></span><br><span class="line"><span class="comment">         * 第二个参数是回调函数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        res.<span class="title function_">send</span>(body);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>服务器3001端的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/cross&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dce888272333431eadb7492abd5a1f68.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="CORS跨域资源共享-1"><a href="#CORS跨域资源共享-1" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">origin: http://localhost:3000</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Origin: &#x27;http://localhost:3000&#x27;</span><br><span class="line"> Access-Control-Allow-Origin: &#x27;*&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Node 服务器端设置响应头示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">     res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">     res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET, POST&#x27;</span>);</span><br><span class="line">     <span class="title function_">next</span>();</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="withCredentials属性"><a href="#withCredentials属性" class="headerlink" title="withCredentials属性"></a>withCredentials属性</h2><p>使用Ajax技术发送跨域请求时，默认情况下不会在请求中携带cookie信息。但是如果两台服务器都是我们自己的，我们想要实现跨域请求，需要在客户端和服务器端进行处理</p><p>在客户端 ajax 对象下有一个属性：</p><ul><li>withCredentials：指定在涉及到跨域请求时，是否携带cookie信息，默认值为false</li></ul><p>在服务器端响应头中设置字段</p><ul><li>Access-Control-Allow-Credentials：true 允 许客户端发送请求时携带cookie</li></ul><h1 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h1><h2 id="ajax-方法概述"><a href="#ajax-方法概述" class="headerlink" title="$.ajax()方法概述"></a>$.ajax()方法概述</h2><p>$.ajax()方法作用：发送 Ajax 请求</p><h2 id="发送Ajax请求"><a href="#发送Ajax请求" class="headerlink" title="发送Ajax请求"></a>发送Ajax请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://www.example.com&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span> &#125;,</span><br><span class="line">     <span class="attr">contentType</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">     <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;&#125;,</span><br><span class="line">     <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>type：代表请求方式</p></li><li><p>url：代表请求地址</p></li><li><p>data：代表向服务器端发送的请求参数，它可以是一个对象，在内部会将其转化为参数字符串，除了传递对象以外，我们也可以传递字符串参数值,在内部都会将其转化为参数字符串进行发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">data</span>: <span class="string">&#x27;name=zhangsan&amp;age=20&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>contentType：告诉服务器端客户端要向服务器端传递的参数格式类型，默认是<code>application/x-www-form-urlencoded</code>,也就是 参数名 = 参数值，多个参数之间用 &amp; 分隔的参数字符串，如果传递的是 json 格式的请求参数,需要将 contentType 进行如下替换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 data 中传递 json 格式字符串,需要通过 <code>JSON.stringify</code> 将json对象转换为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringfy</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>beforeSend：允许我们在请求发送之前做一些事，是一个函数，比如在请求发送之前我们可以对请求参数进行格式验证，格式不正确，<code>return false</code> 请求便不会发送了</p></li><li><p>success：是一个函数，请求发送成功之后就会被调用，有一个形参，这个形参就是服务器端返回的数据</p></li><li><p>error：是一个函数，请求失败之后就会被调用，接收一个 ajax 对象，我们可以在对象中获取错误信息，并且根据错误信息做出错误处理</p></li></ul><p>例如，点击按钮发送 ajax 请求,客户端代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/base&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 请求成功以后函数被调用</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// response为服务器端返回的数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方法内部会自动将json字符串转换为json对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 请求失败以后函数被调用</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器端代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/base&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f47fe3f7a4a3408bba7b948d8752ada4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>如果我们是 post 请求方式:</p><p>客户端代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/base&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求成功以后函数被调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// response为服务器端返回的数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 方法内部会自动将json字符串转换为json对象</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求失败以后函数被调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器端代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/base&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zhaoliu&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">35</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/96ec08f7eb3946e3ae65bf1433def31d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><strong>若我们请求地址的协议，域名，端口都一样，我们请求地址url也可以省略,只用书写路由即可</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;/base&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求成功以后函数被调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// response为服务器端返回的数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 方法内部会自动将json字符串转换为json对象</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求失败以后函数被调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ajax方法传递请求参数"><a href="#ajax方法传递请求参数" class="headerlink" title="$.ajax方法传递请求参数"></a>$.ajax方法传递请求参数</h2><p>客户端代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 向服务器端发送的请求参数</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// data: &#x27;name=zhangsan&amp;age=100&#x27;  也可以这样传递</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 请求成功以后函数被调用</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// response为服务器端返回的数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方法内部会自动将json字符串转换为json对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/df7168dcee894bce8b19c27067327567.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>如果我们要传递json格式的字符串，</p><ul><li>改变 contentType 为 <code>application/json</code></li><li>需要通过 <code>JSON.stringify</code> 将json对象转换为字符串传递，请求成功服务器端响应回来 success 方法内部又会自动将 json字符串 转换为 json对象</li></ul><p>客户端代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// json 对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> params = &#123;<span class="attr">name</span>: <span class="string">&#x27;wangwu&#x27;</span>, <span class="attr">age</span>: <span class="number">300</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params),</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 指定参数的格式类型</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 将json对象转换为字符串传递</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求成功以后函数被调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// response为服务器端返回的数据</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 方法内部会自动将json字符串转换为json对象</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/963d6ff66ef84364bda2a809aa0680b1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="serialize方法"><a href="#serialize方法" class="headerlink" title="serialize方法"></a>serialize方法</h2><p>作用：将表单中的数据自动拼接成 参数名 = 参数值且多个参数之间用&amp;连接的字符串 类型的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = $(<span class="string">&#x27;#form&#x27;</span>).<span class="title function_">serialize</span>();</span><br><span class="line"><span class="comment">// name=zhangsan&amp;age=30</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>客户端代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#form&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将表单内容拼接成字符串类型的参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> params = $(<span class="string">&#x27;#form&#x27;</span>).<span class="title function_">serialize</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f3e1739571fa4e70a57f8b8d71915055.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>此时我们将表单内容拼接成字符串类型的参数，但是如果我们需要将表单用户输入的内容转换为对象类型，jquery 并没有给我们封装，我们需要自己封装</p><p>视频讲解地址：<a href="https://www.bilibili.com/video/BV1ji4y1876Y?p=49">https://www.bilibili.com/video/BV1ji4y1876Y?p=49</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#form&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将表单中用户输入的内容转换为对象类型</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> params = $(<span class="string">&#x27;#form&#x27;</span>).<span class="title function_">serialize</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">serializeObject</span>($(<span class="variable language_">this</span>));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将表单中用户输入的内容转换为对象类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">serializeObject</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 处理结果对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> result = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// [&#123;name: &#x27;username&#x27;, value: &#x27;用户输入的内容&#x27;&#125;, &#123;name: &#x27;password&#x27;, value: &#x27;123456&#x27;&#125;]</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> params = obj.<span class="title function_">serializeArray</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 循环数组 将数组转换为对象类型</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">each</span>(params, <span class="keyword">function</span>(<span class="params">index, value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    result[value.<span class="property">name</span>] = value.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将处理的结果返回到函数外部</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="发送jsonp请求"><a href="#发送jsonp请求" class="headerlink" title="发送jsonp请求"></a>发送jsonp请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.example.com&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定当前发送jsonp请求</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="comment">// 修改callback参数名称</span></span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&#x27;cb&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定函数名称</span></span><br><span class="line">    <span class="attr">jsonCallback</span>: <span class="string">&#x27;fnName&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;&#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>dataType：<code>jsonp</code> 表示指定当前发送jsonp请求</li><li>jsonp：<code>cb</code> 表示修改callback参数名称(可选)</li><li>jsonCallback：<code>fnName</code> 表示指定函数名称(可选)</li></ul><p>例如，客户端代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;/jsonp&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 代表现在要发送的是jsonp请求</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 请求成功会调用success函数,形参是服务器端传给我们的数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器端路由如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">jsonp</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">50</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cc648efb135343d7a272a3e6348a3775.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>有的服务器端不是通过 callback 来接收客户端传递过来的函数名称，而是换成了简写 cb，这样我们就需要传递 <code>jsonp:cb</code></li><li>jsonCallback：<code>fnName</code> 表示指定函数名称，正常来说，请求成功后会调用 success 函数，但是如果我们不想调用它，我们也可以自己传递函数名字，然后在客户端自己准备好这个函数的定义部分</li></ul><p>例如：客户端代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;/jsonp&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 向服务器端传递函数名字的参数名称</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">jsonp</span>: <span class="string">&#x27;cb&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 指定函数名称</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">jsonpCallback</span>: <span class="string">&#x27;fn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 代表现在要发送的是jsonp请求</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器端路由如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cb = req.<span class="property">query</span>.<span class="property">cb</span></span><br><span class="line">    <span class="keyword">const</span> data = cb + <span class="string">&quot;(&#123;name: &#x27;zhaoliu&#x27;&#125;)&quot;</span></span><br><span class="line">    res.<span class="title function_">send</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d8c9a459eb1e4fe1a92bb1a56b86958b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="get-post-方法概述"><a href="#get-post-方法概述" class="headerlink" title=".get().post()方法概述"></a>.get().post()方法概述</h2><p>作用：<code>$.get</code>方法用于发送get请求，<code>$.post</code>方法用于发送post请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://www.example.com&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;, <span class="keyword">function</span> (<span class="params">response</span>) &#123;&#125;) </span><br><span class="line"></span><br><span class="line">$.<span class="title function_">post</span>(<span class="string">&#x27;http://www.example.com&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;, <span class="keyword">function</span> (<span class="params">response</span>) &#123;&#125;)</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">get</span>(<span class="string">&#x27;/base&#x27;</span>, <span class="string">&#x27;name=zhangsan&amp;age=30&#x27;</span>, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//$.post(&#x27;/base&#x27;, function (response) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//console.log(response)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//&#125;)</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="RESTful风格的API"><a href="#RESTful风格的API" class="headerlink" title="RESTful风格的API"></a>RESTful风格的API</h1><h2 id="传统请求地址回顾"><a href="#传统请求地址回顾" class="headerlink" title="传统请求地址回顾"></a>传统请求地址回顾</h2><p><img src="https://img-blog.csdnimg.cn/c42367f856ed4dd1aba293c30c19bf48.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>这样的请求地址在使用上是没有问题的，但是语义比较混乱，例如：删除用户信息问号后面还要跟获取用户信息的 id，又比如删除用户有些人开发使用 remove、有的人开发使用 delete，这样就没有一套统一的请求地址。而 RESTful 就是为了解决这样的问题。</p><h2 id="RESTful-API概述"><a href="#RESTful-API概述" class="headerlink" title="RESTful API概述"></a>RESTful API概述</h2><p>一套关于设计请求的规范。</p><p><strong>我们看请求方式的设置如下</strong>：</p><ul><li>GET请求方式： 获取数据</li><li>POST请求方式： 添加数据</li><li>PUT请求方式： 更新数据</li><li>DELETE请求方式： 删除数据</li></ul><blockquote><p>注意：传统的HTML表单是不支持 PUT请求方式 和DELETE请求方式的，但是在Ajax中是支持的</p></blockquote><p><strong>我们看请求地址的设置如下</strong>：</p><ul><li>users =&gt; /users</li><li>articles =&gt; /articles</li></ul><h2 id="RESTful-API的实现"><a href="#RESTful-API的实现" class="headerlink" title="RESTful API的实现"></a>RESTful API的实现</h2><p><img src="https://img-blog.csdnimg.cn/846441b9bec4482fa3b2ca71c446e00c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取用户列表信息</span></span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>: <span class="string">&#x27;/users&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取id为1的用户信息</span></span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>: <span class="string">&#x27;/users/1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取id为1的用户信息</span></span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&#x27;delete&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>: <span class="string">&#x27;/users/10&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取id为1的用户信息</span></span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&#x27;put&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">url</span>: <span class="string">&#x27;/users/10&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础笔记(一)</title>
      <link href="/myblog.github.io/2022/04/24/CSS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
      <url>/myblog.github.io/2022/04/24/CSS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><p><img src="https://img-blog.csdnimg.cn/53e73b851fa04cf395325296fe89ea75.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="标签基础选择器🔥"><a href="#标签基础选择器🔥" class="headerlink" title="标签基础选择器🔥"></a>标签基础选择器🔥</h1><h2 id="标签选择器🔥"><a href="#标签选择器🔥" class="headerlink" title="标签选择器🔥"></a>标签选择器🔥</h2><ul><li><p>标签选择器的作用是为页面中某一类标签指定统一的CSS样式</p></li><li><p>优点是能快速为页面中同类型的标签统一设置样式</p></li><li><p>缺点是不能设计差异化样式，只能选择全部的当前标签</p></li><li><p>规范：   </p><ul><li>属性值前面，冒号后面，保留一个空格</li><li>标签名和大括号中间保留空格</li></ul></li></ul><h2 id="类选择器🔥"><a href="#类选择器🔥" class="headerlink" title="类选择器🔥"></a>类选择器🔥</h2><p>如果想要差异化选择不同的标签，单独选一个或者几个标签，可以使用类选择器</p><ul><li>结构需要用class属性来调用</li></ul><p>注意：</p><ol><li>类选择器在 HTML 中以 class 属性表示，在CSS中，类选择器以一个点 <code>.</code> 号表示</li><li>记忆口诀：样式<strong>点</strong>定义，结构<strong>类</strong>调用</li></ol><h3 id="类选择器多类名🔥"><a href="#类选择器多类名🔥" class="headerlink" title="类选择器多类名🔥"></a>类选择器多类名🔥</h3><ul><li><p>我们可以给一个标签指定多个类名，简单理解就是一个标签有多个名字</p></li><li><p>在标签 class 属性中写多个类名</p></li><li><p>多个类名中间必须用空格分开</p></li><li><p>这个标签就可以分别具有这些类名的样式</p></li></ul><p>✍多类名开发中使用场景：</p><ol><li>可以把一些标签元素相同的样式(公共的部分)放到一个类里面</li><li>这些标签都可以调用这个公共的类，然后再调用自己独有的类</li><li>从而节省CSS代码，统一修改也方便</li></ol><h2 id="id选择器🔥"><a href="#id选择器🔥" class="headerlink" title="id选择器🔥"></a>id选择器🔥</h2><ul><li>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式</li><li>HTML 元素以 id属性 来设置 id 选择器，CSS中 id 选择器 以 “#” 来定义</li></ul><p>注意：</p><ul><li>id 属性只能在每个 HTML 文档中出现一次。</li><li>记忆口诀：样式 <strong>#</strong> 定义，结构 <strong>id</strong> 调用。只能调用一次，别人切勿使用</li></ul><h3 id="区别🔥"><a href="#区别🔥" class="headerlink" title="区别🔥"></a>区别🔥</h3><p>id选择器和类选择器的区别？</p><ul><li>类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用</li><li>id 选择器好比人的身份证号码，全中国是唯一的，不得重复。</li><li>id 选择器和类选择器最大的不同在于使用次数上</li><li>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</li></ul><p>记忆口诀：</p><ul><li>样式<strong>点</strong>定义，结构<strong>类</strong>调用</li><li>样式 <strong>#</strong> 定义，结构 <strong>id</strong> 调用</li></ul><h2 id="通配符选择器🔥"><a href="#通配符选择器🔥" class="headerlink" title="通配符选择器🔥"></a>通配符选择器🔥</h2><ul><li><p>CSS 中， 通配符使用 <code>*</code> 定义，它表示选取页面中所有元素(标签)。</p></li><li><p>通配符选择器不需要调用，自动就给所有的元素使用样式</p></li><li><p>一般是用于清楚元素标签的内外边距</p></li></ul><h2 id="基础选择器总结🔥"><a href="#基础选择器总结🔥" class="headerlink" title="基础选择器总结🔥"></a>基础选择器总结🔥</h2><table><thead><tr><th>基础选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>语法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签</td><td>不能差异化选择</td><td>较多</td><td>p {color: red}</td></tr><tr><td>类选择器</td><td>可以选出1个或者多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.nav {color: red}</td></tr><tr><td>id 选择器</td><td>一次只能选择1个标签</td><td>ID 属性只能在每个 HTML 文档中出现一次</td><td>一般和 js 搭配</td><td>#nav {color: red}</td></tr><tr><td>通配符选择器</td><td>选择所有的标签</td><td>选择的太多，有部分不需要</td><td>特殊情况使用</td><td>* {color: red}</td></tr></tbody></table><h1 id="CSS字体属性🔥"><a href="#CSS字体属性🔥" class="headerlink" title="CSS字体属性🔥"></a>CSS字体属性🔥</h1><p>CSS 字体属性用于定义字体系列、大小、粗细和文字样式(如斜体)</p><h2 id="font-family🔥"><a href="#font-family🔥" class="headerlink" title="font-family🔥"></a>font-family🔥</h2><ul><li><p>CSS 使用 font-family 属性设置文本的字体系列</p></li><li><p>各种字体之间必须使用英文状态下的逗号隔开</p></li><li><p>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</p></li><li><p>最常见的几个字体：</p></li></ul><h2 id="font-size🔥"><a href="#font-size🔥" class="headerlink" title="font-size🔥"></a>font-size🔥</h2><ul><li><p>CSS 使用 font-size 属性设置字体大小</p></li><li><p>px (像素)大小是我们网页的最常用的单位</p></li><li><p>谷歌浏览器默认的文字大小为 16px</p></li></ul><h2 id="font-weight🔥"><a href="#font-weight🔥" class="headerlink" title="font-weight🔥"></a>font-weight🔥</h2><ul><li>wite-space: nowrap(强制一行显示)</li><li>CSS 使用 font-weight 属性设置字体的粗细</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值(不加粗的)，相当于<strong>number=400</strong></td></tr><tr><td>bold</td><td>定义粗体(加粗的)，相当于<strong>number=700</strong></td></tr><tr><td>bolder</td><td>定义特粗体</td></tr><tr><td>100-900</td><td>400等同于 normal，700等同于 bold，注意这个数字后面不跟单位</td></tr></tbody></table><p>实际开发中，我们更喜欢用<strong>数字表示粗细</strong></p><h2 id="font-style🔥"><a href="#font-style🔥" class="headerlink" title="font-style🔥"></a>font-style🔥</h2><ul><li>CSS 使用 font-style 属性设置文字样式</li></ul><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值，浏览器会显示标准的字体样式</td></tr><tr><td>italic</td><td>浏览器会显示<strong>斜体</strong>的字体样式</td></tr></tbody></table><p>注意：<strong>平时我们很少给文字加斜体，反而要给斜体标签( em , i )改为不倾斜字体</strong></p><h2 id="字体属性复合写法🔥"><a href="#字体属性复合写法🔥" class="headerlink" title="字体属性复合写法🔥"></a>字体属性复合写法🔥</h2><p>字体复合属性可以把以上文字样式综合来写，这样写更节约代码，例如：</p><ul><li><strong>顺序：文字样式 文字粗细 文字大小 文字字体</strong></li><li>使用font属性时，必须按照上面语法格式中的顺序书写，<strong>不能更换顺序</strong>，并且各个属性间<strong>以空格</strong>隔开</li><li>不需要设置的属性可以省略(取默认值)，但必须保留<code>font-size</code> 和<code>font-family</code>属性，否则 font 属性将不起作用</li></ul><h2 id="字体属性总结🔥"><a href="#字体属性总结🔥" class="headerlink" title="字体属性总结🔥"></a>字体属性总结🔥</h2><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>font-style</td><td>字体样式</td><td>记住倾斜是 italic，不倾斜是 normal，实际开发最常用 normal</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>加粗是 700 或者 bold ，不加粗是 normal 或者 400，记住数字不加单位</td></tr><tr><td>font-size</td><td>字号</td><td>我们通常用的单位是 px ，一定要跟上单位</td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按照团队约定来写字体</td></tr><tr><td>font</td><td>字体连写</td><td>①字体连写是有顺序的，不能随意换位置 ② <strong>字体和字号必须同时出现</strong></td></tr></tbody></table><h1 id="CSS文本属性🔥"><a href="#CSS文本属性🔥" class="headerlink" title="CSS文本属性🔥"></a>CSS文本属性🔥</h1><p>CSS 文本属性可以设置文本的 外观，比如文本颜色、对齐文本、装饰文本、文本缩进、行间距的等</p><h2 id="color🔥"><a href="#color🔥" class="headerlink" title="color🔥"></a>color🔥</h2><ul><li>color 属性用于定义文本的颜色</li></ul><table><thead><tr><th>表示</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red，green，blue，pink等</td></tr><tr><td>十六进制</td><td>#FF0000, #FF6600，#29D794</td></tr><tr><td>RGB代码</td><td>rgb（255，0，0） 或rgb(100%，0%，0%)</td></tr></tbody></table><p>实际开发中最常用的是十六进制。</p><h2 id="text-align🔥"><a href="#text-align🔥" class="headerlink" title="text-align🔥"></a>text-align🔥</h2><ul><li>text-align 属性用于设置文本内容的水平对齐方式</li></ul><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h2 id="text-decoration🔥"><a href="#text-decoration🔥" class="headerlink" title="text-decoration🔥"></a>text-decoration🔥</h2><ul><li>text-decoration 属性用于装饰文本，可以给文本添加下划线，删除线，上划线等</li></ul><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。没有装饰线(最常用)</td></tr><tr><td>underline</td><td>下划线，链接自带下划线（常用）</td></tr><tr><td>overline</td><td>上划线(几乎不用)</td></tr><tr><td>line-through</td><td>删除线 (不常用)</td></tr></tbody></table><p>重点记住如何添加下划线，如何删除下划线，其余了解即可。</p><h2 id="text-indent🔥"><a href="#text-indent🔥" class="headerlink" title="text-indent🔥"></a>text-indent🔥</h2><ul><li><p>text-indent 属性用于指定文本的第一行缩进，通常是将段落的首行缩进</p></li><li><p>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值</p></li><li><p>em是一个相对单位，就是当前元素(font-size)<strong>1个文字的大小</strong></p></li><li><p>如果当前元素没有设置大小，则会按照父元素的一个文字大小</p></li></ul><h2 id="line-height🔥"><a href="#line-height🔥" class="headerlink" title="line-height🔥"></a>line-height🔥</h2><ul><li>line-height 属性用于设置行间的距离(行高)，可以控制文字行与行之间的距离</li></ul><p><img src="https://img-blog.csdnimg.cn/64c38bf516e9498096d8f3ebbc7b6ded.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>行间距包括<strong>上间距、文本高度、下间距</strong></p><h2 id="文本属性总结🔥"><a href="#文本属性总结🔥" class="headerlink" title="文本属性总结🔥"></a>文本属性总结🔥</h2><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td><td>通常用十六进制，而且是简写形式 #fff</td></tr><tr><td>text-align</td><td>文本对齐</td><td>可以设定文字水平的对齐方式</td></tr><tr><td>text-indent</td><td>文本缩进</td><td>段落首行缩进</td></tr><tr><td>text-decoration</td><td>文本修饰</td><td>记住添加下划线 underline 取消下划线 none</td></tr><tr><td>line-height</td><td>行高</td><td>控制行与行之间的距离</td></tr></tbody></table><h1 id="CSS复合选择器🔥"><a href="#CSS复合选择器🔥" class="headerlink" title="CSS复合选择器🔥"></a>CSS复合选择器🔥</h1><p>复合选择器：是由两个或多个基础选择器，通过不同的方式组合而成的</p><p>常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器</p><h2 id="后代选择器🔥"><a href="#后代选择器🔥" class="headerlink" title="后代选择器🔥"></a>后代选择器🔥</h2><ul><li>后代选择器又称为包含选择器，<strong>可以选择父元素里面的子元素</strong></li><li>其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就称为外层标签的后代</li></ul><p>上述语法表示**选择元素1里面的所有元素2(后代元素)**，例如</p><ul><li>元素1 和 元素2 中间用空格隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是<strong>元素2</strong></li></ul><h2 id="子选择器🔥"><a href="#子选择器🔥" class="headerlink" title="子选择器🔥"></a>子选择器🔥</h2><ul><li><p><strong>子元素选择器</strong>只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。</p><p>上述语法表示<strong>选择元素1 里面的所有直接后代(子元素)元素2</strong>，例如</p></li><li><p>元素1 和 元素2 中间用<strong>大于号</strong>隔开</p></li><li><p>元素1 是父级，元素2 是子级，<strong>最终选择的是元素2</strong></p></li><li><p>元素2必须是<strong>亲儿子</strong>，其孙子、重孙之类都不归他管</p></li></ul><h2 id="并集选择器🔥"><a href="#并集选择器🔥" class="headerlink" title="并集选择器🔥"></a>并集选择器🔥</h2><p><strong>并集选择器可以选择多组标签，同时为它们定义相同的样式。</strong></p><ul><li><p>并集选择器是各选择器通过<strong>英文逗号</strong>连接而成</p></li><li><p>任何形式的选择器都可以作为并集选择器的一部分</p><p>上述语法表示<strong>选择元素1和元素2</strong>，例如</p></li><li><p>元素1 和 元素2 中间用<strong>逗号隔开</strong></p></li><li><p>逗号可以理解为和的意思</p></li><li><p>并集选择器通常用于集体声明</p></li></ul><h2 id="伪类选择器🔥"><a href="#伪类选择器🔥" class="headerlink" title="伪类选择器🔥"></a>伪类选择器🔥</h2><ul><li><strong>伪类选择器</strong>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素</li><li>伪类选择器书写最大的特点是<strong>用冒号(😃</strong>表示，比如 <code>:hover</code>、<code>:first-child</code></li><li>伪类选择器很多，比如有链接伪类、结构伪类，这里先记录常用的链接伪类选择器</li></ul><h3 id="链接伪类选择器🔥"><a href="#链接伪类选择器🔥" class="headerlink" title="链接伪类选择器🔥"></a>链接伪类选择器🔥</h3><h3 id="focus伪类选择器🔥"><a href="#focus伪类选择器🔥" class="headerlink" title=":focus伪类选择器🔥"></a>:focus伪类选择器🔥</h3><ul><li><code>:focus</code>伪类选择器用于<strong>选取获得焦点的表单元素</strong></li><li>焦点就是光标，一般情况<code>&lt;input&gt;</code>类表单元素才能获取，因此这个选择器也主要针对表单元素来说</li></ul><h2 id="复合选择器总结🔥"><a href="#复合选择器总结🔥" class="headerlink" title="复合选择器总结🔥"></a>复合选择器总结🔥</h2><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> <code>.nav a</code></td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是<strong>大于</strong> <code>.nav&gt;p</code></td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集团声明</td><td>较多</td><td>符号是<strong>逗号</strong> <code>.nav,.header</code></td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住<code>a&#123;&#125;</code>和<code>a:hover</code> ，实际开发的写法</td></tr><tr><td>:focus选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td><code>input:focus</code> 记住这个写法</td></tr></tbody></table><h1 id="CSS元素显示模式🔥"><a href="#CSS元素显示模式🔥" class="headerlink" title="CSS元素显示模式🔥"></a>CSS元素显示模式🔥</h1><h2 id="块元素🔥"><a href="#块元素🔥" class="headerlink" title="块元素🔥"></a>块元素🔥</h2><ol><li><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code> 标签是最典型的块元素。</p></li><li><p>块级元素的特点：</p><p>①：比较霸道，自己独占一行</p><p>②：高度，宽度，外边距以及内边距都可以控制</p><p>③：宽度默认是容器（父级宽度）的100%</p><p>④：是一个容器及盒子，里面可以放行内或块级元素</p></li><li><p><strong>注意：</strong></p><p>①：文字类的元素内不能使用块级元素</p><p>②：<code>&lt;p&gt;</code> 标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></p><p>③：同理，<code>&lt;h1&gt;~&lt;h6&gt;</code>等都是文字类块级标签，里面也不能存放其他块级元素。</p></li></ol><h2 id="行内元素🔥"><a href="#行内元素🔥" class="headerlink" title="行内元素🔥"></a>行内元素🔥</h2><ol><li>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等</li><li>其中<code>&lt;span&gt;</code>标签是<strong>最典型的行内元素</strong>。有的地方也将行内元素称为<strong>内联元素</strong>。</li><li><strong>行内元素的特点：</strong></li></ol><p>①：相邻行内元素在一行上，一行可以显示多个</p><p>②：高，宽直接设置是无效的</p><p>③：默认宽度就是它本身内容的宽度</p><p>④：行内元素只能容纳文本或其他行内元素</p><p><strong>注意</strong>：</p><ul><li>链接里面不能再放链接</li><li>特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式最安全</li></ul><h2 id="行内块元素🔥"><a href="#行内块元素🔥" class="headerlink" title="行内块元素🔥"></a>行内块元素🔥</h2><ol><li><p>在行内元素中有几个特殊的标签 —— <code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>，它们同时具有块元素和行内元素的特点</p></li><li><p>有些资料称它们为<strong>行内块</strong>元素</p></li><li><p>特点：</p><p>①：和相邻行内元素在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)</p><p>②：默认宽度就是它本身内容的宽度(行内元素特点)</p><p>③：高度，行高，外边距以及内边距都可以控制(块级元素特点)</p></li></ol><h2 id="元素显示模式总结🔥"><a href="#元素显示模式总结🔥" class="headerlink" title="元素显示模式总结🔥"></a>元素显示模式总结🔥</h2><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h2 id="元素显示模式转换🔥"><a href="#元素显示模式转换🔥" class="headerlink" title="元素显示模式转换🔥"></a>元素显示模式转换🔥</h2><ul><li>转换为块元素： <code>display:block</code></li><li>转换为行内元素： <code>display:inline</code></li><li>转换为行内块元素: <code>display:inline-block</code></li></ul><h2 id="👉小技巧🔥"><a href="#👉小技巧🔥" class="headerlink" title="👉小技巧🔥"></a>👉小技巧🔥</h2><p>CSS没有给我们提供文字垂直居中的代码，这里我们可以用一个小技巧来实现单行文字垂直居中</p><p>解决方案：</p><ul><li><strong>让文字的行高等于盒子的高度，就可以让文字在当前盒子内垂直居中。</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/9c556ac433af41b5888802765754b8f5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>简单理解：</p><ul><li>行高的上空隙和下空隙把文字挤到中间了</li><li>如果是行高小于盒子高度，文字会偏上，如果行高大于盒子高度，则文字偏下</li></ul><h1 id="CSS背景🔥"><a href="#CSS背景🔥" class="headerlink" title="CSS背景🔥"></a>CSS背景🔥</h1><p>通过 CSS 背景属性，可以给页面元素添加背景样式。</p><p>背景属性可以设置<strong>背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定</strong>等。</p><h2 id="background-color🔥"><a href="#background-color🔥" class="headerlink" title="background-color🔥"></a>background-color🔥</h2><ul><li><p>background-color 属性定义了元素的背景颜色</p></li><li><p>一般情况下默认颜色是<strong>transparent（透明）</strong>，我们也可以手动指定背景颜色为透明色</p></li></ul><h2 id="background-image🔥"><a href="#background-image🔥" class="headerlink" title="background-image🔥"></a>background-image🔥</h2><ul><li>background-image 属性描述了元素的背景图像。</li></ul><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无背景图（默认）</td></tr><tr><td>url</td><td>使用绝对或相地址指定的背景图像</td></tr></tbody></table><p>注意：<strong>背景图片后面的地址，千万不要忘记加URL，同时里面的路径不要加引号</strong>。</p><h2 id="background-repeat🔥"><a href="#background-repeat🔥" class="headerlink" title="background-repeat🔥"></a>background-repeat🔥</h2><ul><li>background-repeat 属性定义背景图像的平铺</li></ul><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺(默认的)</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向平铺</td></tr></tbody></table><h2 id="background-position🔥"><a href="#background-position🔥" class="headerlink" title="background-position🔥"></a>background-position🔥</h2><ul><li><p>background-position 属性可以改变图片在背景中的位置</p></li><li><p>参数：X坐标 Y坐标</p></li><li><p>可以使用 方位名词 或者 精确单位</p></li></ul><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数|由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top| center | bottom |left |center |right <strong>方位名词</strong></td></tr></tbody></table><ol><li><p>参数是方位名词</p><p>①：如果指定的两个值都是方位名词，则两个值前后顺序无关，比如<code>left top</code>和<code>top left</code></p><p>②：如果只指定了一个方位名词，另一个值省略，则第二个值默认<strong>居中对齐</strong></p></li><li><p>参数是精准单位</p><p>①：如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</p><p>②：如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</p></li><li><p>参数是混合单位</p><p>①：如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</p></li></ol><h2 id="background-attachment🔥"><a href="#background-attachment🔥" class="headerlink" title="background-attachment🔥"></a>background-attachment🔥</h2><ul><li>background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动</li></ul><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h2 id="背景复合写法🔥"><a href="#背景复合写法🔥" class="headerlink" title="背景复合写法🔥"></a>背景复合写法🔥</h2><ul><li><code>background</code> ： 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</li></ul><p>这是实际开发中，我们更提倡的写法。</p><h2 id="背景色半透明🔥"><a href="#背景色半透明🔥" class="headerlink" title="背景色半透明🔥"></a>背景色半透明🔥</h2><p>CSS3为我们提供了背景颜色半透明的效果</p><ol><li>最后一个参数是<code>alpha</code> 透明度 ，取值范围在0~1之间</li><li>我们习惯把0.3的 0省略掉，写为<code>background(0,0,0,.3)</code>;</li><li>注意：<strong>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</strong></li></ol><h2 id="背景总结🔥"><a href="#背景总结🔥" class="headerlink" title="背景总结🔥"></a>背景总结🔥</h2><table><thead><tr><th>属性</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td><td>预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td>背景图片</td><td>url(图片路径)</td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/ no-repeat /repeat-x/repeat-y</td></tr><tr><td>background-position</td><td>背景位置</td><td>length/position 分别是x 和y坐标</td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll(背景滚动) /fixed(背景固定)</td></tr><tr><td>背景简写</td><td>书写更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td></tr><tr><td>背景色半透明</td><td>背景颜色半透明</td><td>background : rgba(0,0,0,0.3);<strong>后面必须是四个值</strong></td></tr></tbody></table><p>背景图片:实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置.</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础笔记(三)</title>
      <link href="/myblog.github.io/2022/04/24/CSS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0(%E4%B8%89)/"/>
      <url>/myblog.github.io/2022/04/24/CSS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><p><img src="https://img-blog.csdnimg.cn/9ad8d0ce9563431ebda6267b0f22bb09.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="新增选择器🔥"><a href="#新增选择器🔥" class="headerlink" title="新增选择器🔥"></a>新增选择器🔥</h1><p>CSS3 给我们新增了选择器，可以更加便捷，更加自由的选择目标元素。</p><ul><li>属性选择器</li><li>结构伪类选择器</li><li>伪元素选择器</li></ul><h2 id="属性选择器🔥"><a href="#属性选择器🔥" class="headerlink" title="属性选择器🔥"></a>属性选择器🔥</h2><ul><li>属性选择器可以根据元素特定的属性来选择元素，<strong>这样就可以不用借助于类或者id选择器</strong></li></ul><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有att属性的E元素</td></tr><tr><td>E[att=“val”]</td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E[att^=“val”]</td><td>匹配具有att属性且值以val开头的E元素</td></tr><tr><td>E[att$=“val”]</td><td>匹配具有att属性且值以val结尾的E元素</td></tr><tr><td>E[att*=“val”]</td><td>匹配具有att属性且值中含有val的E元素</td></tr></tbody></table><ol><li><p><strong>利用属性选择器就可以不借助于类或者id选择器</strong></p></li><li><p><strong>属性选择器还可以选择 属性 = 值的某些元素</strong></p></li><li><p><strong>属性选择器可以选择属性值开头的某些元素</strong></p></li><li><p><strong>属性选择器可以选择属性值结尾的某些元素</strong></p></li></ol><p>注意：<strong>类选择器，属性选择器，伪类选择器</strong>，权重为10</p><h2 id="结构伪类选择器🔥"><a href="#结构伪类选择器🔥" class="headerlink" title="结构伪类选择器🔥"></a>结构伪类选择器🔥</h2><ul><li>结构伪类选择器主要根据<strong>文档结构</strong>来选择元素</li><li>常用于根据父级选择器选择里面的子元素</li></ul><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个子元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个E元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中的第n个子元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type（n）</td><td>指定类型E的第n个</td></tr></tbody></table><h3 id="①、E-first-child-和E-last-child"><a href="#①、E-first-child-和E-last-child" class="headerlink" title="①、E:first-child 和E:last-child"></a>①、E:first-child 和E:last-child</h3><h3 id="②、nth-child-n"><a href="#②、nth-child-n" class="headerlink" title="②、nth-child(n)"></a>②、nth-child(n)</h3><ul><li><code>nth-child(n)</code>选择某个父级元素的一个或多个特定的子元素（重点）</li></ul><ol><li>n可以是<strong>数字，关键字和公式</strong></li><li>n如果是数字，就是选择第n个子元素，里面数字从1开始</li><li>n可以是关键字：<strong>even</strong> 偶数，<strong>odd</strong>奇数</li><li>n可以是公式：常见的公式如下（如果n是公式，则从0开始计算，但是第0个元素或者超出了元素的个数会被忽略）</li></ol><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数（等价于even）</td></tr><tr><td>2n+1</td><td>奇数（等价于odd）</td></tr><tr><td>5n</td><td>5 10 15 …（5的倍数）</td></tr><tr><td>n+5</td><td>从第5个开始（包含第五个）到最后</td></tr><tr><td>-n+5</td><td>前5个（包含第5个）</td></tr></tbody></table><h3 id="③、E-first-of-type和E-last-of-type"><a href="#③、E-first-of-type和E-last-of-type" class="headerlink" title="③、E:first-of-type和E:last-of-type"></a>③、E:first-of-type和E:last-of-type</h3><table><thead><tr><th>E:first-of-type</th><th>指定类型E的第一个</th></tr></thead><tbody><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr></tbody></table><h3 id="④、区别"><a href="#④、区别" class="headerlink" title="④、区别"></a>④、区别</h3><ul><li><pre><code>nth-child(n)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">和</span><br><span class="line"></span><br></pre></td></tr></table></figure>nth-of-type(n)</code></pre><p>区别?   </p><ol><li><strong>nth-child 对父元素里面所有孩子排序选择(序号是固定的)，先找到第n个孩子，然后看看是否和E匹配</strong></li><li><strong>nth-of-type 对父元素里面指定子元素进行排序选择，先去匹配E,然后再根据E 找第n个孩子</strong></li></ol></li></ul><h3 id="⑤、小结"><a href="#⑤、小结" class="headerlink" title="⑤、小结"></a>⑤、小结</h3><ol><li>结构伪类选择器一般用于选择父级里面的第几个孩子</li><li>nth-child 对父元素里面所有孩子排序选择（序号是固定的），先找到第n个孩子，然后看看是否和E匹配</li><li>nth-of-type 对父元素里面指定子元素进行排序选择，先去匹配E，然后再根据E找第n个孩子</li><li>关于nth-child(n)， 我们要知道n是从0开始计算的，要记住常用的公式</li><li>如果是无序列表，我们肯定用 nth-child 更多</li><li>类选择器，属性选择器，伪类选择器，权重为10</li></ol><h2 id="伪元素选择器🔥"><a href="#伪元素选择器🔥" class="headerlink" title="伪元素选择器🔥"></a>伪元素选择器🔥</h2><ul><li>伪元素选择器可以帮我们利用CSS<strong>创建新标签元素</strong>，而不需要HTML标签，从而简化HTML结构</li></ul><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li><p>before 和 after 创建一个元素，但是是属于<strong>行内元素</strong></p><ul><li>before和after 都是一个盒子，都作为父元素的孩子</li></ul></li><li><p>新创建的这个元素在文档树中是找不到的，所以我们称为<strong>伪元素</strong></p></li><li><p>语法：</p></li><li><p>before是放在内容的前面，after是放在了内容的后面</p></li></ol><ul><li>before 和 after 必须有 <strong>content</strong> 属性</li><li>before 在父元素内容的前面创建元素 ，after 在父元素内容的后面插入元素</li><li><strong>伪元素选择器</strong> 和 <strong>标签选择器</strong> 一样，权重为1</li></ul><h1 id="CSS3盒子模型🔥"><a href="#CSS3盒子模型🔥" class="headerlink" title="CSS3盒子模型🔥"></a>CSS3盒子模型🔥</h1><ul><li>CSS3 中可以通过<code>box-sizing</code> 来指定盒模型</li><li>有2个值：这样我们计算盒子大小的方式就发生了改变<ul><li><code>content-box</code></li><li><code>border-box</code></li></ul></li></ul><h2 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h2><ul><li>第一种情况是 CSS 的盒子模型，盒子大小为 width + padding + border</li><li>此种情况盒子大小为 宽度 + 内边距 + 边框，这也是我们之前写盒子所默认的</li></ul><h2 id="border-box🔥"><a href="#border-box🔥" class="headerlink" title="border-box🔥"></a>border-box🔥</h2><ul><li>第二种情况是 CSS3 的盒子模型，盒子大小为 width</li><li>此种情况盒子大小为 宽度，不包括内边距和边框，这样 padding 和 border 就不会撑大盒子了(前提是 padding 和 border 不会超过 width 宽度)</li><li>我们可以在以后的 css 通配符中添加 CSS3 盒子模型</li></ul><h1 id="C3其他特性"><a href="#C3其他特性" class="headerlink" title="C3其他特性"></a>C3其他特性</h1><h2 id="滤镜filter"><a href="#滤镜filter" class="headerlink" title="滤镜filter"></a>滤镜filter</h2><ul><li><p><code>filter</code>: CSS属性将模糊或颜色偏移等图形效果应用于元素(图片变模糊)</p></li><li><p>语法：</p></li><li><p>模糊处理：<code>blur</code>,数值越大越模糊</p></li></ul><p><img src="https://img-blog.csdnimg.cn/36abbf8cd27c45278bbb1abaa318154b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="calc函数"><a href="#calc函数" class="headerlink" title="calc函数"></a>calc函数</h2><ul><li><p><code>calc()</code> 此CSS函数让你在声明CSS属性值时执行一些计算（计算盒子宽度 width: calc 函数）</p></li><li></li><li><p>括号里面可以使用 + - * / 来进行计算</p></li></ul><h1 id="transition过渡🔥"><a href="#transition过渡🔥" class="headerlink" title="transition过渡🔥"></a>transition过渡🔥</h1><ul><li><code>过渡（transition)</code> 是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果</li><li>过渡动画：是从一个状态渐渐的过渡到另外一个状态</li><li><strong>过渡经常和：hover一起搭配使用</strong></li></ul><ol><li><strong>要过渡的属性</strong>：想要变化的 CSS 属性，宽度高度，背景颜色，内外边距都可以，如果想要所有的属性都变化过渡，写一个all就可以。</li><li><strong>花费时间</strong>：单位是秒(必须写单位) 比如0.5s</li><li><strong>运动曲线</strong>：默认是ease(可以省略)</li><li><strong>何时开始</strong>：单位是秒(必须写单位)，可以设置延迟触发事件，默认是0s(可以省略)</li></ol><p><img src="https://img-blog.csdnimg.cn/d43d923b09644f668bbedad8b05c10b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>过渡的口诀：谁做过渡给谁加</p><p><img src="https://img-blog.csdnimg.cn/39577c89a4ed4f03968fe0927142901d.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="2D转换🔥"><a href="#2D转换🔥" class="headerlink" title="2D转换🔥"></a>2D转换🔥</h2><p><code>转换(transform)</code>是CSS3中具有颠覆性的特征之一，可以实现元素的位移，旋转，缩放等效果</p><ul><li>移动：translate</li><li>旋转：rotate</li><li>缩放：scale</li></ul><p>二维坐标系：</p><p>2D转换是改变标签在二维平面上的位置和形状的一种技术，先来学习二维坐标系</p><p><img src="https://img-blog.csdnimg.cn/b00b7fe0cb594342ad86ea06bf2b0123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="①移动translate🔥"><a href="#①移动translate🔥" class="headerlink" title="①移动translate🔥"></a>①移动translate🔥</h3><p>2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，<strong>类似</strong>定位。</p><p>语法：</p><ol><li><p>定义2D转换中的移动，沿着X和Y轴移动元素</p></li><li><p>translate 最大的优点：<strong>不会影响到其他元素的位置</strong></p></li><li><p>translate</p><p> 中的百分比单位是</p><p>相对于自身元素</p><p>的   </p><ul><li><code>translate:(50%,50%);</code></li></ul></li><li><p>对行内标签没有效果</p></li></ol><h3 id="②旋转rotate🔥"><a href="#②旋转rotate🔥" class="headerlink" title="②旋转rotate🔥"></a>②旋转rotate🔥</h3><p>2D旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转。</p><ol><li>rotate 里面跟度数，单位是 deg 比如 rotate(45deg)</li><li><strong>角度为正时，顺时针，负时，为逆时针</strong></li><li>默认旋转的中心点是元素的中心点</li></ol><h3 id="③旋转中心点transform-origin🔥"><a href="#③旋转中心点transform-origin🔥" class="headerlink" title="③旋转中心点transform-origin🔥"></a>③旋转中心点transform-origin🔥</h3><p>2D转换中心点：我们可以设置元素转换的中心点 transform-origin</p><ol><li>注意后面的参数x 和 y 用空格隔开</li><li>x y <strong>默认</strong>转换的中心点是元素的中心点(50% 50%)</li><li>还可以给x y 设置 像素或者方位名词(top bottom left right center)</li></ol><p><img src="https://img-blog.csdnimg.cn/878efeeac08f4722b5d0e99abffe72b1.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="缩放scale🔥"><a href="#缩放scale🔥" class="headerlink" title="缩放scale🔥"></a>缩放scale🔥</h2><p>缩放：<code>scale</code>,只要给元素添加上了这个属性就能控制它放大还是缩小</p><ol><li>注意其中的x和y用逗号分割</li><li><code>transform:scale(1,1)</code>: 宽和高都放大一倍，相当于没有放大</li><li><code>transform:scale(2,2)</code>：宽和高都放大了2倍</li><li><code>transform:scale(2)</code>：只写一个参数，第二个参数则和第一个参数一样，相当于 <code>scale(2,2)</code></li><li><code>transform:scale(0.5,0.5)</code>：缩小</li><li>sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</li></ol><p><img src="https://img-blog.csdnimg.cn/8ed7936823c1439a83c0a4e3eb729e8c.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="2D转换综合写法🔥"><a href="#2D转换综合写法🔥" class="headerlink" title="2D转换综合写法🔥"></a>2D转换综合写法🔥</h2><ol><li>同时使用多个转换，其格式为: transform:translate() rotate() scale() 移动-旋转-缩放</li><li>其顺序会影响转换的效果(先旋转会改变坐标轴方向)</li><li><strong>当我们同时有位移和其他属性时候，记得要将位移放到最前面</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/852dd70d190649ac99b84d307c5fdec0.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="2D转换总结🔥"><a href="#2D转换总结🔥" class="headerlink" title="2D转换总结🔥"></a>2D转换总结🔥</h2><ul><li>转换transform 我们简单理解就是变形 有2D 和 3D 之分</li><li>我们暂且学了三个 分别是 位移 旋转 和 缩放</li><li>2D 移动 translate(x, y) 最大的优势是不影响其他盒子， 里面参数用%，是相对于自身宽度和高度来计算的</li><li>可以分开写比如 translateX(x) 和 translateY(y)</li><li>2D 旋转 rotate(度数) 可以实现旋转元素 度数的单位是deg</li><li>2D 缩放 sacle(x,y) 里面参数是数字 不跟单位 可以是小数 最大的优势 不影响其他盒子</li><li>设置转换中心点 transform-origin : x y; 参数可以百分比、像素或者是方位名词</li><li>l<strong>当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前</strong></li></ul><h1 id="C3动画🔥"><a href="#C3动画🔥" class="headerlink" title="C3动画🔥"></a>C3动画🔥</h1><p>动画 animation是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p><p>相比较过渡，动画可以实现更多变化，更多控制，连续自动播放等效果。</p><p>制作动画分为两步：</p><ul><li>先定义动画</li><li>再使用（调用）动画</li></ul><h2 id="用keyframs定义动画🔥"><a href="#用keyframs定义动画🔥" class="headerlink" title="用keyframs定义动画🔥"></a>用keyframs定义动画🔥</h2><p>用 keyframes 定义动画（类似定义类选择器）</p><ul><li><p>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</p></li><li><p>在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果</p></li><li><p>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</p></li><li><p>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</p></li><li><p>@keyframes mymove    {   </p><p> from {background-color:red;}   </p><p> to {background-color:blue;} </p><p>}</p></li></ul><h2 id="使用动画🔥"><a href="#使用动画🔥" class="headerlink" title="使用动画🔥"></a>使用动画🔥</h2><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>需求：我们想页面一打开，一个盒子就从左边走到右边</p><blockquote><p>from to 语法</p></blockquote><h2 id="动画常用属性🔥"><a href="#动画常用属性🔥" class="headerlink" title="动画常用属性🔥"></a>动画常用属性🔥</h2><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了animation-play-state属性。</td></tr><tr><td>animation-name</td><td>规定@keyframes动画的名称。（<strong>必须的</strong>）</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒，默认是0。（<strong>必须的</strong>）</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线，默认是“ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始，默认是0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数，默认是1，还有infinite</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是”running”,还有”paused”。</td></tr><tr><td>animation-fill-mode</td><td>规定动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table><p>动画的简写属性</p><h2 id="动画简写属性🔥"><a href="#动画简写属性🔥" class="headerlink" title="动画简写属性🔥"></a>动画简写属性🔥</h2><p>animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态;</p><ul><li>简写属性里面不包含 animation-play-state</li><li>暂停动画：animation-play-state: puased; 经常和鼠标经过等其他配合使用</li><li>想要动画走回来 ，而不是直接跳回来：animation-direction: alternate</li><li>盒子动画结束后，停在结束位置： animation-fill-mode : forwards</li></ul><h2 id="速度曲线细节"><a href="#速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h2><ul><li><code>animation-timing-function</code>：规定动画的速度曲线，默认是“ease”</li></ul><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。匀速</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h1 id="3D转换🔥"><a href="#3D转换🔥" class="headerlink" title="3D转换🔥"></a>3D转换🔥</h1><p>我们生活的环境是3D的，照片就是3D物体在2D平面呈现的例子.</p><p>3D转换的特点：</p><ul><li>近大远小。</li><li>物体后面遮挡不可见</li></ul><p>当我们在网页上构建3D效果的时候参考这些特点就能产出3D效果。</p><h2 id="三维坐标系🔥"><a href="#三维坐标系🔥" class="headerlink" title="三维坐标系🔥"></a>三维坐标系🔥</h2><p>三维坐标系其实就是指立体空间，立体空间是由3个轴共同组成的。</p><p><img src="https://img-blog.csdnimg.cn/8b3f76c171604b64975e75c1e3d7367b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>x轴：水平向右 <strong>注意： x 右边是正值，左边是负值</strong></li><li>y轴：垂直向下 <strong>注意： y 下面是正值，上面是负值</strong></li><li>z轴：垂直屏幕 <strong>注意： 往外面是正值，往里面是负值</strong></li></ul><p>3D 转换我们主要学习工作中最常用的 3D 位移 和 3D 旋转</p><h2 id="3D位移translate3d🔥"><a href="#3D位移translate3d🔥" class="headerlink" title="3D位移translate3d🔥"></a>3D位移translate3d🔥</h2><p>3D移动在2D移动的基础上多加了一个可以移动的方向，就是z轴方向</p><ul><li><code>translform:translateX(100px)</code>：仅仅是在x轴上移动</li><li><code>translform:translateY(100px)</code>：仅仅是在Y轴上移动</li><li><code>translform:translateZ(100px)</code>：仅仅是在Z轴上移动（注意：translateZ一般用px单位）</li><li><code>transform:translate3d(x,y,z)</code>：其中 x、y、z 分别指要移动的轴的方向的距离</li></ul><p>因为z轴是垂直屏幕，由里指向外面，所以默认是看不到元素在z轴的方向上移动</p><h2 id="透视perspective🔥"><a href="#透视perspective🔥" class="headerlink" title="透视perspective🔥"></a>透视perspective🔥</h2><p><strong>透视</strong>：在2D平面产生近大远小视觉立体，但是只是效果二维的</p><ul><li>如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）</li><li>模拟人类的视觉位置，可认为安排一只眼睛去看</li><li>透视我们也称为视距：视距就是人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li><li>透视的单位是像素</li></ul><p><strong>透视写在被观察元素的父盒子上面的</strong></p><p><img src="https://img-blog.csdnimg.cn/07b834ed67b14d038613fdb993b161e3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>d：就是视距，视距就是一个距离人的眼睛到屏幕的距离。</p><p>z：就是 z轴，物体距离屏幕的距离，z轴越大（正值） 我们看到的物体就越大</p><h3 id="①translateZ🔥"><a href="#①translateZ🔥" class="headerlink" title="①translateZ🔥"></a>①translateZ🔥</h3><ul><li>translform:translateZ(100px)：仅仅是在Z轴上移动。</li><li>有了透视，就能看到translateZ 引起的变化了   <ul><li>translateZ：近大远小</li><li>translateZ：往外是正值</li><li>translateZ：往里是负值</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/fc804561fd5d4f6f892404c3df05dde6.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="5-4、D旋转rotate3d🔥"><a href="#5-4、D旋转rotate3d🔥" class="headerlink" title="5.4、D旋转rotate3d🔥"></a>5.4、D旋转rotate3d🔥</h2><p>3D旋转：3D旋转指可以让元素在三维平面内沿着 x轴，y轴，z轴或者自定义轴进行旋转。</p><ul><li>transform: rotateX(45deg) ：沿着X轴正方向旋转45度</li><li>transform: rotateY(45deg) ：沿着Y轴正方向旋转45度</li><li>transform: rotateZ(45deg) ：沿着Z轴正方向旋转45度</li><li>transform: rotate3d(x,y,z,deg) ：沿着自定义轴旋转 deg为角度(了解即可)</li></ul><p>xyz是表示旋转轴的矢量，是标示你是否希望沿着该轴旋转，最后一个标示旋转的角度。</p><h3 id="👉左手准则①"><a href="#👉左手准则①" class="headerlink" title="👉左手准则①"></a>👉左手准则①</h3><ul><li>左手的手拇指指向 x轴的正方向</li><li>其余手指的弯曲方向就是该元素沿着x轴旋转的方向</li></ul><p><img src="https://img-blog.csdnimg.cn/6eccd83b5b2e48adbeadb673c96ed0fc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="👉左手准则②"><a href="#👉左手准则②" class="headerlink" title="👉左手准则②"></a>👉左手准则②</h3><ul><li>左手的手拇指指向 y轴的正方向</li><li>其余手指的弯曲方向就是该元素沿着y轴旋转的方向（正值）<br> <img src="https://img-blog.csdnimg.cn/70b7feb515b24793a832060719ed33d6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul><h2 id="3D呈现transform-style🔥"><a href="#3D呈现transform-style🔥" class="headerlink" title="3D呈现transform-style🔥"></a>3D呈现transform-style🔥</h2><p>3D呈现：transform-style</p><ol><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat</code> 子元素不开启3d立体空间 默认的</li><li><code>transform-style: preserve-3d</code> 子元素开启立体空间</li><li><strong>代码写给父级</strong>，但是影响的是子盒子</li><li>这个属性很重要</li></ol><p><img src="https://img-blog.csdnimg.cn/8d5527a9b56c430e924853c5669c4d2c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础班笔记(二)</title>
      <link href="/myblog.github.io/2022/04/24/CSS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
      <url>/myblog.github.io/2022/04/24/CSS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><p><img src="https://img-blog.csdnimg.cn/ace015a27ede4129a4368ae9fa5d17a9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="CSS三大特性🔥"><a href="#CSS三大特性🔥" class="headerlink" title="CSS三大特性🔥"></a>CSS三大特性🔥</h1><h2 id="层叠性🔥"><a href="#层叠性🔥" class="headerlink" title="层叠性🔥"></a>层叠性🔥</h2><ul><li>相同选择器设置相同的样式，此时一个样式就会<strong>覆盖</strong>另一个冲突的样式。</li><li>层叠性主要解决样式冲突的问题</li><li>层叠性原则：   <ul><li>样式冲突，遵循的原则是<strong>就近原则</strong></li></ul></li></ul><h2 id="继承性🔥"><a href="#继承性🔥" class="headerlink" title="继承性🔥"></a>继承性🔥</h2><ul><li>CSS中的继承：子标签会继承父标签里面的某些样式</li><li>如<strong>文本颜色和字号</strong>等</li></ul><blockquote><p>特殊： 行高的继承</p></blockquote><ul><li>1.5的意思：让里面所有的子元素的行高是当前文字大小的1.5倍</li></ul><h2 id="优先级🔥"><a href="#优先级🔥" class="headerlink" title="优先级🔥"></a>优先级🔥</h2><p>– 当同一个元素指定多个选择器，就会有优先级的产生</p><ul><li>选择器相同，则执行<strong>层叠性</strong></li><li>选择器不同，则按<strong>权重</strong></li></ul><table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0，0，0，0</td></tr><tr><td>元素选择器（标签选择器）</td><td>0，0，0，1</td></tr><tr><td>类选择器，伪类选择器</td><td>0，0，1，0</td></tr><tr><td>ID选择器</td><td>0，1，0，0</td></tr><tr><td>行内样式style=””</td><td>1，0，0，0</td></tr><tr><td>！important重要的</td><td>无穷大</td></tr></tbody></table><ul><li>类选择器权重为10</li><li>伪类选择器权重为10</li><li>ID选择器权重为100</li></ul><h2 id="优先级注意点🔥"><a href="#优先级注意点🔥" class="headerlink" title="优先级注意点🔥"></a>优先级注意点🔥</h2><ul><li>等级判断是从左到右，如果某一位数值相同，则判断下一位数值</li><li><strong>继承的权重是0</strong></li><li>权重可以叠加，<strong>但是永远不会有进位</strong></li></ul><h2 id="权重的叠加🔥"><a href="#权重的叠加🔥" class="headerlink" title="权重的叠加🔥"></a>权重的叠加🔥</h2><ul><li>权重叠加：如果是复合选择器，则会有权重的叠加，需要计算权重</li></ul><ol><li><code>div ul li</code>———-&gt; 0,0,0,3</li><li><code>.nav ul li</code> ————–&gt;0,0,1,2</li><li><code>a:hover</code> —————-&gt;0,0,1,1 /* 伪类选择器*/</li><li><code>.nav a</code>——————–&gt;0,0,1,1</li></ol><h1 id="盒子模型🔥"><a href="#盒子模型🔥" class="headerlink" title="盒子模型🔥"></a>盒子模型🔥</h1><p>页面布局要学习三大核心</p><ul><li><strong>盒子模型</strong></li><li><strong>浮动</strong></li><li><strong>定位</strong></li></ul><p>盒子模型的组成：</p><ul><li><code>border(边框)</code></li><li><code>content(内容)</code></li><li><code>padding(内边距)</code></li><li><code>margin(外边距)</code></li></ul><p><img src="https://img-blog.csdnimg.cn/4d812f91aa1b4c639298a6460357b775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="边框border🔥"><a href="#边框border🔥" class="headerlink" title="边框border🔥"></a>边框border🔥</h2><ul><li>CSS 边框属性允许你指定一个元素边框的样式和颜色</li><li>边框由三部分组成：<strong>边框宽度（粗细） 边框样式 边框颜色</strong></li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><h3 id="border-style🔥"><a href="#border-style🔥" class="headerlink" title="border-style🔥"></a>border-style🔥</h3><p>边框样式 border-style可以设置如下值：</p><ol><li><code>none</code>:没有边框即忽略所有边框的宽度（默认值）</li><li><code>solid</code> :边框为单实线（最为常用的）</li><li><code>dashed</code>: 边框为虚线</li><li><code>dotted</code>: 边框为点线</li></ol><p>边框简写：没有顺序</p><p>边框分开写法：</p><h3 id="border-collapse"><a href="#border-collapse" class="headerlink" title="border-collapse"></a>border-collapse</h3><ul><li><p>border-collapse 属性控制浏览器绘制表格边框的方式，它控制相邻单元格的边框</p></li><li><p><code>border-coppapse</code> 表格的细线边框</p></li><li><p>表示相邻边框合并在一起</p></li><li><p>collapse 单词是合并的意思</p></li></ul><h3 id="边框会影响盒子实际大小🔥"><a href="#边框会影响盒子实际大小🔥" class="headerlink" title="边框会影响盒子实际大小🔥"></a>边框会影响盒子实际大小🔥</h3><p>边框会额外增加盒子的实际大小，因此我们有两种方案解决：</p><ol><li>测量盒子大小的时候，不量边框</li><li>如果测量的时候包含了边框，则需要 width/height 减去边框宽度</li></ol><h2 id="内边距padding🔥"><a href="#内边距padding🔥" class="headerlink" title="内边距padding🔥"></a>内边距padding🔥</h2><p>padding 属性用于设置<strong>内边距</strong>,<strong>即盒子边框与内容之间的距离</strong></p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding -top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><ul><li>padding属性(简写属性)可以有一到四个值</li></ul><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>padding : 5px;</td><td>1个值，代表<strong>上下左右</strong>都有5像素内边距</td></tr><tr><td>padding :5px 10px;</td><td>2个值，代表上下内边距是5像素，左右内边距是10像素</td></tr><tr><td>padding: 5px 10px 20px;</td><td>3个值，代表上内边距5像素，左右内边距10像素，下内边距20像素</td></tr><tr><td>padding :5px 10px 20px 30px</td><td>4个值，上是5像素，右是10像素，下20像素，左是30像素，顺时针</td></tr></tbody></table><p>以上四种情况，我们实际开发都会遇到。</p><h3 id="影响盒子大小🔥"><a href="#影响盒子大小🔥" class="headerlink" title="影响盒子大小🔥"></a>影响盒子大小🔥</h3><blockquote><p>padding会影响盒子大小的情况</p></blockquote><p>当我们给盒子指定 padding 值之后，发生了2件事情：</p><ol><li>内容和边框有了距离，添加了内边距</li><li>padding影响了盒子实际大小   <ul><li><strong>也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子</strong></li></ul></li></ol><p>解决方案：</p><p>如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可</p><hr><p>但是，有时候 padding 影响盒子是有好处的，比如我们要做导航：</p><p><img src="https://img-blog.csdnimg.cn/abd79f7b40c8482a8140fd74b7149040.png#pic_center" alt="在这里插入图片描述"></p><p>因为每个导航栏里面的字数不一样多,我们可以不用给每个盒子宽度了,直接给 padding 最合适.</p><h3 id="不影响盒子大小🔥"><a href="#不影响盒子大小🔥" class="headerlink" title="不影响盒子大小🔥"></a>不影响盒子大小🔥</h3><blockquote><p>padding不会影响盒子大小的情况</p></blockquote><ul><li><strong>如果盒子本身没有指定width/height属性，则此时padding不会撑开盒子大小</strong></li></ul><h2 id="外边距margin🔥"><a href="#外边距margin🔥" class="headerlink" title="外边距margin🔥"></a>外边距margin🔥</h2><ul><li><code>margin</code>（外边距）属性用于设置外边距，即控制<strong>盒子和盒子</strong>之间的距离</li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p>margin 简写方式代表的意义跟 padding 完全一致</p><h3 id="外边距典型应用🔥"><a href="#外边距典型应用🔥" class="headerlink" title="外边距典型应用🔥"></a>外边距典型应用🔥</h3><p>外边距可以让<strong>块级盒子水平居中</strong>，但是必须满足两个条件</p><ol><li>盒子必须制定了宽度(width)</li><li>盒子<strong>左右的外边距</strong>都设置为 auto</li></ol><p>左右的外边距都设置为 auto 有三种写法：</p><p><strong>注意</strong>：</p><p>以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align: center 即可。</p><h3 id="外边距合并🔥"><a href="#外边距合并🔥" class="headerlink" title="外边距合并🔥"></a>外边距合并🔥</h3><p>使用 margin 定义块级元素的垂直外边距时，可能会出现外边距的合并。</p><p>主要有两种情况：</p><ol><li>相邻块元素垂直外边距的合并</li><li>嵌套块元素垂直外边距的塌陷</li></ol><h4 id="①相邻块元素垂直外边距的合并🔥"><a href="#①相邻块元素垂直外边距的合并🔥" class="headerlink" title="①相邻块元素垂直外边距的合并🔥"></a>①相邻块元素垂直外边距的合并🔥</h4><p>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。<strong>取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</strong></p><p><img src="https://img-blog.csdnimg.cn/7718ee0385bf4536b331b7e551b8449b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>解决方案：</p><p><strong>尽量只给一个盒子添加 margin 值</strong></p><h4 id="②嵌套块元素垂直外边距的塌陷🔥"><a href="#②嵌套块元素垂直外边距的塌陷🔥" class="headerlink" title="②嵌套块元素垂直外边距的塌陷🔥"></a>②嵌套块元素垂直外边距的塌陷🔥</h4><p>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</p><p><img src="https://img-blog.csdnimg.cn/0bc4b88590cd435bb8376893c2fe542e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>解决方案：</p><ol><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加 overflow: hidden</li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有塌陷问题。后面会进行总结。</p><h3 id="③清除内外边距🔥"><a href="#③清除内外边距🔥" class="headerlink" title="③清除内外边距🔥"></a>③清除内外边距🔥</h3><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p><p>注意：</p><p><strong>行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</strong></p><h1 id="👉PS基本操作🔥"><a href="#👉PS基本操作🔥" class="headerlink" title="👉PS基本操作🔥"></a>👉PS基本操作🔥</h1><p>因为网页美工大部分效果图都是利用 PS（Photoshop）来做的，所以以后我们大部分切图工作都是在 PS 里面完成。</p><ul><li>文件➡打开 ：可以打开我们要测量的图片</li><li>Ctrl+R：可以打开标尺，或者 视图➡标尺</li><li>右击标尺，把里面的单位改为像素</li><li>==Ctrl+ 加号(+)==可以放大视图， ==Ctrl+ 减号(-)==可以缩小视图</li><li>按住空格键，鼠标可以变成小手，拖动 PS 视图</li><li>用选区拖动 可以测量大小</li><li>Ctrl+ D 可以取消选区，或者在旁边空白处点击一下也可以取消选区</li></ul><p><img src="https://img-blog.csdnimg.cn/7aa448f6360d45c2bc5ecfb643333be2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="👉新知识点🔥"><a href="#👉新知识点🔥" class="headerlink" title="👉新知识点🔥"></a>👉新知识点🔥</h2><p>去掉 li 前面的小圆点</p><h2 id="👉PS切图"><a href="#👉PS切图" class="headerlink" title="👉PS切图"></a>👉PS切图</h2><p>PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。</p><h3 id="👉图层切图"><a href="#👉图层切图" class="headerlink" title="👉图层切图"></a>👉图层切图</h3><p>最简单的切图方式：右击图层 ➡导出 PNG 切片。</p><h3 id="👉切片切图"><a href="#👉切片切图" class="headerlink" title="👉切片切图"></a>👉切片切图</h3><ol><li>利用切片选中图片</li></ol><ul><li>利用切片工具手动划出</li></ul><ol><li>导出选中的图片</li></ol><ul><li>文件菜单➡存储为 web 设备所用的格式➡选择我们要的图片格式➡存储</li></ul><h3 id="👉PS插件切图🔥"><a href="#👉PS插件切图🔥" class="headerlink" title="👉PS插件切图🔥"></a>👉PS插件切图🔥</h3><p>Cutterman 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 “导出 web 所用格式” 以及使用切片工具进行挨个切图的繁琐流程。</p><p>官网：<a href="http://www.cutterman.cn/zh/cutterman">Cutterman官网</a></p><p>注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本</p><h1 id="圆角边框🔥"><a href="#圆角边框🔥" class="headerlink" title="圆角边框🔥"></a>圆角边框🔥</h1><ul><li><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p></li><li><p>border-radius 属性用于设置元素的外边框圆角。</p></li><li><p><code>radius</code>半径（圆的半径） 原理:(椭）圆与边框的交集形成圆角效果</p></li></ul><ol><li>参数值可以是<strong>数值</strong>或<strong>百分比</strong>的形式</li><li>如果是<strong>正方形</strong>，想要设置为一个圆，把数值修改为<strong>高度或者宽度的一半</strong>即可，或者直接写为<strong>50%</strong></li><li>如果是一个矩形，设置为<strong>高度</strong>的一半就可以</li><li>该属性是一个简写属性，可以跟四个值，分别代表<strong>左上角，右上角，右下角，左下角</strong></li></ol><h1 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h1><p>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。</p><p>语法</p><p>box-shadow: <em>h-shadow  v-shadow  blur spread  color</em> inset;</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离。</td></tr><tr><td>spread</td><td>可选，阴影的尺寸。</td></tr><tr><td>color</td><td>可选，阴影的颜色。</td></tr><tr><td>inset</td><td>可选，将外部阴影（outset）改为内部阴影</td></tr></tbody></table><ul><li>模糊距离：影子的虚实</li><li>阴影尺寸：影子的大小</li><li>box-shadow: 10px 10px 5px #888888;</li></ul><p><strong>注意：</strong></p><ol><li>默认的是外阴影（outset），但是不可以在后面写这个单词，否则导致阴影无效</li><li><strong>盒子阴影不占用空间，不会影响其他盒子排列</strong></li></ol><h2 id="👉开发中阴影常用🔥"><a href="#👉开发中阴影常用🔥" class="headerlink" title="👉开发中阴影常用🔥"></a>👉开发中阴影常用🔥</h2><p>原先盒子没有影子，当我们鼠标经过盒子就添加阴影效果</p><h2 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h2><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>color</td><td>可选，阴影的颜色。</td></tr></tbody></table><h1 id="传统网页布局的三种方式🔥"><a href="#传统网页布局的三种方式🔥" class="headerlink" title="传统网页布局的三种方式🔥"></a>传统网页布局的三种方式🔥</h1><p>网页布局的本质➡用 CSS 来摆放盒子。 把盒子摆放到相应位置</p><p>CSS 提供了三种传统布局方式：</p><ul><li>普通流（标准流）</li><li>浮动</li><li>定位</li></ul><h2 id="标准流🔥"><a href="#标准流🔥" class="headerlink" title="标准流🔥"></a>标准流🔥</h2><p>所谓 的标准流，就是标签按照规定好默认方式排列</p><ol><li><p>块级元素会独占一行，从上向下顺序排列。</p><p>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</p></li><li><p>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。<br> 常用元素：span、a、i、em 等</p></li></ol><p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基</p><p>本的布局方式。</p><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局</p><p>自然就完成了。</p><p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面</p><p>移动端学习新的布局方式） 。</p><h2 id="浮动🔥"><a href="#浮动🔥" class="headerlink" title="浮动🔥"></a>浮动🔥</h2><ol><li>提问：如何让多个块级盒子(div)水平排列成一行？</li></ol><p><img src="https://img-blog.csdnimg.cn/c50e979c23494017880f042cba73b776.png#pic_center" alt="在这里插入图片描述"></p><p>比较难，虽然转换为行内块元素可以实现一行显示，但是他们之间会有大的空白缝隙，很难控制。</p><ol><li>提问：如何实现两个盒子的左右对齐？</li></ol><p><img src="https://img-blog.csdnimg.cn/c6c08da2c7684a629aca15f1d993a609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用</p><p>浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p><h3 id="浮动的典型应用🔥"><a href="#浮动的典型应用🔥" class="headerlink" title="浮动的典型应用🔥"></a>浮动的典型应用🔥</h3><ul><li>浮动最典型的应用：<strong>可以让多个块级元素一行内排列显示。</strong></li><li>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。</strong></li></ul><blockquote><p>什么是浮动？</p></blockquote><ul><li><code>float</code>属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘</li></ul><p>语法：</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><ul><li>网页布局的第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong></li><li>网页布局第二准则：<strong>先设置盒子大小，之后设置盒子的位置。</strong></li></ul><h3 id="浮动的特性🔥"><a href="#浮动的特性🔥" class="headerlink" title="浮动的特性🔥"></a>浮动的特性🔥</h3><p>设置了浮动（float）的元素的最重要的特性：</p><ol><li>脱标：浮动元素会脱离标准流</li></ol><ul><li>浮动的盒子<strong>不再保留原先的位置</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/c6416c483c96451092a80ada9785b347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>如果多个盒子都设置了浮动，则它们会按照属性值<strong>一行内显示并且顶端对齐排列</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/8dd268845ede45a8bdedb52bf8bb0914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>浮动的元素是相互贴靠在一起的（<strong>不会有缝隙</strong>），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li></ul><ol><li><strong>浮动元素会具有行内块元素特性</strong></li></ol><p>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后都具有<strong>行内块元素</strong>相似的特性。</p><ul><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>如果行内元素有了浮动，则不需要转换块级\行内块元素就可以直接给高度和宽度</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li></ul><h3 id="浮动元素经常和标准流父级搭配使用🔥"><a href="#浮动元素经常和标准流父级搭配使用🔥" class="headerlink" title="浮动元素经常和标准流父级搭配使用🔥"></a>浮动元素经常和标准流父级搭配使用🔥</h3><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p><p><strong>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</strong></p><p><img src="https://img-blog.csdnimg.cn/1eb22d8b2c8543d19d0078f8acc2575a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="浮动的注意点🔥"><a href="#浮动的注意点🔥" class="headerlink" title="浮动的注意点🔥"></a>浮动的注意点🔥</h3><ul><li>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</li><li>一个元素浮动了，理论上其余兄弟元素也要浮动   <ul><li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动</li></ul></li><li>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</li></ul><h3 id="清除浮动🔥"><a href="#清除浮动🔥" class="headerlink" title="清除浮动🔥"></a>清除浮动🔥</h3><p>我们前面浮动元素有一个标准流的父元素, 他们有一个共同的特点,</p><p>都是有高度的.但是, 所有的父盒子都必须有高度吗?</p><p>理想中的状态, 让子盒子撑开父亲. 有多少孩子,我父盒子就有多高.</p><p>但是不给父盒子高度会有问题吗?..…</p><blockquote><p>为什么要清除浮动</p></blockquote><ul><li>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。</li></ul><p><img src="https://img-blog.csdnimg.cn/7ae44f5681f549a99c1b7d1f45e5205b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li><li>理想中的状态，让子盒子撑开父亲，有多少孩子，我父盒子就有多高</li></ul><h3 id="清除浮动的本质🔥"><a href="#清除浮动的本质🔥" class="headerlink" title="清除浮动的本质🔥"></a>清除浮动的本质🔥</h3><ul><li>清除浮动的本质是<strong>清除浮动元素造成的影响</strong></li><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了。</li></ul><p>语法：</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素(清除左侧浮动的影响)</td></tr><tr><td>right</td><td>不允许右侧有浮动元素(清除右侧浮动的影响)</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><ul><li>我们实际工作中，几乎只用<code>clear:both</code></li><li>清除浮动的策略是：<strong>闭合浮动</strong></li><li>只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。</li></ul><h3 id="清除浮动的方法🔥"><a href="#清除浮动的方法🔥" class="headerlink" title="清除浮动的方法🔥"></a>清除浮动的方法🔥</h3><ol><li><strong>额外标签法</strong>也称为隔墙法，是W3C推荐的做法</li><li>父级添加 overflow 属性</li><li>父级添加 after 伪元素</li><li>父级添加双伪元素</li></ol><h4 id="①额外标签法"><a href="#①额外标签法" class="headerlink" title="①额外标签法"></a>①额外标签法</h4><ul><li><p>额外标签法会在浮动元素末尾添加一个空的标签,例如：</p></li><li><p>例如<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>，或者其他标签（如<code>&lt;/br&gt;</code>等）</p></li><li><p>注意：<strong>要求这个新的空标签必须是块级元素</strong></p></li><li><p>优点：通俗易懂，书写方便</p></li><li><p>缺点：添加许多无意义的标签，结构化较差</p><p>实际工作可能会遇到,但是不常用</p></li></ul><h4 id="②overflow"><a href="#②overflow" class="headerlink" title="②overflow"></a>②overflow</h4><ul><li>可以给父级添加<code>overflow</code>属性，将其属性值设置为<code>hidden</code>,<code>auto</code>或<code>scroll</code></li><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li></ul><h4 id="③after伪元素法🔥"><a href="#③after伪元素法🔥" class="headerlink" title="③after伪元素法🔥"></a>③after伪元素法🔥</h4><p>:after 方式是额外标签法的升级版。也是给父元素添加</p><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：需要照顾低版本浏览器</li><li>代表网站：百度、淘宝、网易等</li></ul><h4 id="④双伪元素🔥"><a href="#④双伪元素🔥" class="headerlink" title="④双伪元素🔥"></a>④双伪元素🔥</h4><ul><li><p>也是给父元素添加</p></li><li><p>优点：代码更简洁</p></li><li><p>缺点：需要照顾低版本浏览器</p></li><li><p>代表网站：小米、腾讯等</p></li></ul><h3 id="浮动总结🔥"><a href="#浮动总结🔥" class="headerlink" title="浮动总结🔥"></a>浮动总结🔥</h3><blockquote><p>为什么需要清除浮动？</p></blockquote><p>①：父级没高度</p><p>②：子盒子浮动了</p><p>③：影响下面布局了，我们就应该清除浮动了。</p><table><thead><tr><th>清除浮动方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法(隔墙法)</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差</td></tr><tr><td>父级overflow:hidden;</td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级after伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after，兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after，兼容性问题</td></tr></tbody></table><h2 id="定位🔥"><a href="#定位🔥" class="headerlink" title="定位🔥"></a>定位🔥</h2><p>提问：以下情况使用标准流或者浮动能实现吗？</p><ol><li>某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子。</li><li>当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</li></ol><p>以上效果，标准流或浮动都无法快速实现，此时需要定位来实现</p><ul><li>浮动可以让多个块级盒子一行没有缝隙的排列显示，经常用于横向排列盒子</li><li>定位则是可以让盒子自由的在某个盒子内移动位置或固定屏幕中某个位置，并且可以压住其他盒子</li><li>定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子</li></ul><h3 id="定位的组成🔥"><a href="#定位的组成🔥" class="headerlink" title="定位的组成🔥"></a>定位的组成🔥</h3><p>定位 = 定位模式 +边偏移</p><ul><li><strong>定位模式用于指定一个元素在文档中的定位方式</strong></li><li><strong>边偏移则决定了该元素的最终位置</strong></li></ul><blockquote><p>定位模式</p></blockquote><ul><li>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个</li></ul><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><blockquote><p>边偏移</p></blockquote><p>边偏移就是定位的盒子移动到最终位置。</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top: 80px</td><td>顶端偏移量，定义元素相对于其父元素的<strong>上边线的距离</strong></td></tr><tr><td>bottom</td><td>bottom: 80px</td><td>底部偏移量，定义元素相对于其父元素的<strong>下边线的距离</strong></td></tr><tr><td>right</td><td>right: 80px</td><td>右侧偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr><tr><td>left</td><td>left: 80px</td><td>左侧偏移量，定义元素相对于其父元素<strong>左边线的距离</strong></td></tr></tbody></table><h3 id="静态定位static-了解"><a href="#静态定位static-了解" class="headerlink" title="静态定位static(了解)"></a>静态定位static(了解)</h3><ul><li>静态定位是元素的<strong>默认定位方式，无定位</strong>的意思</li><li>静态定位按照标准流特性摆放位置，它没有边偏移</li></ul><h3 id="相对定位relative🔥"><a href="#相对定位relative🔥" class="headerlink" title="相对定位relative🔥"></a>相对定位relative🔥</h3><ul><li>相对定位是元素在移动位置的时候，是相对于它<strong>原来的位置</strong>来说的</li><li>特点：<ul><li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）</li><li>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待。（不脱标，继续保留原来位置）</li><li>因此，相对定位并没有脱标，它最典型的应用是给绝对定位当爹的。</li></ul></li></ul><h3 id="绝对定位absolute🔥"><a href="#绝对定位absolute🔥" class="headerlink" title="绝对定位absolute🔥"></a>绝对定位absolute🔥</h3><ul><li>绝对定位是元素在移动位置的时候，是相对于它的祖先元素来说的</li><li>特点：<ul><li>如果没有祖先元素，或者祖先元素没定位，则以浏览器为准进行定位(Document 文档)</li><li>如果祖先元素父级有定位(相对、绝对、固定定位)，则以最近一级的有定位祖先元素为参考点移动位置</li><li>绝对定位不再占用原先的位置（脱标）</li></ul></li></ul><p>所以绝对定位是脱离标准流的</p><h4 id="①绝对定位盒子水平居中🔥"><a href="#①绝对定位盒子水平居中🔥" class="headerlink" title="①绝对定位盒子水平居中🔥"></a>①绝对定位盒子水平居中🔥</h4><ul><li>加了绝对定位的盒子不能通过<code>margin: 0 auto</code>水平居中</li><li>但是可以通过以下计算方法实现水平和垂直居中   <ul><li><code>left:50%</code> ； 让盒子的左侧移动到父级元素的水平中心位置</li><li><code>margin-left: -100px</code>; 让盒子向左移动自身宽度的一半</li></ul></li></ul><h3 id="子绝父相🔥"><a href="#子绝父相🔥" class="headerlink" title="子绝父相🔥"></a>子绝父相🔥</h3><p>意思：<strong>子级使用绝对定位，父级则需要相对定位</strong></p><p>①：子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p><p>②：父盒子需要加定位限制子盒子在父盒子内显示</p><p>③：父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p><p>总结：<strong>因为父级需要占有位置，因此是相对定位，子盒子不要占有位置，则是绝对定位</strong></p><h3 id="固定定位fixed🔥"><a href="#固定定位fixed🔥" class="headerlink" title="固定定位fixed🔥"></a>固定定位fixed🔥</h3><p><strong>固定定位</strong>是元素<strong>固定于浏览器的可视区的位置</strong></p><p>主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变</p><ul><li><p>特点🔥</p><p>：  </p><ul><li>以浏览器的可视窗口为参照点移动元素</li><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li><li>固定定位<strong>不再占有原先的位置</strong>(脱标)</li></ul></li></ul><p>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</p><h4 id="👉固定定位小技巧🔥"><a href="#👉固定定位小技巧🔥" class="headerlink" title="👉固定定位小技巧🔥"></a>👉固定定位小技巧🔥</h4><p>固定定位小技巧： 固定在版心右侧位置</p><p>小算法：</p><ol><li>让固定定位的盒子 left: 50%. 走到浏览器可视区（也可以看做版心） 的一半位置。</li><li>让固定定位的盒子 margin-left: 版心宽度的一半距离。 多走 版心宽度的一半位置</li></ol><p>就可以让固定定位的盒子贴着版心右侧对齐了。</p><h3 id="粘性定位sticky-了解"><a href="#粘性定位sticky-了解" class="headerlink" title="粘性定位sticky(了解)"></a>粘性定位sticky(了解)</h3><p>粘性定位可以被认为是相对定位和固定定位的混合</p><ul><li>特点：<ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性<strong>定位占有原先的位置</strong>（相对定位的特点）</li><li>必须添加top，left，right，bottom其中一个才有效</li></ul></li></ul><p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p><h3 id="定位模式总结🔥"><a href="#定位模式总结🔥" class="headerlink" title="定位模式总结🔥"></a>定位模式总结🔥</h3><table><thead><tr><th>定位模式</th><th>是否脱标</th><th>移动位置</th><th>是否常用</th></tr></thead><tbody><tr><td>static静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative相对定位</strong></td><td><strong>否（占有位置）</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>常用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>常用</strong></td></tr><tr><td><strong>fixed固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>常用</strong></td></tr><tr><td>sticky</td><td>否（占有位置）</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><ul><li>一定要记住相对定位，固定定位，绝对定位的两个大特点：1.是否占有位置（脱标否）2.以谁为基准点移动</li><li>重点学会子绝父相（儿子绝对定位，父亲必须相对定位）</li></ul><h3 id="定位叠放次序z-index🔥"><a href="#定位叠放次序z-index🔥" class="headerlink" title="定位叠放次序z-index🔥"></a>定位叠放次序z-index🔥</h3><ul><li>在使用定位布局时候，可能会出现盒子重叠的情况</li><li>此时，可以用 z-index 来控制盒子的前后次序(z轴)</li></ul><ol><li>数值可以是正整数，负整数或者0，默认是auto，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来居上</li><li>数字后面不能加单位</li><li><strong>只有定位</strong>的盒子才有 z-index 属性</li></ol><h3 id="定位的扩展🔥"><a href="#定位的扩展🔥" class="headerlink" title="定位的扩展🔥"></a>定位的扩展🔥</h3><ol><li>✍绝对定位的盒子居中</li></ol><p>加了绝对定位的盒子不能通过 margin: 0 auto 水平居中，但是可以通过以下计算方法实现水平和垂直居中</p><p>①：left: 50%; 让盒子的左侧移动到父级元素的水平中心位置</p><p>②：margin-left: -100px; 让盒子向左移动自身宽度的一半</p><p>✍定位特殊特性</p><p>绝对定位和固定定位也和浮动类似。</p><p>①：行内元素添加绝对或者固定定位，可以直接设置高度和宽度</p><p>②：块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p><p>✍脱标的盒子不会触发外边距塌陷</p><p>浮动元素、绝对定位(固定定位)元素都不会触发外边距合并的问题。</p><p>✍绝对定位(固定定位)会完全压住盒子</p><p>①：浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p><p>②：但是绝对定位（固定定位） 会压住下面标准流所有的内容。</p><p>③：浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素</p><h2 id="网页布局总结🔥"><a href="#网页布局总结🔥" class="headerlink" title="网页布局总结🔥"></a>网页布局总结🔥</h2><p>通过盒子模型，清楚知道大部分html标签是一个盒子</p><p>通过CSS浮动、定位 可以让每个盒子排列成为网页</p><p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法</p><p>标准流</p><p>可以让盒子上下排列或者左右排列，<strong>垂直的块级盒子显示就用标准流布局。</strong></p><p>浮动</p><p>可以让多个块级元素一行显示或者左右对齐盒子，<strong>多个块级盒子水平显示就用浮动布局。</strong></p><p>定位</p><p>定位最大的特点是有层叠的概念，就<strong>是可以让多个盒子前后叠压来显示。如果元素自由在某个盒子内移动就用定位布局。</strong></p><h1 id="六、元素的隐藏与显示🔥"><a href="#六、元素的隐藏与显示🔥" class="headerlink" title="六、元素的隐藏与显示🔥"></a>六、元素的隐藏与显示🔥</h1><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p><p>本质：<strong>让一个元素在页面中隐藏或者显示出来</strong></p><h2 id="display显示隐藏🔥"><a href="#display显示隐藏🔥" class="headerlink" title="display显示隐藏🔥"></a>display显示隐藏🔥</h2><p><code>display</code>属性用于设置一个元素应如何显示</p><ul><li><strong>display隐藏元素后，不再占有原来的位置</strong></li></ul><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。</p><h2 id="visibility显示隐藏🔥"><a href="#visibility显示隐藏🔥" class="headerlink" title="visibility显示隐藏🔥"></a>visibility显示隐藏🔥</h2><p><code>visibility</code>属性用于指定一个元素应可见还是隐藏</p><ul><li><strong>visibility 隐藏元素后，继续占有原来的位置。</strong></li><li>如果隐藏元素想要原来位置， 就用 <code>visibility：hidden</code></li><li>如果隐藏元素不想要原来位置， 就用 <code>display：none</code> (用处更多 重点）</li></ul><h2 id="overflow溢出显示隐藏🔥"><a href="#overflow溢出显示隐藏🔥" class="headerlink" title="overflow溢出显示隐藏🔥"></a>overflow溢出显示隐藏🔥</h2><p>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td>scroll</td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。<br> 但是如果有定位的盒子， 请慎用 overflow:hidden 因为它会隐藏多余的部分。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS进阶笔记(五)</title>
      <link href="/myblog.github.io/2022/04/24/CSS%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0(%E4%BA%94)/"/>
      <url>/myblog.github.io/2022/04/24/CSS%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="✍、目录总览"><a href="#✍、目录总览" class="headerlink" title="✍、目录总览"></a>✍、目录总览</h1><p><img src="https://img-blog.csdnimg.cn/8e8b3eac2911466bab74be296971a145.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h1 id="移动Web开发"><a href="#移动Web开发" class="headerlink" title="移动Web开发"></a>移动Web开发</h1><h2 id="浏览器现状"><a href="#浏览器现状" class="headerlink" title="浏览器现状"></a>浏览器现状</h2><p><img src="https://img-blog.csdnimg.cn/57eefafc787749a7a510deb973930338.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>国内的 UC 和 QQ，百度等手机浏览器都是根据 Webkit 修改过来的内核，国内尚无自主研发的内核。</li></ul><blockquote><p>总结：兼容移动端主流浏览器，处理 Webkit 内核浏览器即可。</p></blockquote><h2 id="手机屏幕现状"><a href="#手机屏幕现状" class="headerlink" title="手机屏幕现状"></a>手机屏幕现状</h2><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。</li><li>近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。</li><li><strong>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</strong></li></ul><h3 id="视口viewport"><a href="#视口viewport" class="headerlink" title="视口viewport"></a>视口viewport</h3><ul><li>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为<strong>布局视口、视觉视口和理想视口</strong></li><li>我们只需要关注理想视口</li></ul><h3 id="布局视口layout-viewport"><a href="#布局视口layout-viewport" class="headerlink" title="布局视口layout viewport"></a>布局视口layout viewport</h3><ul><li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</li><li>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</li></ul><p><img src="https://img-blog.csdnimg.cn/a6b00357d121434a8915238dc232ea0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="视觉视口-visual-viewport"><a href="#视觉视口-visual-viewport" class="headerlink" title="视觉视口 visual viewport"></a>视觉视口 visual viewport</h3><ul><li>字面意思，它是用户正在看到的网站的区域。<strong>注意：是网站的区域。</strong></li><li>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</li></ul><p><img src="https://img-blog.csdnimg.cn/f12230ebf9d3415fbda4e33a1188554f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="理想视口-ideal-viewport🔥"><a href="#理想视口-ideal-viewport🔥" class="headerlink" title="理想视口 ideal viewport🔥"></a>理想视口 ideal viewport🔥</h3><ul><li>为了使网站在移动端有最理想的浏览和阅读宽度而设定</li><li>理想视口，对设备来讲，是最理想的视口尺寸</li><li>需要手动添写meta视口标签通知浏览器操作</li><li>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽(乔布斯提出的哟)</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>视口就是浏览器显示页面内容的屏幕区域</li><li>视口分为布局视口、视觉视口和理想视口</li><li>我们移动端布局想要的是理想视口就是手机屏幕有多宽，我们的布局视口就有多宽</li><li>想要理想视口，我们需要给我们的移动端页面添加 meta视口标签</li></ul><h3 id="meta视口标签"><a href="#meta视口标签" class="headerlink" title="meta视口标签"></a>meta视口标签</h3><table><thead><tr><th>属性</th><th>解释说明</th></tr></thead><tbody><tr><td>width</td><td>宽度设置的是viewport宽度，可以设置device-width特殊值(宽度是设备宽度)</td></tr><tr><td>initial-scale</td><td>初始缩放比，大于0的数字</td></tr><tr><td>maximum-scale</td><td>最大缩放比，大于0的数字</td></tr><tr><td>minimum-scale</td><td>最小缩放比，大于0的数字</td></tr><tr><td>user-scalable</td><td>用户是否可以缩放，yes或no（1或0）</td></tr></tbody></table><h3 id="标准的viewport设置"><a href="#标准的viewport设置" class="headerlink" title="标准的viewport设置"></a>标准的viewport设置</h3><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><h3 id="物理像素和物理像素比"><a href="#物理像素和物理像素比" class="headerlink" title="物理像素和物理像素比"></a>物理像素和物理像素比</h3><ul><li>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6\7\8 是 750* 1334</li><li>我们开发时候的1px 不是一定等于1个物理像素的</li><li>PC端页面，1个px 等于1个物理像素的，但是移动端就不尽相同</li><li>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</li><li>PC端 和 早前的手机屏幕 / 普通手机屏幕: 1CSS像素 = 1 物理像素的</li></ul><p>Retina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。由于  Retina 的出现，对于一张 50px * 50px 的图片,在手机 Retina  屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊。</p><p><strong>例如：我们需要一个 50*50 像素(css像素)的图片，直接放到我们的手机里面会放大2倍变成 100 * 100，这样就会模糊。</strong></p><p><strong>解决办法：我们直接放一个 100 * 100 图片，然后手动的把这个图片缩小为 50 * 50。这样将图放到手机里面，手机自动放大2倍变成 100 * 100，这样就不会造成图片模糊</strong></p><p>我们准备的图片，比我们实际需要的大小大2倍，这种方式就是二倍图</p><h3 id="背景缩放-background-size"><a href="#背景缩放-background-size" class="headerlink" title="背景缩放 background-size"></a>背景缩放 background-size</h3><p>我们的图片需要进行放大处理，那么我们的背景图片也是需要进行缩放处理。</p><ul><li>单位： 长度|百分比|cover|contain</li><li>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</li><li>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</li></ul><h3 id="多倍图切图cutterman"><a href="#多倍图切图cutterman" class="headerlink" title="多倍图切图cutterman"></a>多倍图切图cutterman</h3><p><img src="https://img-blog.csdnimg.cn/81a160b2e6664fafbe10c0694784a4d2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="移动端开发选择"><a href="#移动端开发选择" class="headerlink" title="移动端开发选择"></a>移动端开发选择</h2><ol><li>单独制作移动端页面(主流)，通常情况下，网址域名前面加 m(mobile) 可以打开移动端。   <ul><li>m.taobao.com</li><li>m.jd.com</li><li>m.suning.com</li><li>通过判断设备，如果是移动设备打开，则跳到移动端页面。</li></ul></li><li>响应式页面兼容移动端(其次)</li></ol><h2 id="移动端浏览器"><a href="#移动端浏览器" class="headerlink" title="移动端浏览器"></a>移动端浏览器</h2><ul><li>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。</li><li>我们可以放心使用 H5 标签和 CSS3 样式。</li><li>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</li></ul><p><img src="https://img-blog.csdnimg.cn/e934a7c1ac8b45f4b48d9bdae62e1a01.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="CSS初始化-normalize-css"><a href="#CSS初始化-normalize-css" class="headerlink" title="CSS初始化 normalize.css"></a>CSS初始化 normalize.css</h2><p>移动端 CSS 初始化推荐使用 normalize.css</p><p>官网地址：<a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><h2 id="CSS3盒子模型-box-sizing"><a href="#CSS3盒子模型-box-sizing" class="headerlink" title="CSS3盒子模型 box-sizing"></a>CSS3盒子模型 box-sizing</h2><ul><li>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding</li><li>CSS3盒子模型： 盒子的宽度 = CSS中设置的宽度width，里面包含了 border 和 padding</li></ul><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><ul><li>移动端可以全部CSS3 盒子模型</li><li>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</li></ul><h1 id="移动端常见布局"><a href="#移动端常见布局" class="headerlink" title="移动端常见布局"></a>移动端常见布局</h1><p><img src="https://img-blog.csdnimg.cn/31944f6dcdbe424b95efb6209f9fc7d0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="流式布局-百分比布局"><a href="#流式布局-百分比布局" class="headerlink" title="流式布局(百分比布局)"></a>流式布局(百分比布局)</h2><ul><li>流式布局，就是百分比布局，也称非固定像素布局。</li><li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</li><li>max-width:;    min-width:;  最大值和最小值范围</li></ul><p><img src="https://img-blog.csdnimg.cn/4898866c139346498a48354784a80789.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><table><thead><tr><th>传统布局</th><th>flex弹性布局</th></tr></thead><tbody><tr><td>兼容性好</td><td>操作方便，布局极为简单，移动端应用很广泛</td></tr><tr><td>布局繁琐</td><td>PC 端浏览器支持情况较差</td></tr><tr><td>局限性，不能再移动端很好的布局</td><td>IE 11或更低版本，不支持或仅部分支持</td></tr></tbody></table><p>建议：</p><ol><li>如果是PC端页面布局，我们还是传统布局。</li><li>如果是移动端或者不考虑兼容性问题的PC端页面布局，我们还是使用flex弹性布局</li></ol><h3 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h3><ol><li><p>搭建HTML结构</p></li><li><p>CSS样式</p><p>span 直接给宽度和高度，背景颜色，还有蓝色边框</p><p>给 div 只需要添加 <code>display: flex</code> 即可</p></li></ol><p><img src="https://img-blog.csdnimg.cn/3d69fd5718e84f6ea3a1fbf5846c8a48.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="flex布局原理"><a href="#flex布局原理" class="headerlink" title="flex布局原理"></a>flex布局原理</h3><p>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</p><ul><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>伸缩布局 = 弹性布局 = 伸缩盒布局 = 弹性盒布局 =flex布局</li></ul><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><p><img src="https://img-blog.csdnimg.cn/d27de399dbd64e5db668e9d20c8b48bd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>上述例子 div 就是 flex父容器。</li><li>上述例子 span 就是 子容器 flex项目</li><li>子容器可以横向排列也可以纵向排列</li></ul><p>总结 flex 布局原理：<strong>就是通过给父盒子添加 flex 属性，来控制子盒子的位置和排列方式。</strong></p><h3 id="flex布局常见父项属性"><a href="#flex布局常见父项属性" class="headerlink" title="flex布局常见父项属性"></a>flex布局常见父项属性</h3><p>以下有 6 个属性是对父元素设置的</p><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行</li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h4 id="flex-direction设置主轴方向"><a href="#flex-direction设置主轴方向" class="headerlink" title="flex-direction设置主轴方向"></a>flex-direction设置主轴方向</h4><p>主轴和侧轴：在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有：行和列、x轴和y轴</p><ul><li>默认主轴方向就是 x 轴方向，水平向右</li><li>默认侧轴方向就是 y 轴方向，水平向下</li></ul><p><img src="https://img-blog.csdnimg.cn/513ae11d9f4041949b450c2c1a40dc7e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/d77b23b3162348598cb07449b128c21a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>flex-direction 属性决定主轴的方向（即项目的排列方向）</li><li>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><strong>row</strong></td><td><strong>默认值从左到右</strong></td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td><strong>column</strong></td><td><strong>从上到下</strong></td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table><h4 id="justify-content-设置主轴上的子元素排列方式"><a href="#justify-content-设置主轴上的子元素排列方式" class="headerlink" title="justify-content 设置主轴上的子元素排列方式"></a>justify-content 设置主轴上的子元素排列方式</h4><ul><li>justify-content 属性定义了项目在主轴上的对齐方式</li><li><strong>注意： 使用这个属性之前一定要确定好主轴是哪个</strong></li></ul><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><strong>flex-start</strong></td><td><strong>默认值从头部开始，如果主轴是x轴，则从左到右</strong></td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td><strong>center</strong></td><td><strong>在主轴居中对齐(如果主轴是 x 轴则水平居中)</strong></td></tr><tr><td><strong>space-around</strong></td><td><strong>平分剩余空间</strong></td></tr><tr><td><strong>space-between</strong></td><td><strong>先两边贴边，再平分剩余空间🔥</strong></td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/4b70488588e54aa18ea44c39a0c0d074.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/eba632281ba14898b7b20f9592d34047.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h4 id="flex-wrap-设置子元素是否换行"><a href="#flex-wrap-设置子元素是否换行" class="headerlink" title="flex-wrap 设置子元素是否换行"></a>flex-wrap 设置子元素是否换行</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</p><p>意思就是如果按照我们设置的盒子大小，一行只能装 3 个盒子，但是我们有 5 个盒子，那么 flex 布局默认会给我们塞上去，自动缩小盒子大小。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值，不换行</td></tr><tr><td><strong>wrap</strong></td><td><strong>换行</strong></td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/4837b51525eb48ebad097946d7a3d03c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h4 id="align-items-设置侧轴上的子元素排列方式-单行"><a href="#align-items-设置侧轴上的子元素排列方式-单行" class="headerlink" title="align-items 设置侧轴上的子元素排列方式(单行)"></a>align-items 设置侧轴上的子元素排列方式(单行)</h4><p>该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为单项（<strong>单行</strong>）的时候使用</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><strong>flex-start</strong></td><td><strong>从上到下</strong></td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td><strong>center</strong></td><td><strong>挤在一起居中(垂直居中)</strong></td></tr><tr><td><strong>stretch</strong></td><td><strong>拉伸(默认值)</strong></td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/06f471dc501c4557ac69e9f0679c1f73.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h4 id="align-content-设置侧轴上的子元素的排列方式-多行"><a href="#align-content-设置侧轴上的子元素的排列方式-多行" class="headerlink" title="align-content 设置侧轴上的子元素的排列方式(多行)"></a>align-content 设置侧轴上的子元素的排列方式(多行)</h4><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 <strong>换行</strong> 的情况（多行），在单行下是没有效果的。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><strong>flex-start</strong></td><td><strong>默认值在侧轴的头部开始排列</strong></td></tr><tr><td>flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td><strong>center</strong></td><td><strong>在侧轴中间显示</strong></td></tr><tr><td><strong>space-around</strong></td><td><strong>子项在侧轴平分剩余空间</strong></td></tr><tr><td><strong>space-between</strong></td><td><strong>子项在侧轴先分布在两头，再平分剩余空间</strong></td></tr><tr><td><strong>stretch</strong></td><td><strong>设置子项元素高度平分父元素高度</strong></td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/27eee5f656584ac9afc8cbaf1c7021d0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h4 id="align-content-和-align-items-区别"><a href="#align-content-和-align-items-区别" class="headerlink" title="align-content 和 align-items 区别"></a>align-content 和 align-items 区别</h4><ul><li>align-items 适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content 适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、 下对齐、居中、拉伸以及平均分配剩余空间等属性值。</li><li>总结就是单行找 align-items 多行找 align-content</li></ul><p><img src="https://img-blog.csdnimg.cn/480258f6f7254d57ad0de8720a68705c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</p><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行</li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h2 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h2><ul><li>flex 子项目占的份数</li><li>align-self 控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h3><p>flex 属性定义子项目<strong>分配剩余空间</strong>，用flex来表示占多少份数。</p><p><img src="https://img-blog.csdnimg.cn/dc679b96741d476e97bb3cb7f7f41d68.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/0760011e9c554d779ee3fa7d4eb53dfe.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="align-self-控制子项自己在侧轴上的排列方式"><a href="#align-self-控制子项自己在侧轴上的排列方式" class="headerlink" title="align-self 控制子项自己在侧轴上的排列方式"></a>align-self 控制子项自己在侧轴上的排列方式</h3><ul><li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</li><li>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</li></ul><p><img src="https://img-blog.csdnimg.cn/963925250d4d41149666f567b550821e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="order属性定义项目的排列顺序"><a href="#order属性定义项目的排列顺序" class="headerlink" title="order属性定义项目的排列顺序"></a>order属性定义项目的排列顺序</h3><p>数值越小，排列越靠前，默认为0。</p><p>注意：和 z-index 不一样。</p><p><img src="https://img-blog.csdnimg.cn/7a36164244a646cdae65f5ef6f58efba.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="背景颜色渐变"><a href="#背景颜色渐变" class="headerlink" title="背景颜色渐变"></a>背景颜色渐变</h2><p>background: -webkit-linear-gradient(left,red,blue);</p><p>必须添加浏览器前缀</p><p><img src="https://img-blog.csdnimg.cn/974fa15e13cb47f0bc7a265d59f2b33c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="rem适配布局"><a href="#rem适配布局" class="headerlink" title="rem适配布局"></a>rem适配布局</h2><p>我们来看几个问题：</p><ol><li>页面布局文字能否随着屏幕大小变化而变化？</li><li>流式布局和flex布局主要针对于宽度布局，那高度如何设置？</li><li>怎么样让屏幕发生变化的时候元素高度和宽度等比例缩放？</li></ol><h3 id="rem基础"><a href="#rem基础" class="headerlink" title="rem基础"></a>rem基础</h3><ul><li>rem (root em)是一个相对单位，类似于em，em是父元素字体大小。</li><li>不同的是rem的基准是相对于html元素的字体大小。   <ul><li>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px</li><li>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/f6708feda7904832b76d87995ad02bd3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>媒体查询（Media Query）是CSS3新语法。</p><ul><li>使用 @media 查询，可以针对不同的媒体类型定义不同的样式</li><li><strong>@media 可以针对不同的屏幕尺寸设置不同的样式</strong></li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li><li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li></ul><p>语法如下： </p><ul><li>用 @media 开头 注意@符号</li><li>mediatype 媒体类型 </li><li>关键字 and not only</li><li>media feature 媒体特性 必须有小括号包含</li></ul><p>上面代码的意思是在我们屏幕上页面处于 500px-800px 之间，页面背景颜色显示为 pink 色。页面小于 500px，背景颜色显示为 purple 色</p><h4 id="mediatype查询类型"><a href="#mediatype查询类型" class="headerlink" title="mediatype查询类型"></a>mediatype查询类型</h4><p>将不同的终端设备划分成不同的类型，称为媒体类型</p><table><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td>all</td><td>用于所有设备</td></tr><tr><td>print</td><td>用于打印机和打印预览</td></tr><tr><td><strong>scree</strong></td><td><strong>用于电脑屏幕、平板电脑、智能手机等</strong></td></tr></tbody></table><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li>only：指定某个特定的媒体类型，可以省略。</li></ul><h4 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h4><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。<strong>注意他们要加小括号包含</strong>。</p><table><thead><tr><th>值</th><th>解释</th></tr></thead><tbody><tr><td>width</td><td>定义输出设备中页面可见区域的宽度</td></tr><tr><td>min-width</td><td>定义输出设备中页面最小可见区域宽度</td></tr><tr><td>max-width</td><td>定义输出设备中页面最大可见区域宽度</td></tr></tbody></table><p>注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p><p><img src="https://img-blog.csdnimg.cn/9ebceb16c2f04d2da6d4425202bf1b86.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="媒体查询-rem实现元素动态大小变化"><a href="#媒体查询-rem实现元素动态大小变化" class="headerlink" title="媒体查询+rem实现元素动态大小变化"></a>媒体查询+rem实现元素动态大小变化</h3><ul><li>rem单位是跟着html来走的，有了rem页面元素可以设置不同大小尺寸</li><li>媒体查询可以根据不同设备宽度来修改样式</li><li>媒体查询+rem 就可以实现不同设备宽度，实现页面元素大小的动态变化</li></ul><p>上述代码的意思是：屏幕尺寸小于320px， div 大小为 0.5*50 = 25px，屏幕尺寸大于 320px 小于 640px， div 大小为 0.5 * 100 = 50px</p><h3 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h3><ul><li>当样式比较繁多的时候，我们可以针对不同的媒体使用不同 stylesheets（样式表）。</li><li>原理，就是直接在link中判断设备的尺寸，然后引用不同的css文件。</li></ul><h3 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h3><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。</li><li>不方便维护及扩展，不利于复用。</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。</li></ul><p>Less （Leaner Style Sheets 的缩写） 是一门 CSS 扩展语言，也成为CSS预处理器。</p><ul><li>做为 CSS 的一种形式的扩展，它并没有减少 CSS 的功能，而是在现有的 CSS 语法上，为CSS加入程序式语言的特性。</li><li>它在 CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS 的维护成本，就像它的名称所说的那样，Less 可以让我们用更少的代码做更多的事情。</li><li>Less中文网址： <a href="http://lesscss.cn/">http://lesscss.cn/</a></li><li>Less 是一门 CSS 预处理语言，它扩展了CSS的动态特性。</li></ul><h4 id="Less安装"><a href="#Less安装" class="headerlink" title="Less安装"></a>Less安装</h4><p>安装：(如果使用vscode无需安装less)</p><p>查看版本：</p><p>我们首先新建一个后缀名为less的文件， 在这个less文件里面书写less语句。</p><h4 id="Less变量"><a href="#Less变量" class="headerlink" title="Less变量"></a>Less变量</h4><p>变量命名规范</p><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul><p>变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。</p><h4 id="Less编译"><a href="#Less编译" class="headerlink" title="Less编译"></a>Less编译</h4><p>我们需要把我们的 less文件，编译生成为css文件，这样我们的html页面才能使用。</p><p>我们可以在 vscode 安装 <code>Easy LESS</code> 插件来把 less 文件编译为 css。安装完毕插件，重新加载下 vscode。只要保存一下Less文件，会自动生成CSS文件。</p><h4 id="Less嵌套"><a href="#Less嵌套" class="headerlink" title="Less嵌套"></a>Less嵌套</h4><p>我们经常用到选择器的嵌套</p><p>如果遇见 （交集|伪类|伪元素选择器）</p><ul><li>内层选择器的前面没有 &amp; 符号，则它被解析为父选择器的后代</li><li>如果有 &amp; 符号，它就被解析为父元素自身或父元素的伪类</li></ul><h4 id="Less运算"><a href="#Less运算" class="headerlink" title="Less运算"></a>Less运算</h4><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。</p><p>注意： </p><ul><li>乘号（*）和除号（/）的写法</li><li>运算符中间左右有个空格隔开 1px + 5</li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位</li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul><h3 id="rem适配方案"><a href="#rem适配方案" class="headerlink" title="rem适配方案"></a>rem适配方案</h3><ol><li>让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</li><li>使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</li></ol><p>实际开发中适配方案：</p><ol><li>按照设计稿与设备宽度的比例，动态计算并设置 html 根标签的 font-size 大小；（媒体查询）</li><li>CSS 中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为 rem 为单位的值；</li></ol><p>rem 适配方案技术使用</p><p><img src="https://img-blog.csdnimg.cn/a0b6ea5dab89442096a4d3595c121dc7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h4 id="rem实际开发适配方案一"><a href="#rem实际开发适配方案一" class="headerlink" title="rem实际开发适配方案一"></a>rem实际开发适配方案一</h4><p>rem + 媒体查询 + less 技术</p><p><img src="https://img-blog.csdnimg.cn/2f0494ce7c554a6985ac4f0d0db421e4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>一般情况下，我们以一套或两套效果图适应大部分的屏幕，放弃极端屏或对其优雅降级，牺牲一些效果。现在基本以750为准。</p><blockquote><p>动态设置 html 标签 font-size 大小</p></blockquote><ol><li>假设设计稿是750px</li><li>假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）</li><li>每一份作为html字体大小，这里就是50px</li><li>那么在320px设备的时候，字体大小为320/15 就是 21.33px</li><li>用我们页面元素的大小 除以不同的 html 字体大小会发现他们比例还是相同的</li><li>比如我们以 750为标准设计稿</li><li>一个100*100像素的页面元素 在 750屏幕下， 就是 100 / 50 转换为rem 是 2rem * 2 rem 比例是 1比1</li><li>320屏幕下， html 字体大小为 21.33 则 2rem = 42.66px 此时宽和高都是 42.66 但是 宽和高的比例还是 1比1</li><li>但是已经能实现不同屏幕下 页面元素盒子等比例缩放的效果</li></ol><blockquote><p>元素大小取值方法</p></blockquote><ol><li>最后的公式： 页面元素的rem值 = 页面元素值（px） / （屏幕宽度 / 划分的份数）</li><li>屏幕宽度/划分的份数 就是 html font-size 的大小</li><li>或者： 页面元素的rem值 = 页面元素值（px） / html font-size 字体大小</li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础之函数与作用域(二)</title>
      <link href="/myblog.github.io/2022/04/24/JavaScript%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F(%E4%BA%8C)/"/>
      <url>/myblog.github.io/2022/04/24/JavaScript%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>函数：就是封装了一段<strong>可被重复调用执行的代码块</strong>。通过此代码块可以实现大量代码的重复使用。</p><h2 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h2><p>函数在使用时分为两步：<strong>声明函数</strong>和<strong>调用函数</strong></p><h3 id="①声明函数"><a href="#①声明函数" class="headerlink" title="①声明函数"></a>①声明函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">     <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>function 是声明函数的关键字,<strong>必须小写</strong></li><li>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</li></ul><h3 id="②调用函数"><a href="#②调用函数" class="headerlink" title="②调用函数"></a>②调用函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">函数名(); <span class="comment">//通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure><ul><li>调用的时候<strong>千万不要忘记添加小括号</strong></li><li>口诀：函数不调用，自己不执行</li></ul><p><strong>注意</strong>：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p><h2 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h2><ul><li>函数的封装是把一个或者多个功能通过<strong>函数的方式</strong>封装起来，对外只提供一个简单的函数接口</li></ul><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><p><strong>在声明函数时</strong>，可以在函数名称后面的小括号中添加一些参数，这些参数被称为<strong>形参</strong>，而在<strong>调用该函数</strong>时，同样也需要传递相应的参数，这些参数被称为<strong>实参</strong>。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><strong>形参</strong></td><td><strong>形</strong>式上的<strong>参</strong>数 <strong>函数定义</strong>的时候 传递的参数 当前并不知道是什么</td></tr><tr><td><strong>实参</strong></td><td><strong>实</strong>际上的<strong>参</strong>数 <strong>函数调用</strong>的时候 传递的参数 实参是传递给形参的</td></tr></tbody></table><p><strong>参数的作用</strong> : 在<strong>函数内部</strong>某些值不能固定，我们可以通过参数在<strong>调用函数时传递不同的值</strong>进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2</span> , 形参<span class="number">3.</span>..) &#123; <span class="comment">// 可以定义任意多的参数，用逗号分隔</span></span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3.</span>..); </span><br></pre></td></tr></table></figure><p>例如：利用函数求任意两个数的和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1+num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">//4</span></span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">6</span>，<span class="number">5</span>) <span class="comment">//11</span></span><br></pre></td></tr></table></figure><ul><li>函数调用的时候实参值是传递给形参的</li><li>形参简单理解为:<strong>不用声明的变量</strong></li><li>实参和形参的多个参数之间用<code>逗号(,)</code>分隔，</li></ul><h3 id="形参和实参个数不匹配"><a href="#形参和实参个数不匹配" class="headerlink" title="形参和实参个数不匹配"></a>形参和实参个数不匹配</h3><table><thead><tr><th>参数个数</th><th>说明</th></tr></thead><tbody><tr><td>实参个数等于形参个数</td><td>输出正确结果</td></tr><tr><td>实参个数多于形参个数</td><td>只取到形参的个数</td></tr><tr><td>实参个数小于形参个数</td><td>多的形参定义为undefined，结果为NaN</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">100</span>, <span class="number">200</span>);             <span class="comment">// 300，形参和实参个数相等，输出正确结果</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">100</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">700</span>);   <span class="comment">// 500，实参个数多于形参，只取到形参的个数</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">200</span>);                  <span class="comment">// 实参个数少于形参，多的形参定义为undefined，结果为NaN</span></span><br></pre></td></tr></table></figure><p><strong>注意：在JavaScript中，形参的默认值是undefined</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>函数可以带参数也可以不带参数</li><li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li>调用函数的时候，函数名括号里面的是实参</li><li>多个参数中间用逗号分隔</li><li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。</p><p>return 语句的语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名（）&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span>  需要返回的值;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();    <span class="comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br></pre></td></tr></table></figure><ul><li>在使用 return 语句时，函数会停止执行，并返回指定的值</li><li>如果函数没有 return ，返回的值是 undefined</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">sum</span>();      <span class="comment">// 此时 sum 的值就等于666，因为 return 语句会把自身后面的值返回给调用者 </span></span><br></pre></td></tr></table></figure><h3 id="return-终止函数"><a href="#return-终止函数" class="headerlink" title="return 终止函数"></a>return 终止函数</h3><p>return 语句之后的代码不被执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1，num2</span>)&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2; <span class="comment">// 注意：return 后的代码不执行</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;我不会被执行，因为前面有 return&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resNum = <span class="title function_">add</span>(<span class="number">21</span>,<span class="number">6</span>); <span class="comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span></span><br><span class="line"><span class="title function_">alert</span>(resNum);          <span class="comment">// 27</span></span><br></pre></td></tr></table></figure><h3 id="return-的返回值"><a href="#return-的返回值" class="headerlink" title="return 的返回值"></a>return 的返回值</h3><p>return <strong>只能返回一个值</strong>。如果用逗号隔开多个值，<strong>以最后一个为准</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1，num2</span>)&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">return</span> num1,num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resNum = <span class="title function_">add</span>(<span class="number">21</span>,<span class="number">6</span>); <span class="comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span></span><br><span class="line"><span class="title function_">alert</span>(resNum);          <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>函数都是有返回值的</p><ol><li>如果有 return ，则返回 return 后面的值</li><li>如果没有 return，则返回 undefined</li></ol><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>break、continue、return 的区别</p><ul><li><code>break</code> ： 结束当前循环体(如 for、while)</li><li><code>continue</code> ：跳出本次循环，继续执行下次循环(如for、while)</li><li><code>return</code> ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><strong>1.利用函数求任意两个数的最大值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function getMax(num1, num2) &#123;</span><br><span class="line">    return num1 &gt; num2 ? num1 : num2;</span><br><span class="line">&#125;</span><br><span class="line">console.log(getMax(1, 2));2</span><br><span class="line">console.log(getMax(11, 2));11</span><br></pre></td></tr></table></figure><p><strong>2.求数组 [5,2,99,101,67,77] 中的最大数值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个获取数组中最大数的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMaxFromArr</span>(<span class="params">numArray</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> maxNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numArray.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numArray[i]&gt;maxNum)&#123;</span><br><span class="line">            maxNum = numArray[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arrNum = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">67</span>,<span class="number">77</span>];</span><br><span class="line"><span class="keyword">var</span> maxN = <span class="title function_">getMaxFromArr</span>(arrNum);  <span class="comment">//这个实参是个数组</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;最大值为&#x27;</span> + maxN);</span><br></pre></td></tr></table></figure><p><strong>3.创建一个函数，实现两个数之间的加减乘除运算，并将结果返回</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseFloat</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入第一个数&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">parseFloat</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入第二个数&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [a + b, a - b, a * b, a / b];</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">count</span>(a,b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h2 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h2><p>当我们不确定有多少个参数传递的时候，可以用 arguments 来获取。在 JavaScript 中，arguments 实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。</p><ul><li><strong>arguments</strong>存放的是传递过来的实参</li><li><strong>arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点</strong></li></ul><p> ①：具有 length 属性</p><p> ②：按索引方式储存数据</p><p> ③：不具有数组的 push , pop 等方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);  <span class="comment">//里面存储了所有传递过来的实参</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arrguments.<span class="property">length</span>); <span class="comment">// 3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arrguments[<span class="number">2</span>]); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>例如：利用函数求任意个数的最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">maxValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i  = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; <span class="variable language_">arguments</span>[i]) &#123;</span><br><span class="line">            max = <span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">maxValue</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>)); <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">maxValue</span>(<span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>)); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h2 id="函数调用另外一个函数"><a href="#函数调用另外一个函数" class="headerlink" title="函数调用另外一个函数"></a>函数调用另外一个函数</h2><p>因为每个函数都是独立的代码块，用/于完成特殊任务，因此经常会用到函数相互调用的情况。具体演示在下面的函数练习中会有。</p><h2 id="函数练习"><a href="#函数练习" class="headerlink" title="函数练习"></a>函数练习</h2><p><strong>1.利用函数封装方式，翻转任意一个数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="title function_">reverse</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure><p><strong>2.利用函数封装方式，对数组排序 – 冒泡排序</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123; </span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>]; </span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.输入一个年份，判断是否是闰年（闰年：能被4整除并且不能被100整数，或者能被400整除）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isRun</span>(<span class="params">year</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">if</span> (year % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !== <span class="number">0</span> || year % <span class="number">400</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRun</span>(<span class="number">2010</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRun</span>(<span class="number">2012</span>));</span><br></pre></td></tr></table></figure><p><strong>4.用户输入年份，输出当前年份2月份的天数，如果是闰年，则2月份是 29天， 如果是平年，则2月份是 28天</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">backDay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> year = <span class="title function_">prompt</span>(<span class="string">&#x27;请您输入年份:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isRun</span>(year)) &#123; <span class="comment">//调用函数需要加小括号</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;你输入的&#x27;</span> + year + <span class="string">&#x27;是闰年，2月份有29天&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;您输入的&#x27;</span> + year + <span class="string">&#x27;不是闰年，2月份有28天&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">backDay</span>();</span><br><span class="line"><span class="comment">//判断是否是闰年的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isRun</span>(<span class="params">year</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (year % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !== <span class="number">0</span> || year % <span class="number">400</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的两种声明方式"><a href="#函数的两种声明方式" class="headerlink" title="函数的两种声明方式"></a>函数的两种声明方式</h2><h3 id="自定义函数方式-命名函数"><a href="#自定义函数方式-命名函数" class="headerlink" title="自定义函数方式(命名函数)"></a>自定义函数方式(命名函数)</h3><p>利用函数关键字 function 自定义函数方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用  </span></span><br><span class="line"><span class="title function_">fn</span>();  </span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><ol><li><strong>因为有名字，所以也被称为命名函数</strong></li><li><strong>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</strong></li></ol><h3 id="函数表达式方式-匿名函数"><a href="#函数表达式方式-匿名函数" class="headerlink" title="函数表达式方式(匿名函数)"></a>函数表达式方式(匿名函数)</h3><p>利用函数表达式方式的写法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><ul><li>因为函数没有名字，所以也称为<strong>匿名函数</strong></li><li>这个fn 里面存储的是一个函数</li><li><strong>函数调用的代码必须写到函数体后面</strong></li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的<strong>可用性的代码范围</strong>就是这个名字的<strong>作用域</strong>。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><p>JavaScript (ES6前) 中的作用域有两种：</p><ul><li>全局作用域</li><li>局部作用域(函数作用域)</li></ul><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p><h3 id="局部（函数）作用域"><a href="#局部（函数）作用域" class="headerlink" title="局部（函数）作用域"></a>局部（函数）作用域</h3><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域</p><h3 id="JS-没有块级作用域"><a href="#JS-没有块级作用域" class="headerlink" title="JS 没有块级作用域"></a>JS 没有块级作用域</h3><ul><li>快作用域由 <code>&#123;&#125;</code> 包括</li><li>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">    System.out.println(num);<span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(num);<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>JS 中没有块级作用域(在ES6之前)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    int num = <span class="number">123</span>;</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(num);<span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(num);<span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>在JavaScript中，根据作用域的不同，变量可以分为两种：</p><ul><li>全局变量</li><li>局部变量</li></ul><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>在全局作用域下声明的变量叫做全局变量（<strong>在函数外部定义的变量</strong>）</p><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</li></ul><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在局部作用域下声明的变量叫做局部变量（<strong>在函数内部定义的变量</strong>）</p><ul><li>局部变量只能在该函数内部使用</li><li>在函数内部 var 声明的变量是局部变量</li><li>函数的<strong>形参</strong>实际上就是<strong>局部变量</strong></li></ul><h2 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h2><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ol><li>只要是代码，就至少有一个作用域</li><li>写在函数内部的叫局部作用域</li><li>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</li><li>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用域链: 内部函数访问外部函数的变量，采取的是链式查找的方式来决定取哪个值，这种结构我们称为作用域链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">funtion <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="comment">//外部函数</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123; <span class="comment">//内部函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num);  <span class="comment">// 20 ,一级一级访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作用域链：采取<strong>就近原则</strong>的方式来查找变量最终的值。</li></ul><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>首先来看几段代码和结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);  <span class="comment">// 结果是多少？</span></span><br><span class="line"><span class="comment">//会报错 num is undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);  <span class="comment">// 结果是多少？</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;   </span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名函数(自定义函数方式):若我们把函数调用放在函数声明上面</span></span><br><span class="line"><span class="title function_">fn</span>();<span class="comment">//11</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数(函数表达式方式):若我们把函数调用放在函数声明上面</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span>  fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;22&#x27;</span>); <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于执行了以下代码</span></span><br><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line"><span class="title function_">fn</span>();      <span class="comment">//fn没赋值，没这个，报错</span></span><br><span class="line"><span class="keyword">var</span>  fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;22&#x27;</span>); <span class="comment">//报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：<strong>预解析和代码执行。</strong></p><ul><li><strong>预解析</strong>：js引擎会把js里面所有的 <strong>var</strong> 还有 <strong>function</strong> 提升到当前作用域的最前面</li><li><strong>代码执行</strong>：从上到下执行JS语句</li></ul><p>预解析只会发生在通过 var 定义的变量和 function 上。学习预解析能够让我们知道<strong>为什么在变量声明之前访问变量的值是 undefined</strong>，<strong>为什么在函数声明之前就可以调用函数。</strong></p><h2 id="变量预解析-变量提升"><a href="#变量预解析-变量提升" class="headerlink" title="变量预解析(变量提升)"></a>变量预解析(变量提升)</h2><p>变量预解析也叫做变量提升、函数提升</p><p>变量提升: 变量的声明会被提升到<strong>当前作用域</strong>的最上面，变量的赋值不会提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);  <span class="comment">// 结果是多少？</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;   </span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于执行了以下代码</span></span><br><span class="line"><span class="keyword">var</span> num;<span class="comment">// 变量声明提升到当前作用域最上面</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">num = <span class="number">10</span>;<span class="comment">// 变量的赋值不会提升</span></span><br></pre></td></tr></table></figure><h2 id="函数预解析-函数提升"><a href="#函数预解析-函数提升" class="headerlink" title="函数预解析(函数提升)"></a>函数预解析(函数提升)</h2><p>函数提升： 函数的声明会被提升到<strong>当前作用域</strong>的最上面，但是不会调用函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fn</span>();<span class="comment">//11</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决函数表达式声明调用问题"><a href="#解决函数表达式声明调用问题" class="headerlink" title="解决函数表达式声明调用问题"></a>解决函数表达式声明调用问题</h2><p>对于函数表达式声明调用需要记住：<strong>函数表达式调用必须写在函数声明的下面</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数(函数表达式方式):若我们把函数调用放在函数声明上面</span></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span>  fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;22&#x27;</span>); <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于执行了以下代码</span></span><br><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line"><span class="title function_">fn</span>();      <span class="comment">//fn没赋值，没这个，报错</span></span><br><span class="line"><span class="keyword">var</span>  fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;22&#x27;</span>); <span class="comment">//报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预解析练习"><a href="#预解析练习" class="headerlink" title="预解析练习"></a>预解析练习</h2><p>预解析部分十分重要，可以通过下面4个练习来理解。<br> Pink老师的视频讲解预解析：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=143">https://www.bilibili.com/video/BV1Sy4y1C7ha?p=143</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 练习1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);<span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终结果是 undefined</span></span><br></pre></td></tr></table></figure><p>上述代码相当于执行了以下操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 练习2</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);<span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);<span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">// 最终结果是 undefined 20</span></span><br></pre></td></tr></table></figure><p>上述代码相当于执行了以下操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 练习3</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码相当于执行了以下操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b;</span><br><span class="line">    <span class="keyword">var</span> a</span><br><span class="line">    b = <span class="number">9</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//9</span></span><br><span class="line">    a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">18</span>;</span><br><span class="line"><span class="title function_">f1</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 练习4</span></span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">// 相当于 var a = 9; b = 9;c = 9;  b和c的前面没有var声明,当全局变量看</span></span><br><span class="line">    <span class="comment">// 集体声明 var a = 9,b = 9,c = 9;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码相当于执行了以下操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a = b = c = <span class="number">9</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);<span class="comment">//9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);<span class="comment">//9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//报错 a是局部变量</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础大总结(一)</title>
      <link href="/myblog.github.io/2022/04/24/JavaScript%E5%9F%BA%E7%A1%80%E5%A4%A7%E6%80%BB%E7%BB%93(%E4%B8%80)/"/>
      <url>/myblog.github.io/2022/04/24/JavaScript%E5%9F%BA%E7%A1%80%E5%A4%A7%E6%80%BB%E7%BB%93(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaScript基础大总结"><a href="#JavaScript基础大总结" class="headerlink" title="JavaScript基础大总结"></a>JavaScript基础大总结</h1><h1 id="初识JavaScirpt"><a href="#初识JavaScirpt" class="headerlink" title="初识JavaScirpt"></a>初识JavaScirpt</h1><ul><li>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</li><li>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</li><li>现在也可以基于 Node.js 技术进行服务器端编程</li></ul><p><img src="https://img-blog.csdnimg.cn/575f5e51a4f644b7b315887d2f07c97d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="浏览器执行JS简介"><a href="#浏览器执行JS简介" class="headerlink" title="浏览器执行JS简介"></a>浏览器执行JS简介</h2><p>浏览器分成两部分：渲染引擎和 JS 引擎</p><ul><li>渲染引擎：用来解析HTML与CSS，俗称内核，比如 chrome 浏览器的 blink ，老版本的 webkit</li><li>JS 引擎：也称为 JS 解释器。 用来读取网页中的JavaScript代码，对其处理后运行，比如 chrome 浏览器的 V8</li></ul><p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p><p><img src="https://img-blog.csdnimg.cn/6626246651a048ab94cff1c8afe62fc2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h2><p>JavaScript 包括 ECMAScript、DOM、BOM</p><p><img src="https://img-blog.csdnimg.cn/a9331f588aa54d43b22ae207249f0e1f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><p><strong>ECMAScript</strong> 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p><p><img src="https://img-blog.csdnimg.cn/931cd1c9d4fd44e9b547284a635daa26.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>ECMAScript：ECMAScript 规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p><h3 id="DOM文档对象模型"><a href="#DOM文档对象模型" class="headerlink" title="DOM文档对象模型"></a>DOM文档对象模型</h3><p><strong>文档对象模型</strong>（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p><h3 id="BOM浏览器对象模型"><a href="#BOM浏览器对象模型" class="headerlink" title="BOM浏览器对象模型"></a>BOM浏览器对象模型</h3><p><strong>BOM</strong> (Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p><h1 id="JS初体验"><a href="#JS初体验" class="headerlink" title="JS初体验"></a>JS初体验</h1><h2 id="行内式JS"><a href="#行内式JS" class="headerlink" title="行内式JS"></a>行内式JS</h2><ol><li>可以将单行或少量JS代码写在HTML标签的事件属性中(以on开头的属性)，如： onclink</li><li>注意单双引号的使用：在HTML中我们推荐使用<strong>双引号</strong>，JS中我们推荐使用<strong>单引号</strong></li><li>可读性差，在 HTML 中编入 JS 大量代码时，不方便阅读</li><li>特殊情况下使用</li></ol><h2 id="内嵌式JS"><a href="#内嵌式JS" class="headerlink" title="内嵌式JS"></a>内嵌式JS</h2><ul><li>可以将多行JS代码写到<code>&lt;script&gt;</code>标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul><h2 id="外部JS"><a href="#外部JS" class="headerlink" title="外部JS"></a>外部JS</h2><ol><li>利于HTML页面代码结构化，把单独JS代码独立到HTML页面之外，既美观，又方便</li><li>引用外部JS文件的script标签中间不可以写代码</li><li>适合于JS代码量比较大的情况</li></ol><h1 id="JS基本语法"><a href="#JS基本语法" class="headerlink" title="JS基本语法"></a>JS基本语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><ul><li>快捷键<code>ctrl + /</code></li></ul><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><ul><li>快捷键 <code>shift + alt + a</code></li><li>vscode中修改快捷键方式：vscode➡ 首选项按钮➡ 键盘快捷方式 ➡ 查找原来的快捷键➡ 修改为新的快捷键➡ 回车确认</li></ul><h2 id="输入输出语句"><a href="#输入输出语句" class="headerlink" title="输入输出语句"></a>输入输出语句</h2><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg);</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg);</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info);</td><td>浏览看弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li><code>alert()</code> 主要用来显示消息给用户</li><li><code>console.log()</code> 用来给程序员看自己运行时的消息</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量是用于存放数据的<strong>容器</strong>，我们通过<strong>变量名</strong>获取数据，甚至数据可以修改</li><li>**本质：**变量是程序在**内存**中申请的一块用来存放数据的空间</li></ul><h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><ol><li>var是一个JS关键字，用来声明变量(variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</li><li>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</li></ol><h3 id="声明变量特殊情况"><a href="#声明变量特殊情况" class="headerlink" title="声明变量特殊情况"></a>声明变量特殊情况</h3><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var age; console.log(age);</td><td>只声明，不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值 直接使用</td><td>报错</td></tr><tr><td>age = 10;console.log(age);</td><td>不声明 只赋值</td><td>10</td></tr></tbody></table><h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><ol><li>由字母(A-Z,a-z)，数字(0-9)，下划线(_)，美元符号($)组成，如:usrAge,num01,__name</li><li>严格区分大小写。 <code>var app;</code> 和 <code>var App;</code> 是两个变量</li><li>不能以数字开头。</li><li>不能是关键字，保留字。例如：<code>var,for,while</code></li><li>遵循驼峰命名法。首字母小写，后面单词的首字母需要大写。<code>myFirstName</code></li><li>推荐翻译网站：有道 爱词霸</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>JavaScript</strong> <strong>是一种弱类型或者说动态语言。</strong>这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><ul><li>在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。</li><li>JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型</li></ul><p>JS 把数据类型分为两类：</p><ul><li>基本数据类型(Number,String,Boolean,Undefined,Null)</li><li>复杂数据类型(Object)</li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整型值和浮点型值，如21，0.21</td><td>0</td></tr><tr><td>Boolean</td><td>布尔值类型，如true，false ，等价于1和0</td><td>false</td></tr><tr><td>Undefined</td><td>var a; 声明了变量a但是没有赋值，此时a=undefined</td><td>undefined（未定义的）</td></tr><tr><td>string</td><td>字符串类型，如“张三”</td><td>“”</td></tr><tr><td>Null</td><td>var a = null;声明了变量a为空值</td><td>null</td></tr></tbody></table><h3 id="数字型Number"><a href="#数字型Number" class="headerlink" title="数字型Number"></a>数字型Number</h3><p>JavaScript 数字类型既可以用来保存整数值，也可以保存小数(浮点数）。</p><h3 id="数字型进制"><a href="#数字型进制" class="headerlink" title="数字型进制"></a>数字型进制</h3><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><ul><li><strong>在JS中八进制前面加0，十六进制前面加 0x</strong></li></ul><h4 id="①数字型范围"><a href="#①数字型范围" class="headerlink" title="①数字型范围"></a>①数字型范围</h4><ul><li>JS中数值的最大值：<code>Number.MAX_VALUE</code></li><li>JS中数值的最大值：<code>Number.MIN_VALUE</code></li></ul><h4 id="②数字型的三个特殊值"><a href="#②数字型的三个特殊值" class="headerlink" title="②数字型的三个特殊值"></a>②数字型的三个特殊值</h4><ul><li>Infinity ，代表无穷大，大于任何数值</li><li>-Infinity ，代表无穷小，小于任何数值</li><li>Nan ，Not a Number，代表一个非数值</li></ul><h4 id="③isNaN"><a href="#③isNaN" class="headerlink" title="③isNaN"></a>③isNaN</h4><p>这个方法用来判断非数字，并且返回一个值，如果是数字返回的是false，如果不是数字返回的是true</p><p><img src="https://img-blog.csdnimg.cn/54b996bc0fb74c7fa6b23b55e891bcde.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-4-3、字符串型String"><a href="#2-4-3、字符串型String" class="headerlink" title="2.4.3、字符串型String"></a>2.4.3、字符串型String</h3><p>字符串型可以是引号中的任意文本，其语法为 “<strong>双引号</strong>” 和 “<strong>单引号</strong>’’</p><p>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐<strong>使用单引号</strong>。</p><h4 id="①字符串引号嵌套"><a href="#①字符串引号嵌套" class="headerlink" title="①字符串引号嵌套"></a>①字符串引号嵌套</h4><p>JS可以用 <strong>单引号嵌套双引号</strong>，或者用 <strong>双引号嵌套单引号</strong>（<strong>外双内单，外单内双</strong>）</p><h4 id="②字符串转义符"><a href="#②字符串转义符" class="headerlink" title="②字符串转义符"></a>②字符串转义符</h4><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n是newline</td></tr><tr><td>\ \</td><td>斜杠\</td></tr><tr><td>\ ’</td><td>’ 单引号</td></tr><tr><td>\ ‘’</td><td>‘’ 双引号</td></tr><tr><td>\ t</td><td>tab 缩进</td></tr><tr><td>\ b</td><td>空格，b是blank的意思</td></tr></tbody></table><h4 id="③字符串长度"><a href="#③字符串长度" class="headerlink" title="③字符串长度"></a>③字符串长度</h4><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</p><h4 id="④字符串的拼接"><a href="#④字符串的拼接" class="headerlink" title="④字符串的拼接"></a>④字符串的拼接</h4><ul><li>多个字符串之间可以使用 + 进行拼接，其拼接方式为 <strong>字符串 + 任何类型 = 拼接之后的新字符串</strong></li><li>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li></ul><p><strong>注意</strong>：字符串 + 任何类型 =拼接之后的新字符串</p><ul><li><code>+</code> 号总结口诀：🌏数值相加，字符相连🌏</li></ul><p>⑤字符串拼接加强</p><ul><li>我们经常会将字符串和变量来拼接，因为变量可以很方便地修改里面的值</li><li>变量是不能添加引号的，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀==🌏“引引加加 ”，删掉数字🌏==变量写加中间</li></ul><h3 id="布尔型Boolean"><a href="#布尔型Boolean" class="headerlink" title="布尔型Boolean"></a>布尔型Boolean</h3><ul><li>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</li><li>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</li></ul><h3 id="undefined未定义"><a href="#undefined未定义" class="headerlink" title="undefined未定义"></a>undefined未定义</h3><ul><li>一个<strong>声明后没有被赋值</strong>的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</li></ul><p>1.undefined 和 字符串 相加，会拼接字符串</p><p>2.undefined 和 数字相加，最后结果是<strong>NaN</strong></p><h3 id="空值null"><a href="#空值null" class="headerlink" title="空值null"></a>空值null</h3><ul><li>一个声明变量给 null 值，里面存的值为空</li></ul><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><ul><li>typeof 可用来获取检测变量的数据类型</li></ul><p>不同类型的返回值</p><table><thead><tr><th>类型</th><th>例</th><th>结果</th></tr></thead><tbody><tr><td>string</td><td>typeof “小白”</td><td>“string”</td></tr><tr><td>number</td><td>typeof 18</td><td>“number”</td></tr><tr><td>boolean</td><td>typeof true</td><td>“boolean”</td></tr><tr><td>undefined</td><td>typeof undefined</td><td>“undefined”</td></tr><tr><td>null</td><td>typeof null</td><td>“object”</td></tr></tbody></table><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><ul><li>数字字面量：8，9，10</li><li>字符串字面量：‘大前端’，‘后端’</li><li>布尔字面量：true、false</li></ul><p>通过控制台的颜色判断属于哪种数据类型</p><table><thead><tr><th>黑色</th><th>字符串</th></tr></thead><tbody><tr><td>蓝色</td><td>数值</td></tr><tr><td>灰色</td><td>undefined 和 null</td></tr></tbody></table><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，<strong>就是把一种数据类型的变量转换成另外一种数据类型</strong>。</p><p>我们通常会实现3种方式的转换：</p><ul><li>转换为字符串类型</li><li>转换为数字型</li><li>转换为布尔型</li></ul><h3 id="①转换为字符串型"><a href="#①转换为字符串型" class="headerlink" title="①转换为字符串型"></a>①转换为字符串型</h3><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>转成字符串</td><td>var num = 1; alert(num.toString());</td></tr><tr><td>String()强制转换</td><td>转成字符串</td><td>var num = 1; alert(String(num));</td></tr><tr><td><strong>加号拼接字符串</strong></td><td>和字符串拼接的结果都是字符串</td><td>var num =1; alert(num+“我是字符串”);</td></tr></tbody></table><ul><li>toString() 和 String() 使用方式不一样</li><li>三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式，这一方式也称为隐士转换</li></ul><h3 id="②转换为数字型"><a href="#②转换为数字型" class="headerlink" title="②转换为数字型"></a>②转换为数字型</h3><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><strong>parselnt(string)函数</strong></td><td>将string类型转成整数数值型</td><td>parselnt(‘78’)</td></tr><tr><td><strong>parseFloat(string)函数</strong></td><td>将string类型转成浮点数数值型</td><td>parseFloat(‘78.21’)</td></tr><tr><td>Number()强制转换函数</td><td>将string类型转换为数值型</td><td>Number(‘12’)</td></tr><tr><td>js 隐式转换(- * /)</td><td>利用算术运算隐式转换为数值型</td><td>‘12’-0</td></tr></tbody></table><p>1.注意 parseInt 和 parseFloat ，这两个是重点</p><p>2.隐式转换是我们在进行算数运算的时候，JS自动转换了数据类型</p><h3 id="③转换为布尔型"><a href="#③转换为布尔型" class="headerlink" title="③转换为布尔型"></a>③转换为布尔型</h3><table><thead><tr><th>方法</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转成布尔值</td><td>Boolean(‘true’);</td></tr></tbody></table><ul><li>代表空，否定的值会被转换为false，如 ’ ’ , 0, NaN , null , undefined</li><li>其余的值都会被被转换为true</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符（operator）也被称为<strong>操作符</strong>，是用于实现赋值、比较和执行算数运算等功能的符号</p><p>JavaScript 中常用的运算符有：</p><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10 + 20 =30</td></tr><tr><td>-</td><td>减</td><td>10 - 20 =-10</td></tr><tr><td>*</td><td>乘</td><td>10 * 20 =200</td></tr><tr><td>/</td><td>除</td><td>10 / 20 =0.5</td></tr><tr><td>%</td><td>取余数（取模）</td><td>返回出发的余数 9 % 2 =1</td></tr></tbody></table><h3 id="浮点数的精度问题"><a href="#浮点数的精度问题" class="headerlink" title="浮点数的精度问题"></a>浮点数的精度问题</h3><p>浮点数值的最高精度是17位小数，但在进行算数计算时其精确度远远不如整数</p><p><strong>所以不要直接判断两个浮点数是否相等</strong></p><h3 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h3><p>递增（++）</p><p>递减（- -）</p><p>放在变量前面时，我们称为<strong>前置递增(递减)运算符</strong></p><p>放在变量后面时，我们称为<strong>后置递增(递减)运算符</strong></p><p><strong>注意</strong>：递增和递减运算符必须和变量配合使用。</p><h4 id="①前置递增运算符"><a href="#①前置递增运算符" class="headerlink" title="①前置递增运算符"></a>①前置递增运算符</h4><p>++num num = num + 1</p><p>使用口诀:<strong>先自加，后返回值</strong></p><p>先自加 10+1=11，返回11，此时num=11</p><h4 id="②后置递增运算符"><a href="#②后置递增运算符" class="headerlink" title="②后置递增运算符"></a>②后置递增运算符</h4><p>num ++ num = num +1</p><p>使用口诀:<strong>先返回原值，后自加</strong></p><h4 id="③小结"><a href="#③小结" class="headerlink" title="③小结"></a>③小结</h4><ul><li>前置递增和后置递增运算符可以简化代码的编写，让变量的值 + 1 比以前写法更简单</li><li>单独使用时，运行结果相同，与其他代码联用时，执行结果会不同</li><li>开发时，大多使用后置递增/减，并且代码独占一行</li></ul><h3 id="比较-关系-运算符"><a href="#比较-关系-运算符" class="headerlink" title="比较(关系)运算符"></a>比较(关系)运算符</h3><p>比较运算符是<strong>两个数据进行比较时所使用的运算符</strong>，比较运算后，会<strong>返回一个布尔值</strong>(true / false)作为比较运算的结果。</p><table><thead><tr><th>运算符名称</th><th>说明</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>1 &lt; 2</td><td>true</td></tr><tr><td>&gt;</td><td>大于号</td><td>1 &gt; 2</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于号(大于或者等于)</td><td>2 &gt;= 2</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于号(小于或者等于)</td><td>3 &lt;= 2</td><td>false</td></tr><tr><td>==</td><td>判等号(会转型)</td><td>37 == 37</td><td>true</td></tr><tr><td>!=</td><td>不等号</td><td>37 != 37</td><td>false</td></tr><tr><td>=== !==</td><td>全等 要求值和数据类型都一致</td><td>37 === ‘37’</td><td>false</td></tr></tbody></table><h4 id="①-小结"><a href="#①-小结" class="headerlink" title="①===== 小结"></a>①===== 小结</h4><table><thead><tr><th>符号</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>把右边给左边</td></tr><tr><td>==</td><td>判断</td><td>判断两边值是否相等(注意此时有隐士转换)</td></tr><tr><td>===</td><td>全等</td><td>判断两边的值和数据类型是否完全相同</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值</p><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>“逻辑与”，简称”与” and</td><td>true &amp;&amp; false</td></tr><tr><td>||</td><td>“逻辑或”，简称”或” or</td><td>true || false</td></tr><tr><td>！</td><td>“逻辑非”，简称”非” not</td><td>！true</td></tr></tbody></table><p>逻辑与：两边都是 true才返回 true，否则返回 false</p><p><img src="https://img-blog.csdnimg.cn/27faf833bca6432ab3edc64aeef5733c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>逻辑或：两边都为 false 才返回 false，否则都为true</p><p><img src="https://img-blog.csdnimg.cn/8477f4ed90c646a492d4815ea476f3dc.png#pic_center" alt="在这里插入图片描述"></p><p>逻辑非：逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p><h4 id="短路运算-逻辑中断"><a href="#短路运算-逻辑中断" class="headerlink" title="短路运算(逻辑中断)"></a>短路运算(逻辑中断)</h4><p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值</p><h5 id="①逻辑与"><a href="#①逻辑与" class="headerlink" title="①逻辑与"></a>①逻辑与</h5><ul><li>语法：表达式1 &amp;&amp; 表达式2</li><li>如果第一个表达式的值为真，则返回表达式2</li><li>如果第一个表达式的值为假，则返回表达式1</li></ul><h5 id="②逻辑或"><a href="#②逻辑或" class="headerlink" title="②逻辑或"></a>②逻辑或</h5><ul><li>语法：表达式1 || 表达式2</li><li>如果第一个表达式的值为真，则返回表达式1</li><li>如果第一个表达式的值为假，则返回表达式2</li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>概念：用来把数据赋值给变量的运算符。</p><table><thead><tr><th>赋值运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td><td>var usrName = ‘我是值’</td></tr><tr><td>+= ，-=</td><td>加，减一个数后再赋值</td><td>var age = 10； age+=5；//15</td></tr><tr><td>*=，/=，%=</td><td>成，除，取模后再赋值</td><td>var age = 2; age*=5; //10</td></tr></tbody></table><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>一元运算符</td><td>++ – ！</td></tr><tr><td>3</td><td>算数运算符</td><td><strong>先 * / 后 + -</strong></td></tr><tr><td>4</td><td>关系运算符</td><td><strong>&gt;, &gt;= , &lt; , &lt;=</strong>,</td></tr><tr><td>5</td><td>相等运算符</td><td>，！=，=，！==</td></tr><tr><td>6</td><td>逻辑运算符</td><td><strong>先 &amp;&amp; 后 ||（先与后或）</strong></td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>，</td></tr></tbody></table><p>1.一元运算符里面的<strong>逻辑非</strong>优先级很高</p><p>2.<strong>逻辑与</strong> 比 <strong>逻辑或</strong> 优先级高</p><p>3.练习题</p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>流程控制主要有三种结构，分别是顺序结构、分支结构和循环结构，这三种结构代表三种代码执行的顺序</p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>JS 语言提供了两种分支结构语句：<strong>JS 语句</strong> <strong>switch语句</strong></p><h4 id="①if语句"><a href="#①if语句" class="headerlink" title="①if语句"></a>①if语句</h4><p>案例：进入网吧</p><p>弹出一个输入框，要求用户输入年龄，如果年龄大于等于 18 岁，允许进网吧</p><h4 id="②if-else-语句"><a href="#②if-else-语句" class="headerlink" title="②if else 语句"></a>②if else 语句</h4><p>案例：判断闰年</p><p>接收用户输入的年份，如果是闰年就弹出闰年，否则弹出是平年</p><p><strong>算法</strong>：能被4整除且不能整除100的为闰年（如2004年就是闰年，1901年不是闰年）或者能够被 400 整除的就是闰年</p><h4 id="③if-else-if-语句"><a href="#③if-else-if-语句" class="headerlink" title="③if else if 语句"></a>③if else if 语句</h4><p>案例:接收用户输入的分数，根据分数输出对应的等级字母 A、B、C、D、E</p><p>其中：</p><ol><li>90分(含)以上 ，输出：A</li><li>80分(含)~ 90 分(不含)，输出：B</li><li>70分(含)~ 80 分(不含)，输出：C</li><li>60分(含)~ 70 分(不含)，输出：D</li><li>60分(不含) 以下，输出： E</li></ol><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><ul><li>语法结构 : 表达式1 ? 表达式2 : 表达式3</li><li>执行思路</li></ul><p>如果表达式1为true，则返回表达式2的值,如果表达式1为false，则返回表达式3的值</p><p><strong>案例：数字补0</strong></p><p>用户输入数字，如果数字小于10，则在前面补0，比如01，09，</p><p>如果数字大于10，则不需要补，比如20</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ul><li>switch ：开关 转换 ， case ：小例子 选项</li><li>关键字 switch 后面<strong>括号内</strong>可以是<strong>表达式或值</strong>， 通常是一个<strong>变量</strong></li><li>关键字 case , 后跟一个选项的表达式或值，<strong>后面跟一个冒号</strong></li><li>switch 表达式的值会与结构中的 case 的值做比较</li><li>如果存在匹配<strong>全等</strong>(===) ，则与该 case 关联的代码块会被执行，并在遇到 <strong>break 时停止</strong>，整个 switch 语句代码执行结束</li><li>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</li><li><strong>执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句</strong></li></ul><h1 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h1><ol><li>浏览器中按 F12–&gt; sources –&gt;找到需要调试的文件–&gt;在程序的某一行设置断点(在行数点一下)</li><li>刷新浏览器</li><li>Watch: 监视，通过watch可以监视 变量的值的变化，非常的常用</li><li>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化</li></ol><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="循环-1"><a href="#循环-1" class="headerlink" title="循环"></a>循环</h2><p>在程序中，一组被重复执行的语句被称之为<strong>循环体</strong>，能否继续重复执行，取决于循环的<strong>终止条件</strong>。由循环体及循环的终止条件组成的语句，被称之为<strong>循环语句</strong></p><p><strong>1.输入10句”娘子晚安哈！”</strong></p><p><strong>2.求1-100之间所有整数的累加和</strong></p><p><strong>3.求1-100之间所有数的平均值</strong></p><p><strong>4.求1-100之间所有偶数和奇数的和</strong></p><p><strong>5.求1-100之间所有能被3整除的数字的和</strong></p><p><strong>6.要求用户输入班级人数，之后依次输入每个学生的成绩，最后打印出该班级总的成绩以及平均成绩。</strong></p><p><strong>7.一行打印5个星星</strong></p><p>我们采取追加字符串的方式，这样可以打印到控制台上</p><h2 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h2><p><strong>循环嵌套</strong>是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</p><ul><li>内层循环可以看做外层循环的语句</li><li>内层循环执行的顺序也要遵循 for 循环的执行顺序</li><li>外层循环执行一次，内层循环要执行全部次数</li></ul><h3 id="①打印五行五列星星"><a href="#①打印五行五列星星" class="headerlink" title="①打印五行五列星星"></a>①打印五行五列星星</h3><p>核心：</p><ul><li>内层循环负责一行打印五个星星</li><li>外层循环负责打印五行</li></ul><h3 id="②打印n行n列的星星"><a href="#②打印n行n列的星星" class="headerlink" title="②打印n行n列的星星"></a>②打印n行n列的星星</h3><p>要求用户输入行数和列数，之后在控制台打印出用户输入行数和列数的星星</p><h3 id="③打印倒三角形"><a href="#③打印倒三角形" class="headerlink" title="③打印倒三角形"></a>③打印倒三角形</h3><p><img src="https://img-blog.csdnimg.cn/737dd2f352e74767bb8f2a89e6539061.png#pic_center" alt="在这里插入图片描述"></p><ul><li>一共有10行，但是每行的星星个数不一样，因此需要用到双重 for 循环</li><li>外层的 for 控制行数 i ，循环10次可以打印10行</li><li>内层的 for 控制每行的星星个数 j</li><li>核心算法： 每一行星星的个数： j = i ; j &lt;= 10; j++</li><li>每行打印完毕后，都需要重新换一行</li></ul><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>执行思路：</p><ul><li>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li><li>执行循环体代码</li><li>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li></ul><p><strong>注意</strong>：</p><ul><li>使用 while 循环时一定要注意，它必须要有退出条件，否则会称为死循环</li><li>while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码</li></ul><h3 id="①打印人的一生"><a href="#①打印人的一生" class="headerlink" title="①打印人的一生"></a>①打印人的一生</h3><p>从1岁到99岁</p><h3 id="②计算-1-100-之间所有整数的和"><a href="#②计算-1-100-之间所有整数的和" class="headerlink" title="②计算 1 ~ 100 之间所有整数的和"></a>②计算 1 ~ 100 之间所有整数的和</h3><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><p>执行思路：</p><ol><li>先执行一次循环体代码</li><li>再执行表达式，如果结果为true，则继续执行循环体代码，如果为false，则退出循环，继续执行后面的代码</li><li>先执行再判断循环体，<strong>所以dowhile循环语句至少会执行一次循环体代码</strong></li></ol><p><strong>需求：弹出一个提示框， 你爱我吗？ 如果输入我爱你，就提示结束，否则，一直询问</strong></p><h2 id="continue-关键字"><a href="#continue-关键字" class="headerlink" title="continue 关键字"></a>continue 关键字</h2><p>continue 关键字用于<strong>立即跳出本次循环，继续下一次循环</strong>（本次循环体中 continue 之后的代码就会少执行一次）。</p><p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子</p><h2 id="break关键字"><a href="#break关键字" class="headerlink" title="break关键字"></a>break关键字</h2><p>break 关键字用于<strong>立即跳出整个循环</strong></p><p>例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的也不吃了</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组(Array)是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>JavaScript 中创建数组有两种方式：</p><ul><li>利用 new 创建数组</li><li>利用数组字面量创建数组</li></ul><h3 id="①利用-new-创建数组"><a href="#①利用-new-创建数组" class="headerlink" title="①利用 new 创建数组"></a>①利用 new 创建数组</h3><ul><li>这种方式暂且了解，等学完对象再看</li><li>注意 <code>Array()</code>，A要大写</li></ul><h3 id="②利用数组字面量创建数组"><a href="#②利用数组字面量创建数组" class="headerlink" title="②利用数组字面量创建数组"></a>②利用数组字面量创建数组</h3><ul><li>数组的字面量是方括号 <code>[]</code></li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul><h2 id="数组的索引（下标）"><a href="#数组的索引（下标）" class="headerlink" title="数组的索引（下标）"></a>数组的索引（下标）</h2><p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>我们可以通过 for 循环索引遍历数组中的每一项</p><h2 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h2><p>使用“数组名.length”可以访问数组元素的数量（数组长度）</p><p><strong>注意</strong>：</p><ul><li>此处数组的长度是<strong>数组元素的个数</strong> ，不要和<strong>数组的索引号</strong>混淆</li><li>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><strong>1.请将 [“关羽”,“张飞”,“马超”,“赵云”,“黄忠”,“刘备”,“姜维”]; 数组里的元素依次打印到控制台</strong></p><p><strong>2.求数组 [2,6,1,7, 4] 里面所有元素的和以及平均值</strong></p><ul><li>①声明一个求和变量 sum。</li><li>①遍历这个数组，把里面每个数组元素加到 sum 里面。</li><li>①用求和变量 sum 除以数组的长度就可以得到数组的平均值。</li></ul><p><strong>3.求数组[2,6,1,77,52,25,7]中的最大值</strong></p><ul><li>①声明一个保存最大元素的变量 max。</li><li>②默认最大值可以取数组中的第一个元素。</li><li>③遍历这个数组，把里面每个数组元素和 max 相比较。</li><li>④如果这个数组元素大于max 就把这个数组元素存到 max 里面，否则继续下一轮比较。</li><li>⑤最后输出这个 max。</li></ul><p><strong>4.将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 里面的元素转换为字符串</strong></p><p>思路：就是把里面的元素相加就好了，但是注意保证是字符相加</p><ul><li>①需要一个新变量 str 用于存放转换完的字符串。</li><li>②遍历原来的数组，分别把里面数据取出来，加到字符串变量 str 里面。</li></ul><p><strong>5.将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 转换为字符串，并且用 | 或其他符号分割</strong></p><ul><li>①需要一个新变量用于存放转换完的字符串 str。</li><li>①遍历原来的数组，分别把里面数据取出来，加到字符串里面。</li><li>①同时在后面多加一个分隔符。</li></ul><h2 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h2><h3 id="①通过修改-length-长度新增数组元素"><a href="#①通过修改-length-长度新增数组元素" class="headerlink" title="①通过修改 length 长度新增数组元素"></a>①通过修改 length 长度新增数组元素</h3><ul><li>可以通过修改 length 长度来实现数组扩容的目的</li><li>length 属性是可读写的</li></ul><p>其中索引号是 4，5，6 的空间没有给值，就是声明变量未给值，默认值就是 <strong>undefined</strong></p><h3 id="②通过修改数组索引新增数组元素"><a href="#②通过修改数组索引新增数组元素" class="headerlink" title="②通过修改数组索引新增数组元素"></a>②通过修改数组索引新增数组元素</h3><ul><li>可以通过修改数组索引的方式追加数组元素</li><li>不能直接给数组名赋值，否则会覆盖掉以前的数据</li><li>这种方式也是我们最常用的一种方式</li></ul><h2 id="数组中新增元素-1"><a href="#数组中新增元素-1" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h2><p><strong>1.新建一个数组，里面存放10个整数（ 1~10）， 要求使用循环追加的方式输出： [1,2,3,4,5,6,7,8,9,10]</strong></p><ul><li>①使用循环来追加数组。</li><li>②声明一个空数组 arr。</li><li>③循环中的计数器 i 可以作为数组元素存入。</li><li>由于数组的索引号是从0开始的， 因此计数器从 0 开始更合适，存入的数组元素要+1。</li></ul><p><strong>2.将数组 [2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组</strong></p><ul><li>①声明一个新的数组用于存放新数据。</li><li>②遍历原来的数组，找出大于等于 10 的元素。</li><li>③依次追加给新数组 newArr。</li></ul><p>实现代码1：</p><p>实现代码2：</p><h2 id="删除指定数组元素"><a href="#删除指定数组元素" class="headerlink" title="删除指定数组元素"></a>删除指定数组元素</h2><p><strong>将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中的 0 去掉后，形成一个不包含 0 的新数组。</strong></p><h2 id="翻转数组"><a href="#翻转数组" class="headerlink" title="翻转数组"></a>翻转数组</h2><p><strong>将数组 [‘red’, ‘green’, ‘blue’, ‘pink’, ‘purple’] 的内容反过来存放</strong></p><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><p>冒泡排序</p><p>将数组 [5, 4, 3, 2, 1]中的元素按照从小到大的顺序排序，输出： 1，2，3，4，5   </p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript提高班之ES6(七)</title>
      <link href="/myblog.github.io/2022/04/24/JavaScript%E6%8F%90%E9%AB%98%E7%8F%AD%E4%B9%8BES6(%E4%B8%83)/"/>
      <url>/myblog.github.io/2022/04/24/JavaScript%E6%8F%90%E9%AB%98%E7%8F%AD%E4%B9%8BES6(%E4%B8%83)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaScript提高班之ES6-七"><a href="#JavaScript提高班之ES6-七" class="headerlink" title="JavaScript提高班之ES6(七)"></a>JavaScript提高班之ES6(七)</h1><h1 id="✍JavaScript帝国之行🔥"><a href="#✍JavaScript帝国之行🔥" class="headerlink" title="✍JavaScript帝国之行🔥"></a>✍JavaScript帝国之行🔥</h1><h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><p><img src="https://img-blog.csdnimg.cn/217fe88037bf47a394f147a8de0971f0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="1、严格模式"><a href="#1、严格模式" class="headerlink" title="1、严格模式"></a>1、严格模式</h1><ul><li>JavaScript 除了提供正常模式外，还提供了严格模式</li><li>ES5 的严格模式是采用具有限制性 JavaScript 变体的一种方式，即在严格的条件下运行 JS 代码</li><li>严格模式在IE10 以上版本的浏览器才会被支持，旧版本浏览器会被忽略</li><li>严格模式对正常的JavaScript语义做了一些更改：   <ul><li>消除了Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行的安全</li><li>提高编译器效率，增加运行速度</li><li>禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class, enum, export, extends, import, super 不能做变量名</li></ul></li></ul><h2 id="1-1、开启严格模式"><a href="#1-1、开启严格模式" class="headerlink" title="1.1、开启严格模式"></a>1.1、开启严格模式</h2><ul><li>严格模式可以应用到整个脚本或个别函数中。</li><li>因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况</li></ul><h3 id="1-1-2、为脚本开启严格模式"><a href="#1-1-2、为脚本开启严格模式" class="headerlink" title="1.1.2、为脚本开启严格模式"></a>1.1.2、为脚本开启严格模式</h3><ul><li>为整个脚本文件开启严格模式，需要在所有语句之前放一个特定语句</li><li><code>&quot;use strict&quot;</code> 或<code>&#39;use strict&#39;</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="string">&#x27;user strict&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是严格模式。&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为<code>&quot;use strict&quot;</code>加了引号，所以老版本的浏览器会把它当作一行普通字符串而忽略。</p><p>有的 script 基本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他 script 脚本文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">     <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;)();   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-1-2、为函数开启严格模式"><a href="#1-1-2、为函数开启严格模式" class="headerlink" title="1.1.2、为函数开启严格模式"></a>1.1.2、为函数开启严格模式</h3><ul><li>若要给某个函数开启严格模式，需要把<code>&quot;use strict&quot;</code>或<code>&#39;use strict&#39;</code>声明放在函数体所有语句之前</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 为整个脚本(script标签)开启严格模式 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript"><span class="language-xml">        &#x27;use strict&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//   下面的js 代码就会按照严格模式执行代码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;use strict&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;!-- 为某个函数开启严格模式 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 此时只是给fn函数开启严格模式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;use strict&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 下面的代码按照严格模式执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 里面的还是按照普通模式执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>将<code>&quot;use strict&quot;</code> 放在函数体的第一行，则整个函数以 “严格模式”运行。</li></ul><h1 id="2、严格模式中的变化"><a href="#2、严格模式中的变化" class="headerlink" title="2、严格模式中的变化"></a>2、严格模式中的变化</h1><ul><li>严格模式对JavaScript的语法和行为，都做了一些改变</li></ul><h2 id="2-1、变量规定"><a href="#2-1、变量规定" class="headerlink" title="2.1、变量规定"></a>2.1、变量规定</h2><ul><li>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量</li><li>严格模式禁止这种用法，变量都必须先用var 命令声明，然后再使用</li><li>严禁删除已经声明变量，例如，``delete x` 语法是错误的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 我们的变量名必须先声明再使用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// num = 10;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(num);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> num = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.我们不能随意删除已经声明好的变量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// delete num;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、严格模式下this指向问题"><a href="#2-2、严格模式下this指向问题" class="headerlink" title="2.2、严格模式下this指向问题"></a>2.2、严格模式下this指向问题</h2><ol><li>以前在全局作用域函数中的<code>this</code>指向<code>window</code>对象</li><li>严格模式下全局作用域中函数中的<code>this</code> 是 undefined</li><li>以前构造函数时不加 <code>new</code> 也可以调用，当普通函数，<code>this</code>指向全局对象</li><li>严格模式下，如果构造函数不加 <code>new</code> 调用，<code>this</code>指向的是 <code>undefined</code> ，如果给它赋值，会报错</li><li><code>new</code> 实例化的构造函数指向创建的对象实例</li><li>定时器<code>this</code> 还是指向<code>window</code></li><li>事件、对象还是指向调用者</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">        &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//3. 严格模式下全局作用域中函数中的 this 是 undefined。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// undefined。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4. 严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Star();</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sex</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//5. 定时器 this 还是指向 window </span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3、函数变化"><a href="#2-3、函数变化" class="headerlink" title="2.3、函数变化"></a>2.3、函数变化</h2><ol><li>函数不能有重名的<strong>参数</strong></li><li>函数必须声明在顶层，新版本的JavaScript会引入“块级作用域”（ES6中已引入）。为了与新版本接轨，<strong>不允许在非函数的代码块内声明函数</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript"><span class="language-xml">        &#x27;use strict&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 6. 严格模式下函数里面的参数不允许有重名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, a</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="variable language_">console</span>.<span class="title function_">log</span>(a + a);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// fn(1, 2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="3、高阶函数"><a href="#3、高阶函数" class="headerlink" title="3、高阶函数"></a>3、高阶函数</h1><ul><li>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出</li></ul><p>接收函数作为参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 高阶函数- 函数可以作为参数传递</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span></span><br><span class="line"><span class="language-javascript">            callback &amp;&amp; <span class="title function_">callback</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是最后调用的&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将函数作为返回值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>此时 fn 就是一个高阶函数</li><li>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为回调函数</li><li>同理函数也可以作为返回值传递回来</li></ul><h1 id="4、闭包"><a href="#4、闭包" class="headerlink" title="4、闭包"></a>4、闭包</h1><h2 id="4-1、变量作用域"><a href="#4-1、变量作用域" class="headerlink" title="4.1、变量作用域"></a>4.1、变量作用域</h2><p>变量根据作用域的不同分为两种：全局变量和局部变量</p><ol><li>函数内部可以使用全局变量</li><li>函数外部不可以使用局部变量</li><li>当函数执行完毕，本作用域内的局部变量会销毁。</li></ol><h2 id="4-2、什么是闭包"><a href="#4-2、什么是闭包" class="headerlink" title="4.2、什么是闭包"></a>4.2、什么是闭包</h2><p>闭包指有权访问另一个函数作用域中的变量的函数</p><p>简单理解：一个作用域可以访问另外一个函数内部的局部变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 闭包（closure）指有权访问另一个函数作用域中变量的函数。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 闭包: 我们fn2 这个函数作用域 访问了另外一个函数 fn1 里面的局部变量 num</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;<span class="comment">// fn1就是闭包函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> num = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//10</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fn2</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fn1</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3、在chrome中调试闭包"><a href="#4-3、在chrome中调试闭包" class="headerlink" title="4.3、在chrome中调试闭包"></a>4.3、在chrome中调试闭包</h2><ol><li>打开浏览器，按 F12 键启动 chrome 调试工具。</li><li>设置断点。</li><li>找到 Scope 选项（Scope 作用域的意思）。</li><li>当我们重新刷新页面，会进入断点调试，Scope 里面会有两个参数（global 全局作用域、local 局部作用域）。</li><li>当执行到 fn2() 时，Scope 里面会多一个 Closure 参数 ，这就表明产生了闭包。</li></ol><p><img src="https://img-blog.csdnimg.cn/487a2da725794758b4e1e2cf54c1aa18.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="4-4、闭包的作用"><a href="#4-4、闭包的作用" class="headerlink" title="4.4、闭包的作用"></a>4.4、闭包的作用</h2><ul><li>延伸变量的作用范围</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 闭包（closure）指有权访问另一个函数作用域中变量的函数。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 一个作用域可以访问另外一个函数的局部变量 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 我们fn 外面的作用域可以访问fn 内部的局部变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 闭包的主要作用: 延伸了变量的作用范围</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> num = <span class="number">10</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> f = <span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">f</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="4-5、闭包练习"><a href="#4-5、闭包练习" class="headerlink" title="4.5、闭包练习"></a>4.5、闭包练习</h2><h3 id="4-5-1、点击li输出索引号"><a href="#4-5-1、点击li输出索引号" class="headerlink" title="4.5.1、点击li输出索引号"></a>4.5.1、点击li输出索引号</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>臭豆腐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>鲱鱼罐头<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>大猪蹄子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 闭包应用-点击li输出当前li的索引号</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 我们可以利用动态添加属性的方式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">index</span> = i;</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(i);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">index</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 利用闭包的方式得到当前小li 的索引号</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 利用for循环创建了4个立即执行函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span></span><br><span class="line"><span class="language-javascript">            (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(i);</span></span></span><br><span class="line"><span class="language-javascript">                lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)(i);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1d0b66c23bae4baabc2f014fc939c812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="4-5-2、定时器中的闭包"><a href="#4-5-2、定时器中的闭包" class="headerlink" title="4.5.2、定时器中的闭包"></a>4.5.2、定时器中的闭包</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>臭豆腐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>鲱鱼罐头<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>大猪蹄子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 闭包应用-3秒钟之后,打印所有li元素的内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i].<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;)(i);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bf8930961044466f966d04b802286cf5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="5、递归"><a href="#5、递归" class="headerlink" title="5、递归"></a>5、递归</h1><p><strong>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数</strong></p><p>简单理解： 函数内部自己调用自己，这个函数就是递归函数</p><p>由于递归很容易发生”栈溢出”错误，所以必须要加退出条件 return</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 递归函数 : 函数内部自己调用自己, 这个函数就是递归函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> num = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我要打印6句话&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (num == <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>; <span class="comment">// 递归里面必须加退出条件</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            num++;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6、浅拷贝和深拷贝"><a href="#6、浅拷贝和深拷贝" class="headerlink" title="6、浅拷贝和深拷贝"></a>6、浅拷贝和深拷贝</h1><ol><li>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用</li><li>深拷贝拷贝多层，每一级别的数据都会拷贝</li><li><code>Object.assign(target,....sources)</code> ES6新增方法可以浅拷贝</li></ol><h2 id="6-1、浅拷贝"><a href="#6-1、浅拷贝" class="headerlink" title="6.1、浅拷贝"></a>6.1、浅拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="comment">// k是属性名，obj[k]是属性值</span></span><br><span class="line">    o[k] = obj[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line"><span class="comment">// 浅拷贝语法糖</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(o,obj);</span><br></pre></td></tr></table></figure><h2 id="6-2、深拷贝"><a href="#6-2、深拷贝" class="headerlink" title="6.2、深拷贝"></a>6.2、深拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝拷贝多层，每一级别的数据都会拷贝</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;red&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 封装函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newobj,oldobj</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> oldobj)&#123;</span><br><span class="line">        <span class="comment">// 判断属性值属于简单数据类型还是复杂数据类型</span></span><br><span class="line">        <span class="comment">// 1.获取属性值   oldobj[k]</span></span><br><span class="line">        <span class="keyword">var</span> item = oldobj[k];</span><br><span class="line">        <span class="comment">// 2.判断这个值是否是数组</span></span><br><span class="line">        <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="title class_">Array</span>)&#123;</span><br><span class="line">            newobj[k] = [];</span><br><span class="line">            <span class="title function_">deepCopy</span>(newobj[k],item)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Object</span>)&#123;</span><br><span class="line">              <span class="comment">// 3.判断这个值是否是对象</span></span><br><span class="line">            newobj[k] = &#123;&#125;;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newobj[k],item)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 4.属于简单数据类型</span></span><br><span class="line">            newobj[k] = item;</span><br><span class="line">            </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">deepCopy</span>(o,obj);</span><br></pre></td></tr></table></figure><h1 id="7、-正则表达式"><a href="#7、-正则表达式" class="headerlink" title="7、 正则表达式"></a>7、 正则表达式</h1><p>正则表达式是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p><p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线，  昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p><h2 id="7-1、特点"><a href="#7-1、特点" class="headerlink" title="7.1、特点"></a>7.1、特点</h2><ul><li>实际开发，一般都是直接复制写好的正则表达式</li><li>但是要求会使用正则表达式并且根据自身实际情况修改正则表达式</li></ul><h2 id="7-2、创建正则表达式"><a href="#7-2、创建正则表达式" class="headerlink" title="7.2、创建正则表达式"></a>7.2、创建正则表达式</h2><p>在JavaScript中，可以通过两种方式创建正则表达式</p><ol><li>通过调用 RegExp 对象的构造函数创建</li><li>通过字面量创建</li></ol><h3 id="7-2-1、通过调用-RegExp-对象的构造函数创建"><a href="#7-2-1、通过调用-RegExp-对象的构造函数创建" class="headerlink" title="7.2.1、通过调用 RegExp 对象的构造函数创建"></a>7.2.1、通过调用 RegExp 对象的构造函数创建</h3><p>通过调用 RegExp 对象的构造函数创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/表达式/</span>);</span><br></pre></td></tr></table></figure><h3 id="7-2-2、通过字面量创建"><a href="#7-2-2、通过字面量创建" class="headerlink" title="7.2.2、通过字面量创建"></a>7.2.2、通过字面量创建</h3><p>通过字面量创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="regexp">/表达式/</span>;</span><br></pre></td></tr></table></figure><p>注释中间放表达式就是正则字面量</p><h3 id="7-2-3、测试正则表达式-test"><a href="#7-2-3、测试正则表达式-test" class="headerlink" title="7.2.3、测试正则表达式 test"></a>7.2.3、测试正则表达式 test</h3><ul><li><code>test()</code>正则对象方法，用于检测字符串是否符合该规则，该对象会返回<code>true</code>或<code>false</code>,其参数是测试字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regexObj.<span class="title function_">test</span>(str)</span><br></pre></td></tr></table></figure><ul><li><code>regexObj</code> 写的是正则表达式</li><li><code>str</code> 我们要测试的文本</li><li>就是检测<code>str</code>文本是否符合我们写的正则表达式规范</li></ul><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 正则表达式在js中的使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 利用 RegExp对象来创建 正则表达式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/123/</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(regexp);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 利用字面量创建 正则表达式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3.test 方法用来检测字符串是否符合正则表达式要求的规范</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="number">123</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="7-3、正则表达式中的特殊在字符"><a href="#7-3、正则表达式中的特殊在字符" class="headerlink" title="7.3、正则表达式中的特殊在字符"></a>7.3、正则表达式中的特殊在字符</h2><h3 id="7-3-1、边界符"><a href="#7-3-1、边界符" class="headerlink" title="7.3.1、边界符"></a>7.3.1、边界符</h3><p>正则表达式中的边界符(位置符)用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><p>如果^ 和 $ 在一起，表示必须是精确匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 边界符 ^ $</span></span><br><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/abc/</span>;   <span class="comment">//正则表达式里面不需要加引号，不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">// /abc/只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^abc$/</span></span><br><span class="line"><span class="comment">// 以abc开头，以abc结尾，必须是abc</span></span><br></pre></td></tr></table></figure><h3 id="7-3-2、字符类"><a href="#7-3-2、字符类" class="headerlink" title="7.3.2、字符类"></a>7.3.2、字符类</h3><ul><li>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了</li><li>所有可供选择的字符都放在方括号内</li></ul><h4 id="①-方括号"><a href="#①-方括号" class="headerlink" title="①[] 方括号"></a>①[] 方括号</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[abc]/.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>);     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>后面的字符串只要包含 <code>abc</code> 中任意一个字符,都返回<code>true</code></p><h4 id="②-方括号内部-范围符"><a href="#②-方括号内部-范围符" class="headerlink" title="②[-]方括号内部 范围符"></a>②[-]方括号内部 范围符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-z]$/.<span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><p>方括号内部加上 - 表示范围，这里表示 a - z 26个英文字母都可以</p><h4 id="③-方括号内部-取反符"><a href="#③-方括号内部-取反符" class="headerlink" title="③[^] 方括号内部 取反符 ^"></a>③[^] 方括号内部 取反符 ^</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[^abc]/.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>)   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 <code>false</code></p><p>注意和边界符 ^ 区别，边界符写到方括号外面</p><h4 id="④字符组合"><a href="#④字符组合" class="headerlink" title="④字符组合"></a>④字符组合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[a-z1-<span class="number">9</span>]/.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>)    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>方括号内部可以使用字符组合，这里表示包含 a 到 z的26个英文字母和1到9的数字都可以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//var rg = /abc/;  只要包含abc就可以 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 字符类: [] 表示有一系列字符可供选择，只要匹配其中一个就可以了</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>; <span class="comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;baby&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;color&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;red&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> rg1 = <span class="regexp">/^[abc]$/</span>; <span class="comment">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span>; <span class="comment">// 26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;z&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 字符组合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9_-]$/</span>; <span class="comment">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;B&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="number">8</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;-&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;_&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;!&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果中括号里面有^ 表示取反的意思 千万和 我们边界符 ^ 别混淆</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg2 = <span class="regexp">/^[^a-zA-Z0-9_-]$/</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;B&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="number">8</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;-&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;_&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;!&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-3、量词符"><a href="#7-3-3、量词符" class="headerlink" title="7.3.3、量词符"></a>7.3.3、量词符</h3><p>量词符用来设定某个模式出现的次数</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 量词符: 用来设定某个模式出现的次数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 简单理解: 就是让下面的a这个字符重复多少次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var reg = /^a$/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  * 相当于 &gt;= 0 可以出现0次或者很多次 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var reg = /^a*$/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;a&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;aaaa&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  + 相当于 &gt;= 1 可以出现1次或者很多次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var reg = /^a+$/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;&#x27;)); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;a&#x27;)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;aaaa&#x27;)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  ?  相当于 1 || 0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var reg = /^a?$/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;&#x27;)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;a&#x27;)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;aaaa&#x27;)); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  &#123;3 &#125; 就是重复3次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var reg = /^a&#123;3&#125;$/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;&#x27;)); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;a&#x27;)); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;aaaa&#x27;)); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;aaa&#x27;)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  &#123;3, &#125;  大于等于3</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,&#125;$/</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>)); <span class="comment">// true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  &#123;3,16&#125;  大于等于3 并且 小于等于16</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,6&#125;$/</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>)); <span class="comment">// true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaaaaa&#x27;</span>)); <span class="comment">// false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="7-3-4、用户名验证"><a href="#7-3-4、用户名验证" class="headerlink" title="7.3.4、用户名验证"></a>7.3.4、用户名验证</h3><p>功能需求：</p><ol><li>如果用户名输入合法, 则后面提示信息为 : 用户名合法,并且颜色为绿色</li><li>如果用户名输入不合法, 则后面提示信息为: 用户名不符合规范, 并且颜色为绿色</li></ol><p>分析：</p><ol><li>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为 6~16位.</li><li>首先准备好这种正则表达式模式 /$[a-zA-Z0-9-_]{6,16}^/</li><li>当表单失去焦点就开始验证.</li><li>如果符合正则规范, 则让后面的span标签添加 right 类.</li><li>如果不符合正则规范, 则让后面的span标签添加 wrong 类.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;uname&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  量词是设定某个模式出现的次数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>; <span class="comment">// 这个模式用户只能输入英文字母 数字 下划线 短横线但是有边界符和[] 这就限定了只能多选1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#123;6,16&#125;  中间不要有空格</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(reg.test(&#x27;a&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(reg.test(&#x27;8&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(reg.test(&#x27;18&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(reg.test(&#x27;aa&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(&#x27;-------------&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(reg.test(&#x27;andy-red&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(reg.test(&#x27;andy_red&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(reg.test(&#x27;andy007&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(reg.test(&#x27;andy!007&#x27;));</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> uname = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.uname&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        uname.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正确的&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                span.<span class="property">className</span> = <span class="string">&#x27;right&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                span.<span class="property">innerHTML</span> = <span class="string">&#x27;用户名格式输入正确&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误的&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                span.<span class="property">className</span> = <span class="string">&#x27;wrong&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                span.<span class="property">innerHTML</span> = <span class="string">&#x27;用户名格式输入不正确&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-4、括号总结"><a href="#7-4、括号总结" class="headerlink" title="7.4、括号总结"></a>7.4、括号总结</h2><ol><li>大括号 量词符 里面面表示重复次数</li><li>中括号 字符集合 匹配方括号中的任意字符</li><li>小括号 表示优先级</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中括号 字符集合 匹配方括号中的任意字符</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[abc]$/</span>;</span><br><span class="line"><span class="comment">// a || b || c</span></span><br><span class="line"><span class="comment">// 大括号 量词符 里面表示重复次数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc&#123;3&#125;$/</span>;   <span class="comment">// 它只是让c 重复3次 abccc</span></span><br><span class="line"><span class="comment">// 小括号 表示优先级</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(abc)&#123;3&#125;$/</span>;  <span class="comment">//它是让 abc 重复3次</span></span><br></pre></td></tr></table></figure><p>在线测试正则表达式：<a href="https://c.runoob.com/">https://c.runoob.com/</a></p><h2 id="7-5、预定义类"><a href="#7-5、预定义类" class="headerlink" title="7.5、预定义类"></a>7.5、预定义类</h2><p>预定义类指的是 某些常见模式的简写写法</p><table><thead><tr><th>预定类</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配0-9之间的任一数字，相当于[0-9]</td></tr><tr><td>\D</td><td>匹配所有0-9以外的字符，相当于[ ^ 0-9]</td></tr><tr><td>\w</td><td>匹配任意的字母、数字和下划线,相当于[A-Za-z0-9_ ]</td></tr><tr><td>\W</td><td>除所有字母、数字、和下划线以外的字符，相当于[ ^A-Za-z0-9_ ]</td></tr><tr><td>\s</td><td>匹配空格（包括换行符，制表符，空格符等），相当于[\t\t\n\v\f]</td></tr><tr><td>\S</td><td>匹配非空格的字符，相当于[ ^ \t\r\n\v\f]</td></tr></tbody></table><h3 id="7-5-1、表单验证"><a href="#7-5-1、表单验证" class="headerlink" title="7.5.1、表单验证"></a>7.5.1、表单验证</h3><p>分析：</p><p>1.手机号码: <code>/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</code></p><p>2.QQ: <code>[1-9][0-9]&#123;4,&#125;</code> (腾讯QQ号从10000开始)</p><p>3.昵称是中文: <code>^[\u4e00-\u9fa5]&#123;2,8&#125;$</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 座机号码验证:  全国座机号码  两种格式:   010-12345678  或者  0530-1234567</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 正则里面的或者 符号  |  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var reg = /^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-6、正则表达式中的替换"><a href="#7-6、正则表达式中的替换" class="headerlink" title="7.6、正则表达式中的替换"></a>7.6、正则表达式中的替换</h2><h3 id="7-6-1、replace-替换"><a href="#7-6-1、replace-替换" class="headerlink" title="7.6.1、replace 替换"></a>7.6.1、replace 替换</h3><p><code>replace()</code>方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.<span class="title function_">replace</span>(regexp/substr,replacement)</span><br></pre></td></tr></table></figure><ol><li>第一个参数: 被替换的字符串或者正则表达式</li><li>第二个参数：替换为的字符串</li><li>返回值是一个替换完毕的新字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换 replace</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy和red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="string">&#x27;andy&#x27;</span>,<span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="regexp">/andy/</span>,<span class="string">&#x27;baby&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="7-6-2、正则表达式参数"><a href="#7-6-2、正则表达式参数" class="headerlink" title="7.6.2、正则表达式参数"></a>7.6.2、正则表达式参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/表达式/[<span class="keyword">switch</span>]</span><br></pre></td></tr></table></figure><p><code>switch</code>按照什么样的模式来匹配，有三种</p><ul><li><code>g</code>: 全局匹配</li><li><code>i</code>:忽略大小写</li><li><code>gi</code>: 全局匹配 + 忽略大小写</li></ul><p>​         </p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶班之BOM技术(五)</title>
      <link href="/myblog.github.io/2022/04/24/JavaScript%E8%BF%9B%E9%98%B6%E7%8F%AD%E4%B9%8BBOM%E6%8A%80%E6%9C%AF(%E4%BA%94)/"/>
      <url>/myblog.github.io/2022/04/24/JavaScript%E8%BF%9B%E9%98%B6%E7%8F%AD%E4%B9%8BBOM%E6%8A%80%E6%9C%AF(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><p><img src="https://img-blog.csdnimg.cn/0f44250c831e4579aa3599072c855aeb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="BOM概述"><a href="#BOM概述" class="headerlink" title="BOM概述"></a>BOM概述</h1><ul><li>BOM = Browser Object Model 👉浏览器对象模型</li><li>它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window</li><li>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性</li><li>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA, DOM 的标准化组织是 W3C, BOM最初是Netscape 浏览器标准的一部分</li></ul><table><thead><tr><th>DOM</th><th>BOM</th></tr></thead><tbody><tr><td>文档对象模型</td><td>浏览器对象模型</td></tr><tr><td>DOM 就是把 文档 当作一个对象来看待</td><td>把 浏览器当作一个对象来看待</td></tr><tr><td>DOM 的顶级对象是 document</td><td>BOM 的顶级对象是 window</td></tr><tr><td>DOM 主要学习的是操作页面元素</td><td>BOM 学习的是浏览器窗口交互的一些对象</td></tr><tr><td>DOM 是 W3C 标准规范</td><td>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</td></tr></tbody></table><h2 id="BOM的构成"><a href="#BOM的构成" class="headerlink" title="BOM的构成"></a>BOM的构成</h2><p><img src="https://img-blog.csdnimg.cn/5c83bf307ec9486687a5f52312943ecb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>BOM 比 DOM 更大。它包含 DOM。</li><li>window 对象是浏览器的顶级对象，它具有双重角色</li><li>它是 JS 访问浏览器窗口的一个接口</li><li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法</li><li>在调用的时候可以省略 window，前面学习的对话框都属于 window 对象方法，如 <code>alert()、prompt()</code>等。</li><li><strong>注意</strong>：window下的一个特殊属性 window.name</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义在全局作用域中的变量会变成window对象的属性</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">num</span>);</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义在全局作用域中的函数会变成window对象的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>());</span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="number">10</span>;  <span class="comment">//不要用这个name变量,window下有一个特殊属性window.name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">num</span>);</span><br></pre></td></tr></table></figure><h1 id="window-对象的常见事件"><a href="#window-对象的常见事件" class="headerlink" title="window 对象的常见事件"></a>window 对象的常见事件</h1><h2 id="窗口加载事件"><a href="#窗口加载事件" class="headerlink" title="窗口加载事件"></a>窗口加载事件</h2><p><code>window.onload</code>是窗口（页面）加载事件，当文档内容完全加载完成会触发该事件（包括图像，脚本文件，CSS文件等），就调用的处理函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>有了<code>window.onload</code>就可以把JS代码写到页面元素的上方</li><li>因为<code>onload</code>是等页面内容全部加载完毕，再去执行处理函数</li><li><code>window.onload</code> 传统注册事件方式，只能写一次</li><li>如果有多个，会以最后一个<code>window.onload</code>为准</li><li><strong>如果使用addEventListener 则没有限制</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><p>接收两个参数：</p><ul><li>DOMCountentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等</li><li>如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间</li><li>交互效果就不能实现，必然影响用户的体验，此时用 <code>DOMContentLoaded</code>事件比较合适。</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><code>load</code>等页面内容全部加载完毕，包括页面dom元素，图片，flash，css等</li><li><code>DOMContentLoaded</code> 是DOM加载完毕，不包含图片 flash css 等就可以执行，加载速度比load更快一些</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// window.onload = function() &#123;</span></span><br><span class="line">    <span class="comment">//     var btn = document.querySelector(&#x27;button&#x27;);</span></span><br><span class="line">    <span class="comment">//     btn.addEventListener(&#x27;click&#x27;, function() &#123;</span></span><br><span class="line">    <span class="comment">//         alert(&#x27;点击我&#x27;);</span></span><br><span class="line">    <span class="comment">//     &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// window.onload = function() &#123;</span></span><br><span class="line">    <span class="comment">//     alert(22);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="number">33</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等</span></span><br><span class="line">        <span class="comment">// DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h2><p><code>window.onresize</code> 是调整窗口大小加载事件，当触发时就调用的处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>只要窗口大小发生像素变化，就会触发这个事件</li><li>我们经常利用这个事件完成响应式布局。<code>window.innerWidth</code> 当前屏幕的宽度</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">innerWidth</span> &lt;= <span class="number">800</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>window 对象给我们提供了两个定时器</p><ul><li><code>setTimeout()</code></li><li><code>setInterval()</code></li></ul><h2 id="setTimeout-定时器"><a href="#setTimeout-定时器" class="headerlink" title="setTimeout()定时器"></a>setTimeout()定时器</h2><p><code>setTimeout()</code>方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(调用函数,[延迟的毫秒数]);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>window</code>可以省略</li><li>这个调用函数   <ul><li>可以直接写函数</li><li>或者写函数名</li><li>或者采取字符串 <strong>‘函数名()’</strong> （不推荐）</li></ul></li><li>延迟的毫秒数省略默认是0，如果写，必须是毫秒</li><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</li><li><code>setTimeout()</code> 这个调用函数我们也称为<strong>回调函数</strong> callback</li><li>普通函数是按照代码顺序直接调用，而这个函数，需要等待事件，事件到了才会去调用这个函数，因此称为回调函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. setTimeout </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 语法规范：  window.setTimeout(调用函数, 延时时间);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 这个window在调用的时候可以省略</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 这个延时时间单位是毫秒 但是可以省略，如果省略默认的是0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 &#x27;函数名()&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 4. 页面中可能有很多的定时器，我们经常给定时器加标识符 （名字)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// setTimeout(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     console.log(&#x27;时间到了&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;, 2000);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(callback, <span class="number">3000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> timer2 = <span class="built_in">setTimeout</span>(callback, <span class="number">5000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// setTimeout(&#x27;callback()&#x27;, 3000); // 我们不提倡这个写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="clearTimeout-停止定时器"><a href="#clearTimeout-停止定时器" class="headerlink" title="clearTimeout()停止定时器"></a>clearTimeout()停止定时器</h2><ul><li><code>clearTimeout()</code>方法取消了先前通过调用 <code>setTimeout()</code>建立的定时器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(timeoutID)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>window</code>可以省略</li><li>里面的参数就是定时器的标识符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击停止定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">5000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="built_in">clearTimeout</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval()定时器"></a>setInterval()定时器</h2><ul><li><code>setInterval()</code>方法重复调用一个函数，每隔这个时间，就去调用一次回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setInterval</span>(回调函数,[间隔的毫秒数]);</span><br></pre></td></tr></table></figure><ul><li><code>window</code>可以省略</li><li>这个回调函数:   <ul><li>可以直接写函数</li><li>或者写函数名</li><li>或者采取字符 ‘函数名()’</li></ul></li><li>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. setInterval </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 语法规范：  window.setInterval(调用函数, 延时时间);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继续输出&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. setTimeout  延时时间到了，就去调用这个回调函数，只调用一次 就结束了这个定时器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. setInterval  每隔这个延时时间，就去调用这个回调函数，会调用很多次，重复调用这个函数</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="clearInterval-停止定时器"><a href="#clearInterval-停止定时器" class="headerlink" title="clearInterval()停止定时器"></a>clearInterval()停止定时器</h2><ul><li><code>clearInterval ( )</code> 方法取消了先前通过调用 <code>setInterval()</code> 建立的定时器</li></ul><p><strong>注意</strong>：</p><ul><li><code>window</code>可以省略</li><li>里面的参数就是定时器的标识符</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;begin&quot;</span>&gt;</span>开启定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;stop&quot;</span>&gt;</span>停止定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> begin = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.begin&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> stop = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.stop&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer = <span class="literal">null</span>; <span class="comment">// 全局变量  null是一个空对象</span></span></span><br><span class="line"><span class="language-javascript">        begin.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ni hao ma&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        stop.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><ul><li><code>this</code>的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定<code>this</code>到底指向谁</li></ul><p>现阶段，我们先了解一下几个this指向</p><ul><li>全局作用域或者普通函数中<code>this</code>指向全局对象<code>window</code>(注意定时器里面的this指向window)</li><li>方法调用中谁调用<code>this</code>指向谁</li><li>构造函数中<code>this</code>指向构造函数实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 方法调用中谁调用this指向谁</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是 o 这个对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        o.<span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// btn.onclick = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(this); // this指向的是btn这个按钮对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是btn这个按钮对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. 构造函数中this指向构造函数的实例</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this 指向的是fun 实例对象</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h1><h2 id="JS是单线程"><a href="#JS是单线程" class="headerlink" title="JS是单线程"></a>JS是单线程</h2><ul><li>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</li><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</li></ul><h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>以下代码执行的结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>那么以下代码执行的结果又是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><ul><li><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程</p></li><li><p>于是，JS 中出现了同步和异步。</p></li><li><p>同步</p><p>:   </p><ul><li>前一个任务结束后再执行后一个任务</li></ul></li><li><p>异步</p><p>：   </p><ul><li>在做这件事的同时，你还可以去处理其他事情</li></ul></li></ul><blockquote><p>同步任务</p></blockquote><ul><li>同步任务都在主线程上执行，形成一个 执行栈</li></ul><blockquote><p>异步任务</p></blockquote><ul><li>JS中的异步是通过回调函数实现的</li><li>异步任务有以下三种类型   <ul><li>普通事件，如<code>click</code>,<code>resize</code>等</li><li>资源加载，如<code>load</code>,<code>error</code>等</li><li>定时器，包括<code>setInterval</code>,<code>setTimeout</code>等</li></ul></li><li>异步任务相关回调函数添加到任务队列中</li></ul><p><img src="https://img-blog.csdnimg.cn/f0cc815b48574ce2bb068501a9394a5e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>先执行执行栈中的同步任务</li><li>异步任务(回调函数)放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><p><img src="https://img-blog.csdnimg.cn/d337ebf7ba2c40c7a768fd91f6bfbf56.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>此时再来看我们刚才的问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>执行的结果和顺序为 1、2、3</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>执行的结果和顺序为 1、2、3</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 第三个问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/eaabe7880146428fb68e6e64f23db40c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>同步任务放在执行栈中执行，异步任务由异步进程处理放到任务队列中，执行栈中的任务执行完毕会去任务队列中查看是否有异步任务执行，由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）。</p><h1 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h1><ul><li>window 对象给我们提供了一个 <code>location</code>属性用于获取或者设置窗体的url，并且可以解析url。因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</li></ul><h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><p>==统一资源定位符（uniform resouce locator）==是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><p>url 的一般语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protocol://host[:port]/path/[?query]#fragment</span><br><span class="line"></span><br><span class="line">http://www.itcast.cn/index.html?name=andy&amp;age=18#link</span><br></pre></td></tr></table></figure><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>通信协议 常用的http,ftp,maito等</td></tr><tr><td>host</td><td>主机(域名) <a href="http://www.itheima.com/">www.itheima.com</a></td></tr><tr><td>port</td><td>端口号，可选</td></tr><tr><td>path</td><td>路径 由零或多个<code>&#39;/&#39;</code>符号隔开的字符串</td></tr><tr><td>query</td><td>参数 以键值对的形式，通过<code>&amp;</code>符号分隔开来</td></tr><tr><td>fragment</td><td>片段 <code>#</code>后面内容 常见于链接 锚点</td></tr></tbody></table><h2 id="location对象属性"><a href="#location对象属性" class="headerlink" title="location对象属性"></a>location对象属性</h2><table><thead><tr><th>location对象属性</th><th>返回值</th></tr></thead><tbody><tr><td>location.href</td><td>获取或者设置整个URL</td></tr><tr><td>location.host</td><td>返回主机（域名）<a href="http://www.baidu.com/">www.baidu.com</a></td></tr><tr><td>location.port</td><td>返回端口号，如果未写返回空字符串</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td>location.search</td><td>返回参数</td></tr><tr><td>location.hash</td><td>返回片段 #后面内容常见于链接 锚点</td></tr></tbody></table><p>重点记住： <code>href</code>和<code>search</code></p><p>需求：5s之后跳转页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer = <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (timer == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">innerHTML</span> = <span class="string">&#x27;您将在&#x27;</span> + timer + <span class="string">&#x27;秒钟之后跳转到首页&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                timer--;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="location对象方法"><a href="#location对象方法" class="headerlink" title="location对象方法"></a>location对象方法</h2><table><thead><tr><th>location对象方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>跟href一样，可以跳转页面（也称为重定向页面）</td></tr><tr><td>location.replace()</td><td>替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td>location.reload()</td><td>重新加载页面，相当于刷新按钮或者 f5 ，如果参数为true 强制刷新 ctrl+f5</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 记录浏览历史，所以可以实现后退功能</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// location.assign(&#x27;http://www.itcast.cn&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 不记录浏览历史，所以不可以实现后退功能</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// location.replace(&#x27;http://www.itcast.cn&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            location.<span class="title function_">reload</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取URL参数"><a href="#获取URL参数" class="headerlink" title="获取URL参数"></a>获取URL参数</h2><p>我们简单写一个登录框，点击登录跳转到 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span></span><br><span class="line">        用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来我们写 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>); <span class="comment">// ?uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.先去掉？  substr(&#x27;起始的位置&#x27;，截取几个字符);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">// uname=andy</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 利用=把字符串分割为数组 split(&#x27;=&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr = params.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&quot;uname&quot;, &quot;ANDY&quot;]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.把数据写入div中</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> = arr[<span class="number">1</span>] + <span class="string">&#x27;欢迎您&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样我们就能获取到路径上的URL参数</p><h1 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h1><ul><li>navigator 对象包含有关浏览器的信息，它有很多属性</li><li>我们常用的是<code>userAgent</code>,该属性可以返回由客户机发送服务器的<code>user-agent</code>头部的值</li></ul><p>下面前端代码可以判断用户是用哪个终端打开页面的，如果是用 PC 打开的，我们就跳转到 PC 端的页面，如果是用手机打开的，就跳转到手机端页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//手机</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h1><ul><li>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互</li><li>该对象包含用户（在浏览器窗口中）访问过的 URL。</li></ul><table><thead><tr><th>history对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>可以后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能，参数如果是 1 前进1个页面 如果是 -1 后退1个页面</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;list.html&quot;</span>&gt;</span>点击我去往列表页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// history.forward();</span></span></span><br><span class="line"><span class="language-javascript">            history.<span class="title function_">go</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue全家桶之Vue-router路由(五)</title>
      <link href="/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVue-router%E8%B7%AF%E7%94%B1(%E4%BA%94)/"/>
      <url>/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVue-router%E8%B7%AF%E7%94%B1(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>配套视频讲解: <a href="https://www.bilibili.com/video/BV15741177Eh?from=search&seid=12220650172270950947&spm_id_from=333.337.0.0">CoderWhy老师的Vuejs讲解</a></li></ul><h1 id="✍后端路由阶段"><a href="#✍后端路由阶段" class="headerlink" title="✍后端路由阶段"></a>✍后端路由阶段</h1><p>早期的网站开发整个HTML页面是由服务器来渲染的，服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示.但是, 一个网站, 这么多页面服务器如何处理呢?</p><ul><li>一个页面有自己对应的网址, 也就是URL.</li><li>URL会发送到服务器, 服务器会通过正则对该URL进行匹配, 并且最后交给一个Controller进行处理.</li><li>Controller进行各种处理, 最终生成HTML或者数据, 返回给前端.</li><li>这就完成了一个IO操作.</li></ul><p>上面的这种操作, 就是后端路由</p><ul><li>当我们页面中需要请求不同的<strong>路径</strong>内容时, 交给服务器来进行处理, 服务器渲染好整个页面, 并且将页面返回给客户端</li><li>这种情况下渲染好的页面, 不需要单独加载任何的js和css, 可以直接交给浏览器展示, 这样也有利于SEO的优化.</li></ul><p>后端路由的缺点:</p><ul><li>一种情况是整个页面的模块由后端人员来编写和维护的.</li><li>另一种情况是前端开发人员如果要开发页面, 需要通过PHP和Java等语言来编写页面代码</li><li>而且通常情况下HTML代码和数据以及对应的逻辑会混在一起, 编写和维护都是非常糟糕的事情.</li></ul><h1 id="✍前端路由阶段"><a href="#✍前端路由阶段" class="headerlink" title="✍前端路由阶段"></a>✍前端路由阶段</h1><p>前后端分离阶段：</p><ul><li>随着Ajax的出现, 有了前后端分离的开发模式.</li><li>后端只提供API来返回数据, 前端通过Ajax获取数据, 并且可以通过JavaScript将数据渲染到页面中.</li><li>这样做最大的优点就是前后端责任的清晰, 后端专注于数据上, 前端专注于交互和可视化上.</li></ul><p>前端路由的核心是什么呢？</p><ul><li>改变URL，但是页面不进行整体的刷新。</li></ul><h1 id="Vue-router中的编程式"><a href="#Vue-router中的编程式" class="headerlink" title="Vue-router中的编程式"></a>Vue-router中的编程式</h1><h2 id="声明式导航-amp-编程式导航"><a href="#声明式导航-amp-编程式导航" class="headerlink" title="声明式导航&amp;编程式导航"></a>声明式导航&amp;编程式导航</h2><p>在浏览器中，点击链接实现导航的方式，叫做<strong>声明式导航</strong>。例如：</p><ul><li>普通网页中点击 <code>&lt;a&gt;</code> 链接，vue 项目中点击 <code>&lt;router-link&gt;</code> 都属于<strong>声明式导航</strong></li></ul><p>在浏览器中，调用API方法实现导航的方式，叫做<strong>编程式导航</strong>。例如：</p><ul><li>普通网页中调用 <code>location.href</code> 跳转到新页面的方式，属于<strong>编程式导航</strong></li></ul><h2 id="编程式导航API"><a href="#编程式导航API" class="headerlink" title="编程式导航API"></a>编程式导航API</h2><p>vue-router 提供了许多编程式导航的 APIAPI，其中最常用 的导航 API 分别是：</p><ul><li><p>```<br>this.$router.push(‘hash地址’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 跳转到指定 hash 地址，并增加一条历史记录</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  this.$router.replace(&#x27;hash地址&#x27;)</span><br></pre></td></tr></table></figure><ul><li>跳转到指定的 hash 地址，并替换掉当前的历史记录</li></ul></li><li><p>```<br>this.$router.go(数值n)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 实现导航历史前进、后退</span><br><span class="line"></span><br><span class="line">### $router.push</span><br><span class="line"></span><br><span class="line">通过 `this.$router.push()` 方法，可以跳转到指定的 hash 地址，从而展示对应的组件页面。示例代码如下</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;h3&gt;Home组件&lt;/h3&gt;</span><br><span class="line">      &lt;button @click=&quot;gotoMovie&quot;&gt; 跳转到Movie页面&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      gotoMovie() &#123;</span><br><span class="line">          this.$router.push(&#x27;/movie&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="router-replace"><a href="#router-replace" class="headerlink" title="$router.replace"></a>$router.replace</h3><p>调用 <code>this.$router.replace()</code> 方法，可以跳转到指定的 hash 地址，从而展示对应的组件页面。</p><p>push 和 replace 的区别：</p><ul><li>push 会<strong>增加一条历史记录</strong></li><li>replace 不会增加历史记录，而是<strong>替换掉当前的历史记录</strong></li></ul><h3 id="router-go"><a href="#router-go" class="headerlink" title="$router.go"></a>$router.go</h3><p>调用 <code>this.$router.go()</code> 方法，可以在浏览历史中前进和后退，示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Home组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goBack&quot;</span>&gt;</span> 后退 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">goBack</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 后退到之前的组件页面</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，一般只会前进和后退一层页面，因此 vue-router 提供了如下两个便捷方法：</p></blockquote><ol><li><p>```<br>$router.back()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 在历史记录中， 后退到上一个页面</span><br><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   $router.forward()</span><br></pre></td></tr></table></figure><ul><li>在历史记录中， 前进到下一个页面</li></ul></li></ol><h2 id="URL的hash"><a href="#URL的hash" class="headerlink" title="URL的hash"></a>URL的hash</h2><ul><li>URL的hash也就是锚点(#), 本质上是改变 window.location 的 href 属性.</li><li>我们可以通过直接赋值 location.hash 来改变 href , 但是页面不发生刷新</li></ul><p><img src="https://img-blog.csdnimg.cn/19ec20f16a23490ca66a02e7c73b1887.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="HTML5的history模式"><a href="#HTML5的history模式" class="headerlink" title="HTML5的history模式"></a>HTML5的history模式</h2><p>history接口是HTML5新增的, 它有五种模式改变URL而不刷新页面.</p><h3 id="pushState"><a href="#pushState" class="headerlink" title="pushState"></a>pushState</h3><p><img src="https://img-blog.csdnimg.cn/55ecf60edb8c466ca05eea65b8dd8122.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="replaceState"><a href="#replaceState" class="headerlink" title="replaceState"></a>replaceState</h3><p><img src="https://img-blog.csdnimg.cn/479dae734fb94ca7b36f1b85e35d14c3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="history-go"><a href="#history-go" class="headerlink" title="history.go()"></a>history.go()</h3><p><img src="https://img-blog.csdnimg.cn/473238530d06443799ba16c76d24e907.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li><code>history.back()</code> 等价于 <code>history.go(-1)</code></li><li><code>history.forward()</code> 等价于 <code>history.go(1)</code></li><li>这三个接口等同于浏览器界面的前进后退</li></ul><h1 id="认识vue-router"><a href="#认识vue-router" class="headerlink" title="认识vue-router"></a>认识vue-router</h1><p>目前前端流行的三大框架, 都有自己的路由实现:</p><ul><li>Angular的ngRouter</li><li>React的ReactRouter</li><li>Vue的vue-router</li></ul><p>我们的重点是vue-router，vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。我们可以访问其官方网站对其进行学习：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a></p><p>vue-router是基于路由和组件的</p><ul><li>路由用于设定访问路径, 将路径和组件映射起来</li><li>在vue-router的单页面应用中, 页面的路径的改变就是组件的切换</li></ul><h2 id="安装vue-router"><a href="#安装vue-router" class="headerlink" title="安装vue-router"></a>安装vue-router</h2><p>因为我们已经学习了webpack, 后续开发中我们主要是通过工程化的方式进行开发的.所以在后续, 我们直接使用npm来安装路由即可.</p><ol><li>安装 vue-router</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure><ol><li>在模块化工程中使用它(因为它是一个插件，所以可以通过 <code>Vue.use()</code> 来安装路由功能)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入 Vue 和 VueRouter 的包</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用 Vue.use() 函数,把 VueRouter 安装为 Vue 的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建 VueRouter 对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line"> </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4.将 router 对象传入到 vue 实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ol><li>使用 vue-router 的步骤<ol><li>创建路由组件</li><li>配置路由映射：组件和路径映射关系</li><li>使用路由: 通过<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code> 声明路由链接和占位符</li></ol></li></ol><h3 id="使用vue-router"><a href="#使用vue-router" class="headerlink" title="使用vue-router"></a>使用vue-router</h3><p>在 src 源代码目录下，新建 router/index.js 路由模块，并初始化如下的代码：</p><p>如果我们在使用 vueCLI 初始化项目的时候安装了 router，那么就会自动生成 router 文件夹，里面有 index.js 如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入 Vue 和 VueRouter 的包</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用 Vue.use() 函数,把 VueRouter 安装为 Vue 的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建 VueRouter 对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* webp ackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4.将 router 对象传入到 vue 实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>在 src/ main.js 入口文件中，导入并挂载路由模块。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 1.导入路由模块</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// 2.挂载路由模块</span></span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在App.vue 主组件中使用路由</p><ul><li><code>&lt;router-link&gt;</code> 声明路由链接</li><li><code>&lt;router-view&gt;</code> 占位符</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 1.定义路由链接 --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  2.定义路由的占位符 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/541f8469f7864018b6ffe5f8c7d4b0f7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="声明路由匹配规则"><a href="#声明路由匹配规则" class="headerlink" title="声明路由匹配规则"></a>声明路由匹配规则</h3><p>在 src/router/index.js 路由模块中，通过 routes 数组 声明路由的匹配规则。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [<span class="comment">// 在 routes 数组中,声明路由的匹配规则</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// path 表示要匹配的 hash 地址,component 表示要展示的路由组件  </span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    <span class="comment">// 这种方式是路由懒加载,后面有解释  </span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* webp ackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="HTML5的History模式"><a href="#HTML5的History模式" class="headerlink" title="HTML5的History模式"></a>HTML5的History模式</h2><p>我们前面说过改变路径的方式有两种：</p><ul><li>URL 的 hash</li><li>HTML5的history</li></ul><p>默认情况下，路径的改变使用的 URL 的hash，如果希望使用 HTML5 的 history 模式，进行如下配置即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;    routes,    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="router-link补充"><a href="#router-link补充" class="headerlink" title="router-link补充"></a>router-link补充</h2><ul><li><p>在前面的 <code>&lt;router-link&gt;</code> 中,我们只是使用了一个属性：<code>to</code> ，用于指定跳转的路径</p></li><li><p><code>&lt;router-link&gt;</code> 还有一些其他属性</p><ul><li><p><code>tag</code> : tag可以指定 <code>&lt;router-link&gt;</code> 之后渲染成什么组件，比如下面的代码会被渲染成一个 <code>&lt;li&gt;</code> 元素,而不是 <code>&lt;a&gt;</code></p></li><li><p>```js</p><router-link to='/home'  tag='li'><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">  - `replace` ： replace 不会留下 history 记录，所以指定 replace 的情况下，后退键返回不能返回到上一个页面中</span><br><span class="line">  </span><br><span class="line">  - `active-class` ：当 `&lt;router-link&gt;` 对应的路由匹配成功时,会自动给当前元素设置一个 `router-link-active` 的 class，设置 active-class 可以修改默认的名称(一般不需要改)</span><br><span class="line">  </span><br><span class="line">    - 在进行高亮显示的导航菜单或者底部tabbar时, 会使用到该类</span><br><span class="line">    - 但是通常不会修改类的属性, 会直接使用默认的router-link-active即可</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;nav&quot;&gt;</span><br><span class="line">      &lt;!-- 1.定义路由链接 --&gt;  </span><br><span class="line">      &lt;router-link to=&quot;/&quot; tag=&#x27;li&#x27; replace &gt;Home&lt;/router-link&gt; </span><br><span class="line">      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!--  2.定义路由的占位符 --&gt;  </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.router-link-active &#123;</span><br><span class="line">    color: red</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="路由代码跳转"><a href="#路由代码跳转" class="headerlink" title="路由代码跳转"></a>路由代码跳转</h2><p>有时候, 页面的跳转可能需要执行对应的JavaScript代码, 这个时候, 就可以使用第二种跳转方式了，也就是编程式导航。</p><p>例如，我们需要点击按钮然后进行跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;homeClick&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;aboutClick&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  2.定义路由的占位符 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">homeClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">aboutClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/about&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-router的常见用法"><a href="#Vue-router的常见用法" class="headerlink" title="Vue-router的常见用法"></a>Vue-router的常见用法</h1><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>路由重定向 指的是：用户在访问 地址 A 的时候， 强制用户跳转 到地址 C ，从而展示特定的组件页面。</p><p>通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 在 routes 数组中,声明路由的匹配规则</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 当用户访问 / 的时候,通过 redirect 属性跳转到 /home 对应的路由规则</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h2><ul><li>首先, 我们知道路由中通常会定义很多不同的页面.</li><li>这个页面最后被打包在哪里呢? 一般情况下, 是放在一个js文件中.</li><li>但是, 页面这么多放在一个js文件中, 必然会造成这个页面非常的大</li><li>如果我们一次性从服务器请求下来这个页面, 可能需要花费一定的时间, 甚至用户的电脑上还出现了短暂空白的情况.</li><li>如何避免这种情况呢? 使用路由懒加载就可以了</li></ul><p>路由懒加载做了什么？</p><ul><li>p路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块.</li><li>只有在这个路由被访问到的时候, 才加载对应的组件</li></ul><h3 id="懒加载的方式"><a href="#懒加载的方式" class="headerlink" title="懒加载的方式"></a>懒加载的方式</h3><p>在ES6中, 我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Home = () =&gt; import(&#x27;../components/Home.vue&#x27;)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关的信息</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始路由加载</span></span><br><span class="line"><span class="comment">// import Home from &#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="comment">// 路由懒加载(推荐)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="title function_">imports</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.通过Vue.use(插件), 安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [<span class="comment">// 在 routes 数组中,声明路由的匹配规则</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// path 表示要匹配的 hash 地址,component 表示要展示的路由组件  </span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>动态路由指的是：把 Hash 地址中可变的部分 定义为参数项 ，从而提高路由规则的复用性 。</p><p>在某些情况下，一个页面的path路径可能是不确定的，比如我们进入用户界面时，希望是如下的路径</p><ul><li>/user/aaaa 或 /user/id</li><li>除了有前面的 /user 之外，后面还跟上了用户的 ID</li><li>这种 path 和 Component 的匹配关系，我们称之为动态路由(也是路由传递数据的一种方式)</li></ul><p>我们在 src/router/index.js 中配置路由</p><ul><li>使用英文的冒号 (: ) 来定义路由的参数项</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 User.vue 组件中,可以获取到 id 的值，从而展示对应的用户详情</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;User-container&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User组件 ------- &#123;&#123;this.$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;User&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们也可以在主组件 App.vue 中获取到路由参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot; &#x27;/user&#x27; + id &quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用props接收路由参数"><a href="#使用props接收路由参数" class="headerlink" title="使用props接收路由参数"></a>使用props接收路由参数</h2><p>为了<strong>简化路由参数的获取形式</strong>，vue-router 允许在 路由规则中开启 props 传参 。</p><ol><li><p>我们在 src/router/index.js 中配置路由</p><p>定义路由规则时，声明 <code>props: true</code> 选项</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 User.vue 组件中,可以获取到 id 的值，从而展示对应的用户详情</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;User-container&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.直接使用 props 中接收的路由参数 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User组件 ------- &#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;User&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>]<span class="comment">// 1.使用 props 接收路由规则中匹配到的参数项</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>在主组件 App.vue 中也可以获取到路由参数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot; &#x27;/user&#x27; + id &quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="传递参数的方式"><a href="#传递参数的方式" class="headerlink" title="传递参数的方式"></a>传递参数的方式</h2><p>传递参数主要有两种类型: params 和 query</p><h3 id="params的类型"><a href="#params的类型" class="headerlink" title="params的类型"></a>params的类型</h3><ul><li>配置路由格式: <code>/router/:id</code></li><li>传递的方式: 在path后面跟上对应的值</li><li>传递后形成的路径: /router/123, /router/abc</li></ul><h3 id="query的类型"><a href="#query的类型" class="headerlink" title="query的类型"></a>query的类型</h3><ul><li>配置路由格式: /router, 也就是普通配置</li><li>传递的方式: 对象中使用query的key作为传递方式</li><li>传递后形成的路径: /router?id=123, /router?id=abc</li></ul><hr><p>例如我们在 App.vue 里面向其他路由 ‘/profile’ 传递对象参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span> =<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                   path:&#x27;/profile&#x27;, </span></span></span><br><span class="line"><span class="string"><span class="tag">                   query:&#123;name: &#x27;why&#x27;,age: 18,height:1.88&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Profile.vue 组件里面也可以取到传递过来的参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是 Profile 组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;this.$route.query&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;this.$route.query.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;this.$route.query.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;this.$route.query.height&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Profile&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>嵌套路由是一个很常见的功能，比如在home页面中, 我们希望通过 /home/news 和 /home/message 访问一些内容，</p><p>一个路径映射一个组件, 访问这两个路径也会分别渲染两个组件</p><p>实现嵌套路由有两个步骤：</p><ol><li>创建对应的子组件, 并且在路由映射中配置对应的子路由.，使用 <code>children</code> 属性声明子路由规则</li><li>在组件内部使用<code>&lt;router-view&gt;</code>标签.</li></ol><p><img src="https://img-blog.csdnimg.cn/6061454c6719488d8326b25df34be0db.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_10,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>我们创建好 HomeNews.vue 和 HomeMessage.vue 后，在 src/router/index.js 中配置路由映射</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关的信息</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由懒加载(推荐)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="title function_">imports</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HomeNews</span> = (<span class="params"></span>) =&gt; <span class="title function_">imports</span>(<span class="string">&#x27;../components/HomeNews&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HomeMessage</span> = (<span class="params"></span>) =&gt; <span class="title function_">imports</span>(<span class="string">&#x27;../components/HomeMessage&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.通过Vue.use(插件), 安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Home 页面的路由规则(父级路由规则)</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="comment">// 通过 children 属性,嵌套声明子级路由规则  </span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// 默认路径</span></span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;news&#x27;</span></span><br><span class="line">        &#125;，</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">HomeNews</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;messages&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">HomeMessage</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>由于我们的 HomeNews.vue 和 HomeMessage.vue 都是 Home 路由的子路由，所以我们需要在 Home.vue 进行显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home 组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  1.在 Home 组件中,声明两个子路由链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/message&quot;</span>&gt;</span>消息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!--  2.在关于页面中,声明子路由的占位符  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="router-和-route的区别"><a href="#router-和-route的区别" class="headerlink" title="$ router 和$route的区别"></a>$ router 和$route的区别</h2><ul><li><code>$router</code> 为VueRouter实例，想要导航到不同URL，则使用<code>$router.push</code>方法</li><li><code>$route</code>为当前 router 跳转对象里面可以获取name、path、query、params等</li></ul><h1 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h1><p><img src="https://img-blog.csdnimg.cn/00872e4395704b439e8e95b8cc749a71.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>我们来考虑一个需求: 在一个SPA应用中, 如何改变网页的标题呢?</p><ul><li>网页标题是通过<code>&lt;title&gt;</code>来显示的, 但是SPA只有一个固定的HTML, 切换不同的页面时, 标题并不会改变.</li><li>但是我们可以通过JavaScript来修改<code>&lt;title&gt;</code>的内容 <code>window.document.title = &#39;新的标题&#39;</code></li><li>那么在Vue项目中, 在哪里修改? 什么时候修改比较合适呢?</li></ul><p>普通的修改方式:</p><ul><li>我们比较容易想到的修改标题的位置是每一个路由对应的组件.vue文件中.</li><li>通过mounted声明周期函数, 执行对应的代码进行修改即可.</li><li>但是当页面比较多时, 这种方式不容易维护(因为需要在多个页面执行类似的代码).</li><li>有没有更好的办法呢? 使用导航守卫即可.</li></ul><p>什么是导航守卫?</p><ul><li>vue-router提供的导航守卫主要用来监听监听路由的进入和离开的.</li><li>vue-router提供了<code>beforeEach</code>和<code>afterEach</code>的钩子函数, 它们会在路由即将改变前和改变后触发</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关的信息</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&quot;../components/User&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.通过Vue.use(插件), 安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建VueRouter对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">// redirect重定向</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置钩子hook(前置回调)</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,form,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 从 from 跳转到 to</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h2 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h2><p>每次发生路由的导航跳转时，都会触发全局前置守卫 。因此，在全局前置守卫中，程序员可以对每个路由进行访问权限的控制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用路由实例对象的 beforeEach 方法,即可声明&quot;全局前置守卫&quot;</span></span><br><span class="line"><span class="comment">// 每次发生路由跳转的时候,都会触发这个方法</span></span><br><span class="line"><span class="comment">// 全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// to 是将要访问的路由的信息对象</span></span><br><span class="line">    <span class="comment">// from 是将要离开的路由的信息对象</span></span><br><span class="line">    <span class="comment">// next 是一个函数,调用 next()表示放行,允许这次路由导航</span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>导航钩子的三个参数解析：</p><ul><li>to ： 即将要进入的目标的路由对象</li><li>from：当前导航即将要离开的路由对象</li><li>next：调用该方法后，才能进入下一个钩子</li></ul><blockquote><p>注意：如果是前置钩子beforeEach，必须要调用 next() 函数，如果是后置钩子afterEach，不需要主动调用 next() 函数</p></blockquote><h2 id="next函数的三种调用方式"><a href="#next函数的三种调用方式" class="headerlink" title="next函数的三种调用方式"></a>next函数的三种调用方式</h2><p><img src="https://img-blog.csdnimg.cn/6d3c2e7c82694967a17a8a6bb97046b8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>当前用户拥有后台主页的访问权限，直接放行： <code>next()</code></li><li>当前用户没有后台主页的访问权限，强制其跳转到登录页面：<code>next(&#39;/login&#39;)</code></li><li>当前用户没有后台主页的访问权限，不允许跳转到后台主页：<code>next(false)</code></li></ul><iframe width="0" height="0" id="csdn-buyside-iframe2" name="csdnBuysideIframe2" src="https://mall.csdn.net/sales/vip-buyside?from=" frameborder="0" scrolling="no" style="box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: normal;"></iframe>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2.0 </tag>
            
            <tag> Vue-router </tag>
            
            <tag> Vue Cli </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue全家桶之VueCLI 脚手架V2→V4版本(三)</title>
      <link href="/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVueCLI%20%E8%84%9A%E6%89%8B%E6%9E%B6V2%E2%86%92V4%E7%89%88%E6%9C%AC(%E4%B8%89)/"/>
      <url>/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVueCLI%20%E8%84%9A%E6%89%8B%E6%9E%B6V2%E2%86%92V4%E7%89%88%E6%9C%AC(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="✍、目录脑图"><a href="#✍、目录脑图" class="headerlink" title="✍、目录脑图"></a>✍、目录脑图</h2><p><img src="https://img-blog.csdnimg.cn/cf1100152fbd4c9d86b5ac34c89fefc6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>配套视频讲解: <a href="https://www.bilibili.com/video/BV15741177Eh?from=search&seid=12220650172270950947&spm_id_from=333.337.0.0">CoderWhy老师的Vuejs讲解</a></li></ul><h1 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h1><p>组件化开发指的是：根据封装的思想，把页面尚可重用的 UI 结构封装为组件，从而方便项目的开发和维护</p><p>Vue 是一个支持组件化开发的前端框架</p><p>Vue中规定：组件的后缀名是 .Vue，我们之前接触的 App.vue 文件本质尚就是一个 vue 的组件。</p><h2 id="Vue组件的三个组成部分"><a href="#Vue组件的三个组成部分" class="headerlink" title="Vue组件的三个组成部分"></a>Vue组件的三个组成部分</h2><p>每个 .Vue 组件都是由三部分组成，分别是</p><ul><li>template -&gt; 组件的模板结构</li><li>script -&gt; 组件的 JavaScript 行为</li><li>style -&gt; 组件的样式</li></ul><p><strong>其中，每个组件中必须包含template 模板结构，而script 行为和style 样式是可选的组成部分。</strong></p><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>vue 规定：每个组件对应的 模板结构，需要定义到 <code>&lt;template&gt;</code> 节点中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 当前组件的 <span class="variable constant_">DOM</span> 结构,需要定义到 template 标签的内部 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>template 是vue 提供的容器标签，只起到包裹性质的作用，它不会被渲染为真正的DOM 元素</li><li>template 中只能包含唯一的根节点</li></ul><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>vue 规定：开发者可以在<code>&lt;script&gt;</code> 节点中封装组件的<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=JavaScript">JavaScript</a> 业务逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 今后,组件相关的 data 数据、methods 方法等</span></span><br><span class="line">    <span class="comment">// 都需要定义到 export default 所导出的对象中</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br><span class="line">&lt;/script&gt;    </span><br></pre></td></tr></table></figure><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p><a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=vue">vue</a> 规定：组件内的<code>&lt;style&gt;</code>节点是可选的，开发者可以在<code>&lt;style&gt;</code> 节点中编写样式美化当前组件的UI 结构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: normal;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="让style中支持less语法"><a href="#让style中支持less语法" class="headerlink" title="让style中支持less语法"></a>让style中支持less语法</h3><p>让 <code>&lt;style&gt;</code> 标签上添加 <code>lang=&quot;less&quot;</code> 属性,即可使用 less 语法编写组件的样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: normal;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件之间的样式冲突问题"><a href="#组件之间的样式冲突问题" class="headerlink" title="组件之间的样式冲突问题"></a>组件之间的样式冲突问题</h3><p>默认情况下，写在.vue 组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。</p><p>导致组件之间样式冲突的根本原因是：</p><ol><li>单页面应用程序中，所有组件的DOM 结构，都是基于唯一的index.html 页面进行呈现的</li><li>每个组件中的样式，都会影响整个index.html 页面中的DOM 元素</li></ol><p>为了提高开发效率和开发体验，vue 为style 节点提供了 scoped属性，<strong>从而防止组件之间的样式冲突问题</strong></p><h3 id="deep-样式穿透"><a href="#deep-样式穿透" class="headerlink" title="/deep/样式穿透"></a>/deep/样式穿透</h3><ul><li>如果给当前组件的style 节点添加了scoped 属性，则当前组件的样式对其子组件是不生效的。</li><li>如果想让某些样式对子组件生效，可以使用 <code>/deep/ 深度选择器</code>。</li></ul><h2 id="使用组件的三个步骤"><a href="#使用组件的三个步骤" class="headerlink" title="使用组件的三个步骤"></a>使用组件的三个步骤</h2><p><img src="https://img-blog.csdnimg.cn/a28900e654974adaa2d58ca8e2b1757a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/39b1a198bfe24efb8b973ed18e17a16b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  渲染 Left 组件和 Right 组件   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--  3.以标签形式,使用注册好的组件  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Left</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Right</span>&gt;</span><span class="tag">&lt;/<span class="name">Right</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1.导入需要使用的 .vue组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Left&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Right&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.注册组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#x27;Left&#x27;: Left 简化写法如下,对象里面键值一样的话直接写一个就行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Left</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Right</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.app-container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">20px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="私有子组件"><a href="#私有子组件" class="headerlink" title="私有子组件"></a>私有子组件</h2><p>通过 components 注册的是私有子组件</p><p>例如：</p><p>在组件A的components 节点下，注册了组件F。则组件F 只能用在组件A 中；不能被用在组件C 中。</p><h2 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h2><p>在vue 项目的main.js 入口文件中，通过Vue.component() 方法，可以注册全局组件。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入需要全局注册的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Count.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1:字符串格式,表示组件的注册名称</span></span><br><span class="line"><span class="comment">// 参数2:需要被全局注册的那个组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyCount&#x27;</span>,<span class="title class_">Count</span>)</span><br></pre></td></tr></table></figure><h1 id="Vue-CLI2"><a href="#Vue-CLI2" class="headerlink" title="Vue CLI2"></a>Vue CLI2</h1><ul><li>CLI是Command-Line Interface, 翻译为命令行界面, 但是俗称脚手架</li><li>Vue CLI是一个官方发布 vue.js 项目脚手架</li><li>使用 vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置</li><li>Vue CLI官网：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></li><li>vue-cli 是Vue.js 开发的标准工具。它简化了程序员基于webpack 创建工程化的Vue 项目的过程</li><li>程序员可以专注在撰写应用上，而不必花好几天去纠结webpack 配置的问题</li></ul><h2 id="安装Vue脚手架"><a href="#安装Vue脚手架" class="headerlink" title="安装Vue脚手架"></a>安装Vue脚手架</h2><p>全局安装 cli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b276b89affd84d0e9ee2ac392794ba75.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>这样安装的是脚手架的最新版本，如果我们想安装脚手架 2 版本呢？</p><p>全局安装脚手架2版本，这样的话我们就既可以用脚手架2的版本，也可以用脚手架最新的版本</p><p><img src="https://img-blog.csdnimg.cn/d2c6115d282f4e68b3708b0c51346edf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f9097afceec849b0a1d873c7fa23e88e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>Vue CLI2 初始化项目命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><ul><li>Vue CLI 3 初始化项目命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><ul><li>查看 VueCLI 版本（注意 V 要大写）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure><h2 id="Vue-CLI2-初始化项目"><a href="#Vue-CLI2-初始化项目" class="headerlink" title="Vue CLI2 初始化项目"></a>Vue CLI2 初始化项目</h2><p>在终端输入 <code>vue init webpack my-project</code></p><p><img src="https://img-blog.csdnimg.cn/4c3509b8b4ec48e8b68b3c99ef3ac80b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="目录结构详解"><a href="#目录结构详解" class="headerlink" title="目录结构详解"></a>目录结构详解</h3><p><img src="https://img-blog.csdnimg.cn/39bd8e0f12f14cf285ed1decb27fac7d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>我们使用脚手架初始化项目之后如何运行呢？</p><p>cd 到对应目录，在终端输入 <code>npm run dev</code> 就可以运行了</p><p><img src="https://img-blog.csdnimg.cn/18f0a34f024e4cd1a047fb46cf718ac2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/41e46f5334464252b97029710acc7275.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>我们来看 main.js</p><ul><li>Vue实例中，我们定义了el属性，用于和index.html中的#app进行绑定，让Vue实例之后可以管理它其中的内容</li><li>而如果Vue实例中同时指定了template，那么template模板的内容会替换掉挂载的对应el的模板</li><li>template 模板也就是 App.vue 里面的内容</li></ul><p><img src="https://img-blog.csdnimg.cn/7b5bb168b9654922a8c713df5a0cc7f1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="关闭Eslint"><a href="#关闭Eslint" class="headerlink" title="关闭Eslint"></a>关闭Eslint</h3><p>若我们在初始化项目时候开启了 ESlint 代码检测，我们不想用的时候方法如下：</p><p><img src="https://img-blog.csdnimg.cn/f04f6e376dda473daf655ddd60c8c947.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h1 id="Vue-CLI3"><a href="#Vue-CLI3" class="headerlink" title="Vue CLI3"></a>Vue CLI3</h1><p>Vue-cli 3 与 2 版本有很大区别</p><ul><li>vue-cli 3 是基于 webpack 4 打造，vue-cli 2 还是 webapck 3</li><li>vue-cli 3 的设计原则是“0配置”，移除的配置文件根目录下的，build和config等目录</li><li>vue-cli 3 提供了 vue ui 命令，提供了可视化配置，更加人性化</li><li>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</li></ul><p>Vue CLI 3 初始化项目命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/be762a2d5692497eae10c02f3a7c5c59.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="目录结构详解-1"><a href="#目录结构详解-1" class="headerlink" title="目录结构详解"></a>目录结构详解</h2><p><img src="https://img-blog.csdnimg.cn/ecf83eff085b4097b65ba4b82a3c6e91.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="运行项目-1"><a href="#运行项目-1" class="headerlink" title="运行项目"></a>运行项目</h2><p>使用 Vue CLI3 初始化项目之后，运行项目。只需要看 package.json 下的 scripts 就知道运行命令</p><p><img src="https://img-blog.csdnimg.cn/d655caa7eb7142c8bdceafadaaa22466.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>方式一：启动图形化界面 <code>Vue ui</code></li><li>方式二：自定义配置 vue.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vue-CLI4"><a href="#Vue-CLI4" class="headerlink" title="Vue CLI4"></a>Vue CLI4</h1><h2 id="单页面应用程序SPA"><a href="#单页面应用程序SPA" class="headerlink" title="单页面应用程序SPA"></a>单页面应用程序SPA</h2><p>单页面应用程序（英文名：Single Page Application）简称SPA，顾名思义，指的是一个Web 网站中只有唯一的一个HTML 页面，所有的功能与交互都在这唯一的一个页面内完成。</p><p>我们现在的开发模式就是单页面，一次将所有的资源请求完，这样我们点击此单页面的功能，就不会再去请求资源，极大的节约了我们的带宽。</p><h2 id="Vue项目的运行流程"><a href="#Vue项目的运行流程" class="headerlink" title="Vue项目的运行流程"></a>Vue项目的运行流程</h2><p>在工程化的项目中，vue 要做的事情很单纯：通过 main.js 把 App.vue 渲染到 index.html 的指定区域中。</p><p>其中：</p><ul><li>App.vue 用来编写待渲染的模板结构</li><li>index.html 中需要预留一个el 区域</li><li>main.js 把App.vue 渲染到了index.html 所预留的区域中</li></ul><h2 id="安装VueCLI4"><a href="#安装VueCLI4" class="headerlink" title="安装VueCLI4"></a>安装VueCLI4</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>在控制台输入如下命令会创建 hello-world 项目</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure><ol><li><p>会弹出如下选择预设</p><p>箭头上下键控制选择，选择 Manually select features 手动配置</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">&gt; Default ([Vue 2] babel, eslint) </span><br><span class="line">  Default (Vue 3) ([Vue 3] babel, eslint) </span><br><span class="line">  Manually select features </span><br></pre></td></tr></table></figure><ol><li><p>手动配置如下</p><p>箭头上下键控制选择，空格进行选中</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Choose Vue version</span><br><span class="line"> (*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> ( ) Router</span><br><span class="line"> ( ) Vuex</span><br><span class="line"> ( ) CSS Pre-processors</span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>Choose Vue version</td><td>选择Vue版本</td></tr><tr><td>Babel</td><td>vue项目中普遍使用es6语法，但有时我们的项目需要兼容低版本浏览器，这时就需要引入babel插件，将es6转成es5</td></tr><tr><td>TypeScript</td><td>TypeScript通过添加类型来扩展JavaScript。通过了解JavaScript，TypeScript可以节省您捕获错误的时间并在运行代码之前提供修复。任何浏览器，任何操作系统，任何运行JavaScript的地方。 完全开源</td></tr><tr><td>Progressive Web App (PWA) Support</td><td>渐进式Web应用程序（PWA）支持</td></tr><tr><td>Router</td><td>路由</td></tr><tr><td>Vuex</td><td>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</td></tr><tr><td>CSS Pre-processors</td><td>CSS预处理器，预处理器：比如要用sass或者cssNext就要按照人家规定的语法形式，就是用人家的语法去编写，然后人家把你编写的代码转成css。</td></tr><tr><td>Linter / Formatter</td><td>格式化程序</td></tr><tr><td>Unit Testing</td><td>单元测试</td></tr><tr><td>E2E Testing</td><td>端到端（end-to-end）</td></tr></tbody></table><ol><li>配置放在一个文件里面还是分不同的文件配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel</span><br><span class="line">? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files</span><br><span class="line">  In package.json</span><br></pre></td></tr></table></figure><ol><li><p>配置项是否要保存</p><p>如果保存,我们上面所选择的配置会作为以后项目的预置，我们不保存</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel</span><br><span class="line">? Where do you prefer placing config for Babel, ESLint, etc.? In package.json</span><br><span class="line">? Save this as a preset for future projects? (y/N)</span><br></pre></td></tr></table></figure><ol><li>这样就会进行安装了</li></ol><h2 id="项目目录介绍"><a href="#项目目录介绍" class="headerlink" title="项目目录介绍"></a>项目目录介绍</h2><ul><li>node_module:用于存放我们项目的各种依赖</li><li>public:用于存放静态文件，是网站的根目录<ul><li>favicon.ico：网站的小图标</li><li>index.html：网站的首页，是一个模板文件，作用是生成项目的入口文件，webpack打包的js,css也会自动注入到该页面中。我们浏览器访问项目的时候就会默认打开生成好的index.html</li></ul></li><li>src：src下就是我们写代码的地方<ul><li>assets：用于存放各种静态文件，如图片</li><li>components：用于存放我们的公共组件，如 header、footer等</li><li>App.vue：主vue模块，引入其他模块，app.vue是项目的主组件，所有页面都是在app.vue下切换的</li><li>main.js：入口文件，主要作用是初始化vue实例，同时可以在此文件中引用某些组件库或者全局挂在一些变量</li><li>router.js：路由文件，这个里边可以理解为各个页面的地址路径，用于我们访问，同时可以直接在里边编写路由守卫</li><li>store.js：主要用于项目里边的一些状态的保存</li></ul></li><li>gitignore:git上传需要忽略的文件格式</li><li>babel.config.js：是一个工具链，主要用于在当前和较旧的浏览器或环境中将ECMAScript 2015+代码转换为JavaScript的向后兼容版本</li><li>package.json:模块基本信息项目开发所需要模块，版本，项目名称</li><li>package-lock.json:是在 npm install时候生成一份文件，用以记录当前状态下实际安装的各个npm package的具体来源和版本号</li><li>vue.config.js:保存vue配置的文件，可以用于设置代理,打包配置等</li></ul><p><img src="https://img-blog.csdnimg.cn/c70e7d3e285e4bb6a763d6096f71834b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="运行项目-2"><a href="#运行项目-2" class="headerlink" title="运行项目"></a>运行项目</h2><ul><li>运行项目</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><ul><li>打包项目</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="Runtime-Compiler和Runtime-only的区别"><a href="#Runtime-Compiler和Runtime-only的区别" class="headerlink" title="Runtime-Compiler和Runtime-only的区别"></a>Runtime-Compiler和Runtime-only的区别</h2><p>运行时 + 编译器(Runtime + Compiler) 版本 和 只含有运行时版本(Runtime-only)</p><p><img src="https://img-blog.csdnimg.cn/e48055bbb4094827b7e470eb19bc3f44.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>为什么存在这样的差异呢，我们先来看一下 Vue 程序运行过程，Vue中的模板如何最终渲染成真实DOM</p><p><img src="https://img-blog.csdnimg.cn/0c26e74da0464435ab14284ef8be839e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>我们的 template 被 Vue 解析成 ast，ast 经过编译再通过 render 函数转成虚拟DOM，之后再转成我们的真实DOM</p><p><strong>运行时 + 编译器(Runtime + Compiler) 版本</strong>：</p><ul><li>```<br>template -&gt; ast -&gt; render -&gt; vdom -&gt; UI<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**只含有运行时版本(Runtime-only)版本**：性能更高，且代码量更少</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  render -&gt; vdom -&gt; UI</span><br></pre></td></tr></table></figure></li></ul><p>简要总结：</p><ul><li>如果之后的开发中，你依然使用 template，就需要选择Runtime-Compiler</li><li>如果你之后的开发中，使用的是.vue文件夹开发，那么可以选择Runtime-only （推荐）</li></ul><iframe width="0" height="0" id="csdn-buyside-iframe2" name="csdnBuysideIframe2" src="https://mall.csdn.net/sales/vip-buyside?from=" frameborder="0" scrolling="no" style="box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: normal;"></iframe>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2.0 </tag>
            
            <tag> Vue-router </tag>
            
            <tag> Vue Cli </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue全家桶之VueX(六)</title>
      <link href="/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVueX(%E5%85%AD)/"/>
      <url>/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVueX(%E5%85%AD)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>配套视频讲解: <a href="https://www.bilibili.com/video/BV15741177Eh?from=search&seid=12220650172270950947&spm_id_from=333.337.0.0">CoderWhy老师的Vuejs讲解</a></li></ul><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex"></a>什么是Vuex</h2><p>官方解释：Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p><ul><li>它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools">devtools</a><a href="https://github.com/vuejs/vue-devtools"> extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</li></ul><p><strong>状态管理</strong>到底是什么？</p><ul><li><strong>状态管理模式、集中式存储管理</strong>这些名词听起来就非常高大上，让人捉摸不透。</li><li>其实，你可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。</li><li>然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。</li><li>那么，多个组件是不是就可以共享这个对象中的所有变量属性了呢？</li></ul><p>等等，如果是这样的话，为什么官方还要专门出一个插件Vuex呢？难道我们不能自己封装一个对象来管理吗？</p><ul><li>当然可以，只是我们要先想想VueJS带给我们最大的便利是什么呢？没错，就是响应式。</li><li>如果你自己封装实现一个对象能不能保证它里面所有的属性做到响应式呢？当然也可以，只是自己封装可能稍微麻烦一些。</li><li>不用怀疑，Vuex就是为了提供这样一个在多个组件间共享状态的插件，用它就可以了。</li></ul><h2 id="单界面的状态管理"><a href="#单界面的状态管理" class="headerlink" title="单界面的状态管理"></a>单界面的状态管理</h2><p>我们知道，要在单个组件中进行状态管理是一件非常简单的事情。</p><p><img src="https://img-blog.csdnimg.cn/4c07f8e3955c4b4fb6ec97fe9b031cbd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>这图片中的三种东西如下：</p><ul><li>State：状态</li><li>View：视图层，可以针对 State 的变化，显示不同的信息</li><li>Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的变化</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前计数:&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter+=1&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter-=1&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个案例中，我们有木有状态需要管理呢？没错，就是个数counter。</p><p>counter需要某种方式被记录下来，也就是我们的State。</p><p>counter目前的值需要被显示在界面中，也就是我们的View部分。</p><p>界面发生某些操作时（我们这里是用户的点击，也可以是用户的input），需要去更新状态，也就是我们的Actions</p><p>这不就是上面的流程图了吗？</p><p>ok，先安装 vuex</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><h2 id="多界面状态管理"><a href="#多界面状态管理" class="headerlink" title="多界面状态管理"></a>多界面状态管理</h2><p>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？</p><ul><li>多个视图都依赖同一个状态(一个状态改了，多个界面需要进行更新)</li><li>不同界面的 Actions 都想修改同一个状态(Home.vue 需要修改，Profile.vue 也需要修改这个状态)</li></ul><p>也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个视图，但是也有一些状态(状态a/状态b/状态c)属于多个视图共同想要维护的</p><ul><li>状态1/状态2/状态3 你放在自己的房间中，你自己管理自己用，没问题。</li><li>但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！</li><li>没错，Vuex就是为我们提供这个大管家的工具。</li></ul><p>全局单例模式(大管家)</p><ul><li>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。</li><li>之后，你们每个视图，按照我<strong>规定好的</strong>规定，进行访问和修改等操作。</li><li>这就是Vuex背后的基本思想。</li></ul><hr><p>我们创建一个文件夹 src/store，并且在其中创建一个 index.js 文件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">decrement</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>其次，我们让所有的Vue组件都可以使用这个store对象</p><ul><li>来到 src/main.js文件，导入store对象，并且挂载到new Vue中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">// 1.导入store对象</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="comment">// 2.挂载 store</span></span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这样，在其他Vue组件中，我们就可以通过 <code>this.$store</code>的方式，获取到这个store对象了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用步骤小结：</p><ol><li>提取出一个公共的 store 对象，用于保存在多个组件中共享的状态</li><li>将 store 对象放置在 new Vue 对象中，这样可以保证在所有的组件中都可以使用到</li><li>在其他组件中使用 store 对象中保存的状态即可<ul><li>通过 <code>this.$store.state</code> 属性的方式来访问状态</li><li>通过 <code>this.$store.commit(&#39;mutation中方法&#39;)</code> 来修改状态</li></ul></li><li>我们通过提交 mutation 的方式，而非直接改变 store.state.count</li><li>这是因为 Vuex 可以更明确的追踪状态的变化，所以不要直接改变 store.state.count 的值</li></ol><h2 id="安装vue-devtools"><a href="#安装vue-devtools" class="headerlink" title="安装vue-devtools"></a>安装vue-devtools</h2><ol><li>在 Chrome 网上应用商店 搜索 devtools</li><li>选择 vue.js devtools ，添加即可</li></ol><h2 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h2><p>Vuex有几个比较核心的概念:</p><ul><li>State</li><li>Getters</li><li>Mutation</li><li>Action</li><li>Module</li></ul><h3 id="State-单-状态树"><a href="#State-单-状态树" class="headerlink" title="State 单-状态树"></a>State 单-状态树</h3><p>Vuex提出使用单一状态树, 什么是单一状态树呢？</p><ul><li>英文名称是Single Source of Truth，也可以翻译成单一数据源。</li><li>我用一个生活中的例子做一个简单的类比，我们知道，在国内我们有很多的信息需要被记录，比如上学时的个人档案，工作后的社保记录，公积金记录，结婚后的婚姻信息，以及其他相关的户口、医疗、文凭、房产记录等等（还有很多信息）。</li><li>这些信息被分散在很多地方进行管理，有一天你需要办某个业务时(比如入户某个城市)，你会发现你需要到各个对应的工作地点去打印、盖章各种资料信息，最后到一个地方提交证明你的信息无误。这种保存信息的方案，不仅仅低效，而且不方便管理，以及日后的维护也是一个庞大的工作(需要大量的各个部门的人力来维护，当然国家目前已经在完善我们的这个系统了)。</li><li>这个和我们在应用开发中比较类似：如果你的状态信息是保存到多个Store对象中的，那么之后的管理和维护等等都会变得特别困难，所以Vuex也使用了单一状态树来管理应用层级的全部状态。单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。</li></ul><h3 id="Getters基本使用"><a href="#Getters基本使用" class="headerlink" title="Getters基本使用"></a>Getters基本使用</h3><p>有时候，我们需要从 store 中获取一些 state 变异后的状态，比如下面的 Store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">students</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">100</span>,<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">111</span>,<span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,<span class="attr">age</span>: <span class="number">21</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">112</span>,<span class="attr">name</span>: <span class="string">&#x27;lucy&#x27;</span>,<span class="attr">age</span>: <span class="number">25</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">113</span>,<span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,<span class="attr">age</span>: <span class="number">2</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">       <span class="comment">// 获取年龄大于20的学生对象</span></span><br><span class="line">       <span class="title function_">more20stu</span>(<span class="params">state</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt;<span class="number">20</span>)</span><br><span class="line">       &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>这样我们在其他 .vue 组件中也可以拿到年龄大于20的学生对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.more20stu&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// @ is an alias to /src</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HelloWorld</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="①、Getters作为参数和传递参数"><a href="#①、Getters作为参数和传递参数" class="headerlink" title="①、Getters作为参数和传递参数"></a>①、Getters作为参数和传递参数</h4><p>如果我们已经有了一个获取所有年龄大于20岁学生的列表 getters，那么代码可以这样来写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">students</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">100</span>,<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">111</span>,<span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,<span class="attr">age</span>: <span class="number">21</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">112</span>,<span class="attr">name</span>: <span class="string">&#x27;lucy&#x27;</span>,<span class="attr">age</span>: <span class="number">25</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">113</span>,<span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,<span class="attr">age</span>: <span class="number">2</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">       <span class="comment">// 获取年龄大于20的学生对象</span></span><br><span class="line">       <span class="title function_">more20stu</span>(<span class="params">state</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt;<span class="number">20</span>)</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 获取年龄大于20的学生个数</span></span><br><span class="line">       <span class="title function_">more20stuLength</span>(<span class="params">state,getters</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> getters.<span class="property">more20stu</span>.<span class="property">length</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>getters 默认是不能传递参数的, 如果希望传递参数, 那么只能让getters本身返回另一个函数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">students</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">100</span>,<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">111</span>,<span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,<span class="attr">age</span>: <span class="number">21</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">112</span>,<span class="attr">name</span>: <span class="string">&#x27;lucy&#x27;</span>,<span class="attr">age</span>: <span class="number">25</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">113</span>,<span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,<span class="attr">age</span>: <span class="number">2</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">       <span class="comment">// 获取年龄大于20的学生对象</span></span><br><span class="line">       <span class="title function_">more20stu</span>(<span class="params">state</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt;<span class="number">20</span>)</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 获取年龄大于20的学生个数</span></span><br><span class="line">       <span class="title function_">more20stuLength</span>(<span class="params">state,getters</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> getters.<span class="property">more20stu</span>.<span class="property">length</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 让用户自己决定获取年龄大于多少</span></span><br><span class="line">       <span class="title function_">moreAgeStu</span>(<span class="params">state</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">age</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt; age)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>这样我们在其他 .vue 组件中就可以传入年龄数值筛选了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.more20stu&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.more20stuLength&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.moreAgeStu(8)&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// @ is an alias to /src</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HelloWorld</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mutation状态更新"><a href="#Mutation状态更新" class="headerlink" title="Mutation状态更新"></a>Mutation状态更新</h3><ul><li>Vuex的store状态的更新唯一方式：提交<strong>Mutation</strong></li><li>Mutation主要包括两部分：<ul><li>字符串的<strong>事件类型（type）</strong></li><li>一个<strong>回调函数(handler)</strong> 该回调函数的第一个参数就是 state</li></ul></li></ul><ol><li>mutation 的定义方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">decrement</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><ol><li>通过 mutation 更新</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="①Mutation传递参数"><a href="#①Mutation传递参数" class="headerlink" title="①Mutation传递参数"></a>①Mutation传递参数</h4><p>在通过mutation更新数据的时候, 有可能我们希望携带一些<strong>额外的参数</strong>，参数被称为 mutation 的载荷(Payload)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">decrement</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>--</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">incrementCount</span>(<span class="params">state,count</span>)&#123;</span><br><span class="line">            state.<span class="property">counter</span> += count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>我们在其他 .vue 组件中来修改状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(5)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(10)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addCount</span>(<span class="params">count</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;incrementCount&#x27;</span>,count)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是如果参数不是一个呢？</p><p>比如我们有很多参数需要传递，这个时候，我们通常会以对象的形式传递，也就是 payload 是一个对象。</p><p>这个时候可以再从对象中取出相关的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">students</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">100</span>,<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">111</span>,<span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,<span class="attr">age</span>: <span class="number">21</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">112</span>,<span class="attr">name</span>: <span class="string">&#x27;lucy&#x27;</span>,<span class="attr">age</span>: <span class="number">25</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">113</span>,<span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,<span class="attr">age</span>: <span class="number">2</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="title function_">addStudent</span>(<span class="params">state,stu</span>)&#123;</span><br><span class="line">            state.<span class="property">students</span>.<span class="title function_">push</span>(stu)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>我们在其他 .vue 组件中来修改状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(5)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(10)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addStudent&quot;</span>&gt;</span>添加学生<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addCount</span>(<span class="params">count</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;incrementCount&#x27;</span>,count)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addStudent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> stu = &#123;<span class="attr">id</span>: <span class="number">114</span>, <span class="attr">name</span>: <span class="string">&#x27;alan&#x27;</span>,<span class="attr">age</span>: <span class="number">35</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;addStudent&#x27;</span>,stu)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②Mutation提交风格"><a href="#②Mutation提交风格" class="headerlink" title="②Mutation提交风格"></a>②Mutation提交风格</h4><p>上面的通过 <strong>commit</strong> 进行提交是一种普通的方式</p><p>Vue 还提供了另外一种风格，它是一个包含 type 属性的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">students</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">100</span>,<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">111</span>,<span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,<span class="attr">age</span>: <span class="number">21</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">112</span>,<span class="attr">name</span>: <span class="string">&#x27;lucy&#x27;</span>,<span class="attr">age</span>: <span class="number">25</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">113</span>,<span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,<span class="attr">age</span>: <span class="number">2</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">       <span class="title function_">incrementCount</span>(<span class="params">state,payload</span>)&#123;</span><br><span class="line">           state.<span class="property">counter</span> += payload.<span class="property">count</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(5)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(10)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">addCount</span>(<span class="params">count</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1.普通的提交封装</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this.$store.commit(&#x27;incrementCount&#x27;,count)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2.特殊的提交封装</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.&amp;store.<span class="title function_">commit</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="string">&#x27;incrementCount&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                count</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="③Mutation响应规则"><a href="#③Mutation响应规则" class="headerlink" title="③Mutation响应规则"></a>③Mutation响应规则</h4><p>Vuex 的 store 中的 state 是响应式的，当 state 中的数据发生改变时，Vue组件会自动更新</p><p>这就要求我们必须遵守一些Vuex对应的规则：</p><ul><li>提前在 store 中初始化好所需的属性</li><li>当给 state 中的对象添加新属性时，使用下面的方式<ul><li>方式一：使用 <code>Vue.set(obj,&#39;newProp&#39;,123)</code></li><li>方式二：用新对象给就旧对象重新赋值</li></ul></li></ul><p>例如：</p><p>我们在 index.js 中增加 info 状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">info</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">       <span class="comment">// 方式一:Vue.set()</span></span><br><span class="line">       <span class="title class_">Vue</span>.<span class="title function_">set</span>(state.<span class="property">info</span>,<span class="string">&#x27;height&#x27;</span>,payload.<span class="property">height</span>)</span><br><span class="line">       <span class="comment">// 方式二:给 info 赋值一个新的对象</span></span><br><span class="line">       state.<span class="property">info</span> = &#123;...state.<span class="property">info</span>,<span class="string">&#x27;height&#x27;</span>:payload.<span class="property">height</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们在其他 .vue 组件中修改状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的个人信息: &#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateInfo&quot;</span>&gt;</span>更新信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">info</span></span></span><br><span class="line"><span class="language-javascript">        &#125; </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateInfo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;updateInfo&#x27;</span>,&#123;<span class="attr">height</span>: <span class="number">1.88</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④Mutation常量类型-概念"><a href="#④Mutation常量类型-概念" class="headerlink" title="④Mutation常量类型-概念"></a>④Mutation常量类型-概念</h4><p>我们来考虑下面的问题：</p><ul><li>在 mutation 中，我们定义了很多事件类型(也就是其中的方法名称)</li><li>当我们的项目增大时，Vuex 管理的状态越来越多，需要更新状态的情况越来越多, 那么意味着 Mutation 中的方法越来越多</li><li>方法过多，使用者需要花费大量的精力的经历去记住这些方法，甚至是多个文件间来回切换, 查看方法名称, 甚至如果不是复制的时候, 可能还会出现写错的情况.</li></ul><p>如何避免上述问题呢？</p><ul><li>在各种Flux实现中, 一种很常见的方案就是使用<strong>常量</strong>替代 Mutation <strong>事件的类型</strong></li><li>我们可以将这些常量放在一个单独的文件中, 方便管理以及让整个app所有的事件类型一目了然.</li></ul><p>具体怎么做呢？</p><ul><li>我们可以创建一个文件: <code>mutation-types.js</code>, 并且在其中定义我们的常量</li><li>定义常量时, 我们可以使用ES2015中的风格, 使用一个常量来作为函数的名称.</li></ul><p>我们在src/store 下新建 mutation-types.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span> <span class="keyword">const</span> <span class="variable constant_">UPDATA_INFO</span> = <span class="string">&#x27;UPDATE_INFO&#x27;</span></span><br></pre></td></tr></table></figure><p>这样的话我们在 index.js 中可以导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">&#x27;./mutation-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">info</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        [tyoes.<span class="property">UPDATE_INFO</span>](state,payload)&#123;</span><br><span class="line">            state.<span class="property">info</span> = &#123;...state.<span class="property">info</span>,<span class="string">&#x27;height&#x27;</span>:payload.<span class="property">height</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>我们在其他 .vue 组件中也可以使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的个人信息: &#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateInfo&quot;</span>&gt;</span>更新信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="variable constant_">UPDATE_INFO</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./store/mutation-types&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">info</span></span></span><br><span class="line"><span class="language-javascript">        &#125; </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateInfo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;UPDATE_INFO&#x27;</span>,&#123;<span class="attr">height</span>: <span class="number">1.88</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤Mutation同步函数"><a href="#⑤Mutation同步函数" class="headerlink" title="⑤Mutation同步函数"></a>⑤Mutation同步函数</h4><p>通常情况下，Vuex 要求我们 Mutation 中的方法必须是同步方法</p><ul><li>主要的原因是当我们使用 devtools 时，devtools 可以帮助我们捕捉 mutation 的快照</li><li>但是如果是异步操作，那么 devtools 将不能很好的追踪这个操作什么时候会被完成。</li><li>So,通常情况下,不要在 mutation 中进行异步的操作</li></ul><h3 id="Action的基本定义"><a href="#Action的基本定义" class="headerlink" title="Action的基本定义"></a>Action的基本定义</h3><p>我们强调，不要在 Mutation 中进行异步操作，但是某些情况，我们确实希望在 Vuex 中进行一些异步操作，比如网络请求，必然是异步的，Action 类似于 Mutation，但是是用来代替 Mutation 进行异步操作的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">       <span class="attr">count</span>: <span class="number">0</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">context</span>)&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>context 是什么？</p><ul><li>context 是 store 对象具有相同方法和属性的对象</li><li>也就是说，我们可以通过 context 去进行 commit 相关的操作，也可以获取 context.state 等。</li></ul><h4 id="①Action的分发"><a href="#①Action的分发" class="headerlink" title="①Action的分发"></a>①Action的分发</h4><p>在Vue组件中，如果我们调用 action 中的方法，那么就需要使用 dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，也是支持传递 payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;increment&#x27;</span>, &#123;<span class="attr">cCount</span>: <span class="number">5</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">       <span class="attr">count</span>: <span class="number">0</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state,payload</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span> += payload.<span class="property">cCount</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">context,payload</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>,payload)</span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h4 id="②Action返回的Promise"><a href="#②Action返回的Promise" class="headerlink" title="②Action返回的Promise"></a>②Action返回的Promise</h4><p>在 Action 中，我们可以将异步操作放在一个 Promise 中，并且在成功或者失败之后，调用对应的 resolve 或 reject</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">context</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">                <span class="title function_">resolve</span>()</span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在其他 Vue 组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;increment&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完成了更新操作&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="认识-Module"><a href="#认识-Module" class="headerlink" title="认识 Module"></a>认识 Module</h2><p>Module 是模块的意思，为什么在 Vuex 中我们要使用模块呢？</p><ul><li>Vue 使用单一状态树，那么也意味着很多状态都会交给 Vuex 来管理</li><li>当应用变得非常复杂时， store 对象就有可能变得相当臃肿</li><li>为了解决这个问题，Vuex 允许我们将 store 分割成某块，而每个模块拥有自己的 state、mutations、action、getters等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleA</span> = &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleB</span> = &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: moduleA,</span><br><span class="line">        <span class="attr">b</span>: moduleB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span><span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span><span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2.0 </tag>
            
            <tag> Vue-router </tag>
            
            <tag> Vue Cli </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue cli笔记</title>
      <link href="/myblog.github.io/2022/04/24/vue%20cli%E7%AC%94%E8%AE%B0/"/>
      <url>/myblog.github.io/2022/04/24/vue%20cli%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p> 第一步定义混合：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第二步使用混入：</p><p> ​    全局混入：<code>Vue.mixin(xxx)</code><br> ​    局部混入：<code>mixins:[&#39;xxx&#39;]    </code></p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p> ​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p> ​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p> ​            1).一个组件在用：放在组件自身即可。</p><p> ​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p> ​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p> ​    (1).父组件 ==&gt; 子组件 通信</p><p> ​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p> ​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p> ​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p> ​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>  一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​        多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>​    作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2.0 </tag>
            
            <tag> Vue-router </tag>
            
            <tag> Vue Cli </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3快速上手</title>
      <link href="/myblog.github.io/2022/04/24/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/myblog.github.io/2022/04/24/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /><h1 id="Vue3简介"><a href="#Vue3简介" class="headerlink" title="Vue3简介"></a>Vue3简介</h1><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h1 id="Vue3带来了什么"><a href="#Vue3带来了什么" class="headerlink" title="Vue3带来了什么"></a>Vue3带来了什么</h1><h3 id="性能的提升"><a href="#性能的提升" class="headerlink" title="性能的提升"></a>性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="源码的升级"><a href="#源码的升级" class="headerlink" title="源码的升级"></a>源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="拥抱TypeScript"><a href="#拥抱TypeScript" class="headerlink" title="拥抱TypeScript"></a>拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="新的特性"><a href="#新的特性" class="headerlink" title="新的特性"></a>新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="创建Vue3-0工程"><a href="#创建Vue3-0工程" class="headerlink" title="创建Vue3.0工程"></a>创建Vue3.0工程</h1><h2 id="使用-vue-cli-创建"><a href="#使用-vue-cli-创建" class="headerlink" title="使用 vue-cli 创建"></a>使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="常用-Composition-API"><a href="#常用-Composition-API" class="headerlink" title="常用 Composition API"></a>常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="拉开序幕的setup"><a href="#拉开序幕的setup" class="headerlink" title="拉开序幕的setup"></a>拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="Vue3-0中的响应式原理"><a href="#Vue3-0中的响应式原理" class="headerlink" title="Vue3.0中的响应式原理"></a>Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li>实现原理: <ul><li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过Reflect（反射）:  对源对象的属性进行操作。</li><li>MDN文档中描述的Proxy与Reflect：<ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="reactive对比ref"><a href="#reactive对比ref" class="headerlink" title="reactive对比ref"></a>reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li> reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="setup的两个注意点"><a href="#setup的两个注意点" class="headerlink" title="setup的两个注意点"></a>setup的两个注意点</h2><ul><li>setup执行的时机<ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li>setup的参数<ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="computed函数"><a href="#computed函数" class="headerlink" title="computed函数"></a>computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="watchEffect函数"><a href="#watchEffect函数" class="headerlink" title="watchEffect函数"></a>watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px" /></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px" /></div><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 Composition API</h1><h2 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Demo&#x27;,</span><br><span class="line">setup()&#123;</span><br><span class="line">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">//自定义一个myRef</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer</span><br><span class="line">//通过customRef去实现自定义</span><br><span class="line">return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer = setTimeout(()=&gt;&#123;</span><br><span class="line">value = newValue</span><br><span class="line">trigger() //告诉Vue去更新界面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">return &#123;</span><br><span class="line">keyword</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" /><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h1><h2 id="Options-API-存在的问题"><a href="#Options-API-存在的问题" class="headerlink" title="Options API 存在的问题"></a>Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" /></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> </div><h2 id="Composition-API-的优势-1"><a href="#Composition-API-的优势-1" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><h1 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h1><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="全局API的转移"><a href="#全局API的转移" class="headerlink" title="全局API的转移"></a>全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="其他改变"><a href="#其他改变" class="headerlink" title="其他改变"></a>其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-router </tag>
            
            <tag> Vue Cli </tag>
            
            <tag> Vuex </tag>
            
            <tag> Vue3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>②、jQuery，Hold on!</title>
      <link href="/myblog.github.io/2022/04/24/%E2%91%A1%E3%80%81jQuery%EF%BC%8CHold%20on!/"/>
      <url>/myblog.github.io/2022/04/24/%E2%91%A1%E3%80%81jQuery%EF%BC%8CHold%20on!/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="②、jQuery，Hold-on"><a href="#②、jQuery，Hold-on" class="headerlink" title="②、jQuery，Hold on!"></a>②、jQuery，Hold on!</h1><h1 id="✍、jQuery完结篇（二）"><a href="#✍、jQuery完结篇（二）" class="headerlink" title="✍、jQuery完结篇（二）"></a>✍、jQuery完结篇（二）</h1><h1 id="jQuery事件🔥"><a href="#jQuery事件🔥" class="headerlink" title="jQuery事件🔥"></a>jQuery事件🔥</h1><h2 id="jQuery事件注册🔥"><a href="#jQuery事件注册🔥" class="headerlink" title="jQuery事件注册🔥"></a>jQuery事件注册🔥</h2><h3 id="单个事件注册🔥"><a href="#单个事件注册🔥" class="headerlink" title="单个事件注册🔥"></a>单个事件注册🔥</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.事件(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;事件处理程序&#125;)</span><br></pre></td></tr></table></figure><p>其他事件和原生基本一致。</p><p>比如mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll 等</p><h2 id="jQuery事件处理🔥"><a href="#jQuery事件处理🔥" class="headerlink" title="jQuery事件处理🔥"></a>jQuery事件处理🔥</h2><h3 id="事件处理-on-绑定事件🔥"><a href="#事件处理-on-绑定事件🔥" class="headerlink" title="事件处理 on()绑定事件🔥"></a>事件处理 on()绑定事件🔥</h3><ul><li><code>on()</code> 方法在匹配元素上绑定一个或多个事件的事件处理函数</li><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">on</span>(events,[selector],fn)</span><br></pre></td></tr></table></figure><ul><li><code>events</code> ：一个或多个空格分隔的事件类型，如 “click” 或 “keydown”</li><li>selector：元素的子元素选择器</li><li>fn：回调函数，即绑定在元素身上的侦听函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(&#123;</span><br><span class="line">    <span class="attr">mouseenter</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;skyblue&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">click</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;purple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="①on-方法优势1"><a href="#①on-方法优势1" class="headerlink" title="①on() 方法优势1"></a>①on() 方法优势1</h4><ul><li>可以绑定多个事件，多个处理事件处理程序。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(&#123;</span><br><span class="line">    <span class="attr">mouseover</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="attr">mouseout</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="attr">click</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>如果事件处理程序相同</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;mouseover mouseout&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">this</span>.<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="②on-方法优势2"><a href="#②on-方法优势2" class="headerlink" title="②on()方法优势2"></a>②on()方法优势2</h4><ul><li>可以事件委派操作.事件委派的定义就是，<strong>把原来加给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件是绑定在ul身上，只有一个ul 添加了点击事件，但是触发对象是li，会发生事件冒泡，冒泡到父亲身上，父亲就会执行这个函数</span></span><br></pre></td></tr></table></figure><ul><li>在此之前有bind(), live() delegate()等方法来处理事件绑定或者事件委派，最新版本的请用on替代他们。</li></ul><h4 id="③on-方法优势3"><a href="#③on-方法优势3" class="headerlink" title="③on()方法优势3"></a>③on()方法优势3</h4><p><strong>动态创建的元素，click()没有办法绑定事件</strong>，on() 可以给未来动态生成的元素绑定事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方法</span></span><br><span class="line">$(<span class="string">&quot;ol li&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;ol&quot;</span>).<span class="title function_">append</span>(li);</span><br><span class="line"><span class="comment">// 没有用，动态创建的元素没有办法绑定事件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// on可以给未来动态创建的元素绑定事件</span></span><br><span class="line">$(<span class="string">&quot;ol&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;ol&quot;</span>).<span class="title function_">append</span>(li);</span><br><span class="line"><span class="number">123456789101112131415</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我们都是好孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 单个事件注册</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).click(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     $(this).css(&quot;background&quot;, &quot;purple&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).mouseenter(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     $(this).css(&quot;background&quot;, &quot;skyblue&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 事件处理on</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (1) on可以绑定1个或者多个事件处理程序</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).on(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     mouseenter: function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;skyblue&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     click: function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;purple&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     mouseleave: function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;blue&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;mouseenter mouseleave&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (2) on可以实现事件委托（委派）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;ul li&quot;).click();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (3) on可以给未来动态创建的元素绑定事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;ol li&quot;).click(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     alert(11);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ol&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ol&quot;</span>).<span class="title function_">append</span>(li);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="事件处理-off-解绑事件🔥"><a href="#事件处理-off-解绑事件🔥" class="headerlink" title="事件处理 off()解绑事件🔥"></a>事件处理 off()解绑事件🔥</h3><ul><li>off() 方法可以移除通过on()方法添加的事件处理程序。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">off</span>(); <span class="comment">// 这个是接除了div身上的所有事件</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>);  <span class="comment">//这个是解除了div身上的点击事件</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>); <span class="comment">//这个是解绑事件委托</span></span><br></pre></td></tr></table></figure><ul><li>如果有些事件只想执行一次就不再执行，可以使用one() 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">one</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">123</span></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function() &#123;</span><br><span class="line">            $(&quot;div&quot;).on(&#123;</span><br><span class="line">                click: function() &#123;</span><br><span class="line">                    console.log(&quot;我点击了&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                mouseover: function() &#123;</span><br><span class="line">                    console.log(&#x27;我鼠标经过了&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(&quot;ul&quot;).on(&quot;click&quot;, &quot;li&quot;, function() &#123;</span><br><span class="line">                alert(11);</span><br><span class="line">            &#125;);</span><br><span class="line">            // 1. 事件解绑 off </span><br><span class="line">            // $(&quot;div&quot;).off();  // 这个是解除了div身上的所有事件</span><br><span class="line">            $(&quot;div&quot;).off(&quot;click&quot;); // 这个是解除了div身上的点击事件</span><br><span class="line">            $(&quot;ul&quot;).off(&quot;click&quot;, &quot;li&quot;);</span><br><span class="line">            // 2. one() 但是它只能触发事件一次</span><br><span class="line">            $(&quot;p&quot;).one(&quot;click&quot;, function() &#123;</span><br><span class="line">                alert(11);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;我是屁&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="自动触发事件trigger-🔥"><a href="#自动触发事件trigger-🔥" class="headerlink" title="自动触发事件trigger()🔥"></a>自动触发事件trigger()🔥</h3><p>有些事件希望自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.元素.事件()</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.元素.trigger(&quot;事件&quot;)</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.元素.triggerHandler(&quot;事件&quot;) 不会触发元素的默认行为</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">triggerHandler</span>(<span class="string">&quot;click&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><code>triggerHandler</code> 模式不会触发元素的默认行为，这是和前面两种的区别。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="title function_">alert</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">           &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 自动触发事件</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 1. 元素.事件()</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// $(&quot;div&quot;).click();会触发元素的默认行为</span></span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 2. 元素.trigger(&quot;事件&quot;)</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// $(&quot;div&quot;).trigger(&quot;click&quot;);会触发元素的默认行为</span></span></span><br><span class="line"><span class="language-javascript">           $(<span class="string">&quot;input&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;focus&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// 3. 元素.triggerHandler(&quot;事件&quot;) 就是不会触发元素的默认行为</span></span></span><br><span class="line"><span class="language-javascript">           $(<span class="string">&quot;div&quot;</span>).<span class="title function_">triggerHandler</span>(<span class="string">&quot;click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">           $(<span class="string">&quot;input&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;focus&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               $(<span class="variable language_">this</span>).<span class="title function_">val</span>(<span class="string">&quot;你好吗&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">           &#125;);</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// $(&quot;input&quot;).triggerHandler(&quot;focus&quot;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery事件对象🔥"><a href="#jQuery事件对象🔥" class="headerlink" title="jQuery事件对象🔥"></a>jQuery事件对象🔥</h2><p>事件被触发，就会有事件对象的产生</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">on</span>(events,[selector],<span class="keyword">function</span>(<span class="params">event</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li>阻止默认行为: <code>event.preventDefault()</code> 或者 <code>return false</code></li><li>阻止冒泡 : <code>event.stopPropagation()</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了document&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(event);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jQuery其他方法🔥"><a href="#jQuery其他方法🔥" class="headerlink" title="jQuery其他方法🔥"></a>jQuery其他方法🔥</h1><h2 id="jQuery对象拷贝🔥"><a href="#jQuery对象拷贝🔥" class="headerlink" title="jQuery对象拷贝🔥"></a>jQuery对象拷贝🔥</h2><p>如果想要把某个对象拷贝(合并)给另外一个对象使用，此时可以使用<code>$.extend()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">extend</span>([deep],target,object1,[objectN])</span><br></pre></td></tr></table></figure><ul><li><code>deep</code>:如果设为true为深拷贝，默认为false 浅拷贝</li><li><code>target</code>: 要拷贝的目标对象</li><li><code>object1</code>:待拷贝到第一个对象的对象</li><li><code>objectN</code>:待拷贝的第N个对象的对象</li><li>浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象，修改目标对象会影响被拷贝对象</li><li>深拷贝，前面加true，完全克隆(拷贝的对象，而不是地址),修改目标对象不会影响被拷贝对象</li><li>深拷贝把里面的数据完全复制一份给目标对象，如果里面有不冲突的属性，会合并到一起</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> targetObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&quot;andy&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// $.extend(target,obj);</span></span><br><span class="line">    $.<span class="title function_">extend</span>(targetObj,obj);     <span class="comment">// 会覆盖targetObj里面原来的数据</span></span><br><span class="line">    <span class="comment">// 把 obj 拷贝给 targetObj</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">12345678910</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">msg</span>: &#123;</span><br><span class="line">                        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> obj = &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&quot;andy&quot;</span>,</span><br><span class="line">                    <span class="attr">msg</span>: &#123;</span><br><span class="line">                        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="comment">// 1. 浅拷贝把原来对象里面的复杂数据类型地址拷贝给目标对象</span></span><br><span class="line">        <span class="comment">// targetObj.msg.age = 20;</span></span><br><span class="line">        <span class="comment">// console.log(targetObj);</span></span><br><span class="line">        <span class="comment">// console.log(obj);</span></span><br><span class="line">        <span class="comment">// 2. 深拷贝把里面的数据完全复制一份给目标对象 如果里面有不冲突的属性,会合并到一起 </span></span><br><span class="line">        $.<span class="title function_">extend</span>(<span class="literal">true</span>, targetObj, obj);</span><br><span class="line">        <span class="comment">// console.log(targetObj); // 会覆盖targetObj 里面原来的数据</span></span><br><span class="line">        targetObj.<span class="property">msg</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj); <span class="comment">// msg :&#123;sex: &quot;男&quot;, age: 20&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><h2 id="jQuery多库共存🔥"><a href="#jQuery多库共存🔥" class="headerlink" title="jQuery多库共存🔥"></a>jQuery多库共存🔥</h2><ul><li>jQuery使用<code>$</code>作为标示符，随着jQuery的流行,其他 js 库也会用这<code>$</code>作为标识符， 这样一起使用会引起冲突</li><li>需要一个解决方案，让jQuery 和其他的js库不存在冲突，可以同时存在，这就叫做多库共存。</li></ul><p>解决方案：</p><ol><li>把里面的 $ 符号统一改为 jQuery。 比如 jQuery(’‘div’’)</li><li>jQuery 变量规定新的名称：$.noConflict() var xx = $.noConflict();</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function() &#123;</span><br><span class="line">            function $(ele) &#123;</span><br><span class="line">                return document.querySelector(ele);</span><br><span class="line">            &#125;</span><br><span class="line">            console.log($(&quot;div&quot;));</span><br><span class="line">            // 1. 如果$ 符号冲突 我们就使用 jQuery</span><br><span class="line">            jQuery.each();</span><br><span class="line">            // 2. 让jquery 释放对$ 控制权 让用自己决定</span><br><span class="line">            var suibian = jQuery.noConflict();</span><br><span class="line">            console.log(suibian(&quot;span&quot;));</span><br><span class="line">            suibian.each();</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="jQuery插件🔥"><a href="#jQuery插件🔥" class="headerlink" title="jQuery插件🔥"></a>jQuery插件🔥</h1><p>jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。</p><p><strong>注意</strong>: 这些插件也是依赖于jQuery来完成的，所以必须要先引入jQuery文件，因此也称为 jQuery 插件。</p><p>jQuery 插件常用的网站:</p><ol><li>jQuery插件库 <a href="http://www.jq22.com/">http://www.jq22.com/</a> (需要登录)</li><li>jQuery之家 <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a> (不需登录，推荐)</li></ol><h2 id="jQuery插件使用步骤🔥"><a href="#jQuery插件使用步骤🔥" class="headerlink" title="jQuery插件使用步骤🔥"></a>jQuery插件使用步骤🔥</h2><ol><li>引入相关文件(jQuery文件和插件文件)</li><li>复制相关 html，css，js(调用插件)</li></ol><h2 id="瀑布流插件🔥"><a href="#瀑布流插件🔥" class="headerlink" title="瀑布流插件🔥"></a>瀑布流插件🔥</h2><ol><li>我们打开 jQuery 之家，选择我们需要的 jQuery 插件，直接下载插件即可(这里以瀑布流插件为例)</li></ol><p><img src="https://img-blog.csdnimg.cn/1bbbf4173fcf40f6a0abb5cd303b6966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>我们下载完是一个压缩包，直接解压即可</li></ol><p><img src="https://img-blog.csdnimg.cn/33ea0341f2774aff81f1b3e8f7e0ee40.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>打开 index.html，右击检查网页源代码</li></ol><p><img src="https://img-blog.csdnimg.cn/fe3ab55a532a4a40a87d439f69e8a5bf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>我们发现此插件引入了 css ，js。我们将解压好的文件夹中的css、js拷贝到我们自己所需的文件夹中</li></ol><p><img src="https://img-blog.csdnimg.cn/45203ac85ac5470b8aca60b5bda46c4b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>我们接着看我们刚才打开的 index.html ，此插件引入了 css ，js，我们将其引用部分复制粘贴进我们自己的网页中</li></ol><p><img src="https://img-blog.csdnimg.cn/99394958239d4a21890230e2350f8fab.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/72b7432681c5426c99fd992cd4862bdd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/88f88270ef8a4501accf8e633a366ab5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/077863979bdc461482cb00b1188cbf6d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>接下来我们只需修改 HTML 部分即可。我们在下载插件的页面 下滑查看插件的 HTML结构，在打开的 index.html 中复制展示的段落代码，粘贴进我们自己的 HTML 网页中，并进行图片的更换</li></ol><p><img src="https://img-blog.csdnimg.cn/ee61275c4a1c40a6b502199215e3dcac.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/3801285ab82e4d75bad4f70353f66492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/92cf030e23a04ec0aae2bc9866756bba.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>最后，完事大成，我们来看看我们自己的效果</p><p><img src="https://img-blog.csdnimg.cn/1fc1b2964ffb4ffea7aa58adbf60f172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这样就和插件效果一模一样了，我们在 插件下载页面 下滑，可以看到我们的配置参数，自己也可以在 引入内部js 代码中进行修改</p><p><img src="https://img-blog.csdnimg.cn/b40522c430b74423a2b01c7c9a77eb31.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="jQuery图片懒加载🔥"><a href="#jQuery图片懒加载🔥" class="headerlink" title="jQuery图片懒加载🔥"></a>jQuery图片懒加载🔥</h2><ul><li>图片懒加载(图片使用延迟加载在可提高网页下载速度。它也能帮助减轻服务器负载)</li><li>当我们页面滑动到可视区域，再显示图片</li><li>我们使用 jquery 插件库 EasyLazyload。 注意，此时的js引入文件和js调用必须写到 DOM元素（图片）最后面</li></ul><p><img src="https://img-blog.csdnimg.cn/1f3db1d9642f4d24afcf942cf74f0222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>下载插件，并解压插件</li><li>打开 index.html，右键 查看网页源代码</li></ol><p><img src="https://img-blog.csdnimg.cn/497d32587f614240875fca15a57d191d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>将其需要引入的 css、js 文件复制到我们自己的网页文件夹中</li><li>将其引入的代码复制进我们自己的网页结构中，</li><li>在下载插件页面 下滑查看使用方法，将 HTML 结构也复制进我们自己的网页结构中</li></ol><p><img src="https://img-blog.csdnimg.cn/c2d94b0704054e6bb5cc1ef159f2b538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="全屏滚动插件fullpage-js🔥"><a href="#全屏滚动插件fullpage-js🔥" class="headerlink" title="全屏滚动插件fullpage.js🔥"></a>全屏滚动插件fullpage.js🔥</h2><p>GitHub地址：<a href="https://github.com/alvarotrigo/fullPage.js">https://github.com/alvarotrigo/fullPage.js</a></p><p>中文翻译网站：<a href="https://www.dowebok.com/demo/2014/77/">https://www.dowebok.com/demo/2014/77/</a></p><p>和上面插件一样，下载解压，查看使用方法即可食用。</p>]]></content>
      
      
      <categories>
          
          <category> JQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax前后端交互利器详解(一)</title>
      <link href="/myblog.github.io/2022/04/24/Ajax%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E5%88%A9%E5%99%A8%E8%AF%A6%E8%A7%A3(%E4%B8%80)/"/>
      <url>/myblog.github.io/2022/04/24/Ajax%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E5%88%A9%E5%99%A8%E8%AF%A6%E8%A7%A3(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>参考配套视频：<a href="https://www.bilibili.com/video/BV1ji4y1876Y?p=2">web前后端交互 Ajax</a></li></ul><h1 id="Ajax运行原理"><a href="#Ajax运行原理" class="headerlink" title="Ajax运行原理"></a>Ajax运行原理</h1><p>Ajax 相当于浏览器发送请求与接收响应的代理人，以实现在不影响用户浏览页面的情况下，局部更新页面数据，从而提高用户体验</p><p><img src="https://img-blog.csdnimg.cn/568aa71079ab4b6a973fddc68a6fc2fb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="Ajax实现步骤"><a href="#Ajax实现步骤" class="headerlink" title="Ajax实现步骤"></a>Ajax实现步骤</h2><ol><li>创建Ajax对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><ol><li>告诉Ajax 请求地址以及请求方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(method,url);</span><br></pre></td></tr></table></figure><ol><li>发送请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(body);<span class="comment">// get请求不传 body参数,只有 post 请求使用</span></span><br></pre></td></tr></table></figure><ol><li>获取服务器端给客户端的响应数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xhr.responseText 接收文本格式的响应数据</span></span><br><span class="line">    <span class="comment">// xhr.responseXML 接收 xml 格式的响应数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建ajax对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.告诉Ajax对象要向哪发送地址，以什么样的方式发送请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// (1)请求方式 (2)请求地址</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://localhost:3000/first&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.发送请求</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4.获取服务器端响应到客户端的数据</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// xhr.responseText </span></span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在服务器端创建路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/first&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello,ajax&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/eeb02a92ecb0418da380bb00e2586879.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="服务器端响应的数据格式"><a href="#服务器端响应的数据格式" class="headerlink" title="服务器端响应的数据格式"></a>服务器端响应的数据格式</h2><ul><li>在真实的项目中，服务器端<strong>大多数情况下会以 JSON 对象作为响应数据的格式</strong>。</li><li>当客户端拿到响应数据时，要将 JSON 数据和 HTML 字符串进行拼接，然后将拼接的结果展示在页面中。</li><li>在 http 请求与响应的过程中，无论是请求参数还是响应内容，如果是对象类型，最终都会被转换为对象字符串进行传输。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2.告诉Ajax对象要向哪发送地址，以什么样的方式发送请求</span></span><br><span class="line">    <span class="comment">// (1)请求方式 (2)请求地址</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:3000/responseData&#x27;</span>);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4.获取服务器端响应到客户端的数据</span></span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在 app.js 中设置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/responseData&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 响应一个 json 对象</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d0f6a7b5517c47d3b4cc21f2d6551056.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>我们需要将 json 字符串转换为 json 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>()  <span class="comment">//将 json 字符串转换为json对象</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2.告诉Ajax对象要向哪发送地址，以什么样的方式发送请求</span></span><br><span class="line">    <span class="comment">// (1)请求方式 (2)请求地址</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:3000/responseData&#x27;</span>);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4.获取服务器端响应到客户端的数据</span></span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 将JSON字符串转换为JSON对象</span></span><br><span class="line">        <span class="keyword">var</span> responseText = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="comment">// 测试:在控制台输出处理结果</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(responseText)</span><br><span class="line">        <span class="comment">// 将数据和html字符串进行拼接</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;&lt;h2&gt;&#x27;</span> + responseText.<span class="property">name</span> + <span class="string">&#x27;&lt;/h2&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 将拼接的结果追加到页面中</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = str;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/874a2bec416b43f185cd6133176b83f3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="传递get请求参数"><a href="#传递get请求参数" class="headerlink" title="传递get请求参数"></a>传递get请求参数</h2><ul><li>传统网站表单提交</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://www.example.com&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!– http://www.example.com?username=zhangsan&amp;password=123456 --&gt;</span><br></pre></td></tr></table></figure><ul><li>GET请求方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.example.com?name=zhangsan&amp;age=20&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;username&quot;&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;age&quot;&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;btn&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        // 获取按钮元素</span><br><span class="line">        var btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">        // 获取姓名文本框</span><br><span class="line">        var username = document.getElementById(&#x27;username&#x27;);</span><br><span class="line">        // 获取年龄文本框</span><br><span class="line">        var age = document.getElementById(&#x27;age&#x27;);</span><br><span class="line">        // 为按钮添加点击事件</span><br><span class="line">        btn.onclick = function() &#123;</span><br><span class="line">            // 创建ajax对象</span><br><span class="line">            var xhr = new XMLHttpRequest();</span><br><span class="line">            // 获取用户在文本框中输入的值</span><br><span class="line">            var nameValue = username.value;</span><br><span class="line">            var ageValue = age.value;</span><br><span class="line">            // 拼接请求参数</span><br><span class="line">            var params = &#x27;username=&#x27; + nameValue + &#x27;&amp;age=&#x27; + ageValue;</span><br><span class="line">            // 配置ajax对象请求方式和请求地址</span><br><span class="line">            xhr.open(&#x27;get&#x27;, &#x27;http://localhost:3000/get?&#x27; + params);</span><br><span class="line">            // 发送请求</span><br><span class="line">            xhr.send();</span><br><span class="line">            // 获取服务器端响应的数据</span><br><span class="line">            xhr.onload = function() &#123;</span><br><span class="line">                console.log(xhr.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在 app.js 中创建路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 get 请求参数</span></span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">query</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5a0f81036a4c4946bced67bb4114bdd6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>请求报文</p><p>在 HTTP 请求和响应的过程中传递的数据块就叫<strong>报文</strong>，包括要传送的数据和一些附加信息，这些数据和信息要遵守规定好的格式</p><h2 id="传递POST请求参数"><a href="#传递POST请求参数" class="headerlink" title="传递POST请求参数"></a>传递POST请求参数</h2><ul><li>POST请求方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// post请求必须要设置请求参数格式的类型</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>) </span><br><span class="line"><span class="comment">// 发送请求(POST请求要带参数)</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name=zhangsan&amp;age=20&#x27;</span>);</span><br><span class="line"><span class="number">1234</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;username&quot;&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;age&quot;&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;btn&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        // 获取按钮元素</span><br><span class="line">        var btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">        // 获取姓名文本框</span><br><span class="line">        var username = document.getElementById(&#x27;username&#x27;);</span><br><span class="line">        // 获取年龄文本框</span><br><span class="line">        var age = document.getElementById(&#x27;age&#x27;);</span><br><span class="line">        // 为按钮添加点击事件</span><br><span class="line">        btn.onclick = function() &#123;</span><br><span class="line">            // 创建ajax对象</span><br><span class="line">            var xhr = new XMLHttpRequest();</span><br><span class="line">            // 获取用户在文本框中输入的值</span><br><span class="line">            var nameValue = username.value;</span><br><span class="line">            var ageValue = age.value;</span><br><span class="line">            // 拼接请求参数</span><br><span class="line">            var params = &#x27;username=&#x27; + nameValue + &#x27;&amp;age=&#x27; + ageValue;</span><br><span class="line">            // 配置ajax对象请求方式和请求地址</span><br><span class="line">            xhr.open(&#x27;post&#x27;, &#x27;http://localhost:3000/post&#x27;);</span><br><span class="line">            // 设置请求参数格式的类型(post请求必须要设置)</span><br><span class="line">            xhr.setRequestHeader(&#x27;Content-type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;);</span><br><span class="line"></span><br><span class="line">            // 发送请求(POST请求要带参数)</span><br><span class="line">            xhr.send(params);</span><br><span class="line">            // 获取服务器端响应的数据</span><br><span class="line">            xhr.onload = function() &#123;</span><br><span class="line">                console.log(xhr.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在 app.js 中创建路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 第三方模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 post 请求参数</span></span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">body</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：借助了第三方模块 body-parser</p><p><img src="https://img-blog.csdnimg.cn/99f1d74cf6df4befaa89d9a805920454.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="请求参数的格式"><a href="#请求参数的格式" class="headerlink" title="请求参数的格式"></a>请求参数的格式</h2><p>我们客户端在向服务器端发送请求参数有以下几种格式，不同的格式需要设置的请求头也是不一样的</p><ol><li>设置请求头为 <code>application/x-www-form-urlencoded</code> ,传递如下请求参数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=zhangsan&amp;age=20&amp;sex=男</span><br></pre></td></tr></table></figure><ol><li>设置请求头为 <code>application/json</code> ,传递如下请求参数，是 json 对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>在请求头中指定 Content-Type 属性的值是 application/json，告诉服务器端当前请求参数的格式是 json，我们还需要将 json 对象转换为 json 字符串，因为请求参数必须要以字符串格式传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>() <span class="comment">// 将json对象转换为json字符串</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2.告诉Ajax对象要向哪发送请求，以什么方式发送请求</span></span><br><span class="line">    <span class="comment">// 1)请求方式 2)请求地址</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://localhost:3000/json&#x27;</span>);</span><br><span class="line">    <span class="comment">// 通过请求头告诉服务器端客户端向服务器端传递的请求参数的格式是什么</span></span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">    <span class="comment">// JSON.stringify() 将json对象转换为json字符串</span></span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,<span class="attr">age</span>: <span class="number">50</span>&#125;));</span><br><span class="line">    <span class="comment">// 4.获取服务器端响应到客户端的数据</span></span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在app.js 中配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 第三方模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/json&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">body</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/04017bf39b234c0cb0a0ef2ef1a9fc02.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><strong>注意：get 请求是不能提交 json 对象数据格式的，传统网站的表单提交也是不支持 json 对象数据格式的。</strong></p><h2 id="获取服务器端的响应"><a href="#获取服务器端的响应" class="headerlink" title="获取服务器端的响应"></a>获取服务器端的响应</h2><h3 id="Ajax状态码"><a href="#Ajax状态码" class="headerlink" title="Ajax状态码"></a>Ajax状态码</h3><p>在创建ajax对象，配置ajax对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值，这个数值就是ajax状态码。</p><blockquote><p>0：请求未初始化(还没有调用open())<br> 1：请求已经建立，但是还没有发送(还没有调用send())<br> 2：请求已经发送<br> 3：请求正在处理中，通常响应中已经有部分数据可以用了<br> 4：响应已经完成，可以获取并使用服务器的响应了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">readyState</span> <span class="comment">// 获取Ajax状态码</span></span><br></pre></td></tr></table></figure><h3 id="onreadystatechange事件"><a href="#onreadystatechange事件" class="headerlink" title="onreadystatechange事件"></a>onreadystatechange事件</h3><p>当 Ajax 状态码发生变化时将自动触发该事件。</p><p>在事件处理函数中可以获取 Ajax 状态码并对其进行判断，当状态码为 4 时就可以通过 xhr.responseText 获取服务器端的响应数据了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 0 已经创建了ajax对象 但是还没有对ajax对象进行配置</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>);</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:3000/readystate&#x27;</span>);</span><br><span class="line">    <span class="comment">// 1 已经对ajax对象进行配置 但是还没有发送请求</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当ajax状态码发生变化的时候出发</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 2 请求已经发送了</span></span><br><span class="line">        <span class="comment">// 3 已经接收到服务器端的部分数据了</span></span><br><span class="line">        <span class="comment">// 4 服务器端的响应数据已经接收完成</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">readyState</span>);</span><br><span class="line">        <span class="comment">// 对ajax状态码进行判断 如果状态码的值为4就代表数据已经接收完成了</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在 app.js 中配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 第三方模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/readystate&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5b5378825a174b8391115ccdbe4d4060.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>两种获取服务器端响应方式的区别</p><table><thead><tr><th>区别描述</th><th>onload事件</th><th>onreadystatechange事件</th></tr></thead><tbody><tr><td>是否兼容IE低版本</td><td>不兼容</td><td>兼容</td></tr><tr><td>是否需要判断Ajax状态码</td><td>不需要</td><td>需要</td></tr><tr><td>被调用次数</td><td>一次</td><td>多次</td></tr></tbody></table><h2 id="Ajax错误处理"><a href="#Ajax错误处理" class="headerlink" title="Ajax错误处理"></a>Ajax错误处理</h2><ul><li>网络畅通，服务器端能接收到请求，服务器端返回的结果不是预期结果。</li><li><strong>我们可以判断服务器端返回的状态码，分别进行处理。<code>xhr.status</code> 获取http状态码</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送Ajax请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.创建ajax对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.告诉Ajax对象要向哪发送请求，以什么方式发送请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1)请求方式 2)请求地址</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:3000/error&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.获取服务器端响应到客户端的数据</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// xhr.status 获取http状态码</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">400</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&#x27;请求出错&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在app.js 中设置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 第三方模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/error&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res.status 设置http状态码</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;not ok&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ab92aa1e53ba49bf8557b1d865dc5eeb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="几种错误示例"><a href="#几种错误示例" class="headerlink" title="几种错误示例"></a>几种错误示例</h3><p>Ajax 请求报错通常会出现以下几种情况，我们来进行查看并排查</p><ol><li><p>网络畅通，服务器端没有接收到请求，返回404状态码</p><p><strong>检查请求地址是否错误。</strong></p></li></ol><p><img src="https://img-blog.csdnimg.cn/89b1225049544931a216d10e61b98879.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li><p>网络畅通，服务器端能接收到请求，服务器端返回500状态码。</p><p><strong>服务器端错误，找后端程序员进行沟通</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/error&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 打印一个未定义的变量,服务器端就会出现错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(abc);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/11329caa8d884421a1718f770541bf2a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li><p>网络中断，请求无法发送到服务器端。</p><p><strong>会触发xhr对象下面的onerror事件，在onerror事件处理函数中对错误进行处理。</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当网络中断时会触发onerrr事件</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;网络中断, 无法发送Ajax请求&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Ajax状态码: 表示Ajax请求的过程状态 ajax对象返回的(0、1、2、3、4)</li><li>Http状态码: 表示请求的处理结果 是服务器端返回的</li></ul><h2 id="低版本-IE-浏览器的缓存问题"><a href="#低版本-IE-浏览器的缓存问题" class="headerlink" title="低版本 IE 浏览器的缓存问题"></a>低版本 IE 浏览器的缓存问题</h2><p><strong>问题</strong>：在低版本的 IE 浏览器中，Ajax 请求有严重的缓存问题，即在请求地址不发生变化的情况下，只有第一次请求会真正发送到服务器端，后续的请求都会从浏览器的缓存中获取结果。即使服务器端的数据更新了，客户端依然拿到的是缓存中的旧数据。</p><p><strong>解决方案</strong>：在请求地址的后面加请求参数，保证每一次请求中的请求参数的值不相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.example.com?t=&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br></pre></td></tr></table></figure><h1 id="Ajax异步编程"><a href="#Ajax异步编程" class="headerlink" title="Ajax异步编程"></a>Ajax异步编程</h1><h2 id="同步异步概述"><a href="#同步异步概述" class="headerlink" title="同步异步概述"></a>同步异步概述</h2><p><strong>同步</strong></p><ul><li>一个人同一时间只能做一件事情，只有一件事情做完，才能做另外一件事情</li><li>落实到代码上，就是上一行代码执行完成后，才能执行下一行代码，即代码逐行执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>异步</strong></p><ul><li>一个人一件事情做了一半，转而去做其他事情，当其他事情做完以后，再回过头来继续做之前未完成的事情。</li><li>落实到代码上，就是异步代码虽然需要花费时间去执行，但程序不会等待异步代码执行完成后再继续执行后续代码，而是直接执行后续代码，当后续代码执行完成后再回头看异步代码是否返回结果，如果已有返回结果，再调用事先准备好的回调函数处理异步代码执行的结果。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before&#x27;</span>);</span><br><span class="line"> <span class="built_in">setTimeout</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;last&#x27;</span>);</span><br><span class="line"> &#125;, <span class="number">2000</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="Ajax封装"><a href="#Ajax封装" class="headerlink" title="Ajax封装"></a>Ajax封装</h2><p>问题: 发送一次请求代码过多，发送多次请求代码冗余且重复</p><p>解决方案：将请求代码封装到函数中，发请求时调用函数即可</p><p>Ajax 封装代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span> (options) &#123;</span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="keyword">var</span> defaults = &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">header</span>: &#123;</span><br><span class="line"><span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line"><span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用用户传递的参数替换默认值参数</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(defaults, options);</span><br><span class="line"><span class="comment">// 创建ajax对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 参数拼接变量</span></span><br><span class="line"><span class="keyword">var</span> params = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// 循环参数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> defaults.<span class="property">data</span>) &#123;</span><br><span class="line"><span class="comment">// 参数拼接</span></span><br><span class="line">params += attr + <span class="string">&#x27;=&#x27;</span> + defaults.<span class="property">data</span>[attr] + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line"><span class="comment">// 去掉参数中最后一个&amp;</span></span><br><span class="line">params = params.<span class="title function_">substr</span>(<span class="number">0</span>, params.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果请求方式为get</span></span><br><span class="line"><span class="keyword">if</span> (defaults.<span class="property">type</span> == <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 将参数拼接在url地址的后面</span></span><br><span class="line">defaults.<span class="property">url</span> += <span class="string">&#x27;?&#x27;</span> + params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置ajax请求</span></span><br><span class="line">xhr.<span class="title function_">open</span>(defaults.<span class="property">type</span>, defaults.<span class="property">url</span>, defaults.<span class="property">async</span>);</span><br><span class="line"><span class="comment">// 如果请求方式为post</span></span><br><span class="line"><span class="keyword">if</span> (defaults.<span class="property">type</span> == <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 设置请求头</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, defaults.<span class="property">header</span>[<span class="string">&#x27;Content-Type&#x27;</span>]);</span><br><span class="line"><span class="comment">// 如果想服务器端传递的参数类型为json</span></span><br><span class="line"><span class="keyword">if</span> (defaults.<span class="property">header</span>[<span class="string">&#x27;Content-Type&#x27;</span>] == <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 将json对象转换为json字符串</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(defaults.<span class="property">data</span>))</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(params);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求加载完成</span></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 获取服务器端返回数据的类型</span></span><br><span class="line"><span class="keyword">var</span> contentType = xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&#x27;content-type&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取服务器端返回的响应数据</span></span><br><span class="line"><span class="keyword">var</span> responseText = xhr.<span class="property">responseText</span>;</span><br><span class="line"><span class="comment">// 如果服务器端返回的数据是json数据类型</span></span><br><span class="line"><span class="keyword">if</span> (contentType.<span class="title function_">includes</span>(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line"><span class="comment">// 将json字符串转换为json对象</span></span><br><span class="line">responseText = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseText);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果请求成功</span></span><br><span class="line"><span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">// 调用成功回调函数, 并且将服务器端返回的结果传递给成功回调函数</span></span><br><span class="line">defaults.<span class="title function_">success</span>(responseText, xhr);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 调用失败回调函数并且将xhr对象传递给回调函数</span></span><br><span class="line">defaults.<span class="title function_">error</span>(responseText, xhr);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当网络中断时</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 调用失败回调函数并且将xhr对象传递给回调函数</span></span><br><span class="line">defaults.<span class="title function_">error</span>(xhr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将上述代码抽离成一个 ajax.js 文件，这样我们的客户端只需要引入 ajax.js 文件，并传递相应的参数，这样就可以大大节省我们的代码量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/ajax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p>模板引擎概述</p><p>作用: 使用模板引擎提供的模板语法，可以将数据和 HTML 拼接起来</p><p>官方地址：<a href="https://aui.github.io/art-template/zh-cn/index.html">https://aui.github.io/art-template/zh-cn/index.html</a></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>下载 art-template 模板引擎库文件并在 HTML 页面中引入库文件</li></ol><p><img src="https://img-blog.csdnimg.cn/94ec72888dcd4381af75a1b53dc2efb0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./js/template-web.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>准备 art-template 模板</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=<span class="string">&quot;tpl&quot;</span> type=<span class="string">&quot;text/html&quot;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>告诉模板引擎将哪一个模板和哪个数据进行拼接   <ul><li>第一个参数是 模板ID</li><li>第二个参数是 对象</li><li>方法的返回值就是拼接好的 html 字符串</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="title function_">template</span>(<span class="string">&#x27;tpl&#x27;</span>, &#123;<span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><ol><li>将拼接好的html字符串添加到页面中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>).<span class="property">innerHTML</span> = html;</span><br></pre></td></tr></table></figure><ol><li>通过模板语法告诉模板引擎，数据和html字符串要如何拼接</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=<span class="string">&quot;tpl&quot;</span> type=<span class="string">&quot;text/html&quot;</span>&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span> &#123;&#123; username &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h1><h2 id="FormData对象的作用"><a href="#FormData对象的作用" class="headerlink" title="FormData对象的作用"></a>FormData对象的作用</h2><ol><li>模拟HTML表单，相当于将HTML表单映射成表单对象，自动将表单对象中的数据拼接成请求参数的格式。</li><li>异步上传二进制文件</li></ol><h2 id="FormData对象的使用"><a href="#FormData对象的使用" class="headerlink" title="FormData对象的使用"></a>FormData对象的使用</h2><ol><li>准备HTML表单</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>将 HTML 表单转化为 formData 对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(form);</span><br></pre></td></tr></table></figure><ol><li>提交表单对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(formData);</span><br></pre></td></tr></table></figure><hr><p>例如客户端代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建普通的html表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取表单</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 为按钮添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将普通的html表单转换为表单对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(form);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 对ajax对象进行配置</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://localhost:3000/formData&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(formData);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 监听xhr对象下面的onload事件</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 对象http状态码进行判断</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器端代码如下：</p><ul><li>之前我们使用 body-parser 第三方模块处理客户端向服务器端提供的 POST 请求参数，但是 body-parser 不能处理客户端向服务器端提供的 formData 对象</li><li>这里要使用 formidable 第三方模块：<a href="https://www.npmjs.com/package/formidable">https://www.npmjs.com/package/formidable</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/formData&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建formidable表单解析对象</span></span><br><span class="line">    <span class="keyword">const</span> form = <span class="keyword">new</span> formidable.<span class="title class_">IncomingForm</span>();</span><br><span class="line">    <span class="comment">// 解析客户端传递过来的FormData对象</span></span><br><span class="line">    form.<span class="title function_">parse</span>(req, <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(fields);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/009d4ba773be4d028912c18f18cf75b1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><strong>注意</strong>：</p><ol><li>Formdata 对象不能用于 get 请求，因为对象需要被传递到 send 方法中，而 get 请求方式的请求参数只能放在请求地址的后面。</li><li>服务器端 bodyParser 模块不能解析 formData 对象表单数据，我们需要使用 formidable 模块进行解析</li></ol><h2 id="FormData对象的实例方法"><a href="#FormData对象的实例方法" class="headerlink" title="FormData对象的实例方法"></a>FormData对象的实例方法</h2><ol><li>获取表单对象中属性的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formData.<span class="title function_">get</span>(<span class="string">&#x27;key&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li>设置表单对象中属性的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">formData.<span class="title function_">set</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 创建普通的html表单 --&gt;</span><br><span class="line">    &lt;form id=&quot;form&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        // 获取按钮</span><br><span class="line">        var btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">        // 获取表单</span><br><span class="line">        var form = document.getElementById(&#x27;form&#x27;);</span><br><span class="line">        // 为按钮添加点击事件</span><br><span class="line">        btn.onclick = function() &#123;</span><br><span class="line">            // 将普通的html表单转换为表单对象</span><br><span class="line">            var formData = new FormData(form);</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">get(&#x27;key&#x27;) 获取表单对象属性的值</span><br><span class="line">set(&#x27;key&#x27;, &#x27;value&#x27;) 设置表单对象属性的值</span><br><span class="line">delete(&#x27;key&#x27;) 删除表单对象属性中的值</span><br><span class="line">*/</span><br><span class="line">            console.log(formData.get(&#x27;username&#x27;));</span><br><span class="line">            // 如果设置的表单属性存在 将会覆盖属性原有的值</span><br><span class="line">            formData.set(&#x27;username&#x27;, &#x27;itcast&#x27;);</span><br><span class="line">            </span><br><span class="line">            // 如果设置的表单属性不存在 将会创建这个表单属性</span><br><span class="line">            formData.set(&#x27;age&#x27;, 100);</span><br><span class="line">            </span><br><span class="line">            // 创建ajax对象</span><br><span class="line">            var xhr = new XMLHttpRequest();</span><br><span class="line">            // 对ajax对象进行配置</span><br><span class="line">            xhr.open(&#x27;post&#x27;, &#x27;http://localhost:3000/formData&#x27;);</span><br><span class="line">            // 发送ajax请求</span><br><span class="line">            xhr.send(formData);</span><br><span class="line">            // 监听xhr对象下面的onload事件</span><br><span class="line">            xhr.onload = function() &#123;</span><br><span class="line">                // 对象http状态码进行判断</span><br><span class="line">                if (xhr.status == 200) &#123;</span><br><span class="line">                    console.log(xhr.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/209a42eb7d6949488050703d986a4a71.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li>删除表单对象中属性的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formData.<span class="title function_">delete</span>(<span class="string">&#x27;key&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li>向表单对象中追加属性值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 创建普通的html表单 --&gt;</span><br><span class="line">    &lt;form id=&quot;form&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        // 获取按钮</span><br><span class="line">        var btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">        // 获取表单</span><br><span class="line">        var form = document.getElementById(&#x27;form&#x27;);</span><br><span class="line">        // 为按钮添加点击事件</span><br><span class="line">        btn.onclick = function() &#123;</span><br><span class="line">            // 将普通的html表单转换为表单对象</span><br><span class="line">            var formData = new FormData(form);</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">get(&#x27;key&#x27;) 获取表单对象属性的值</span><br><span class="line">set(&#x27;key&#x27;, &#x27;value&#x27;) 设置表单对象属性的值</span><br><span class="line">delete(&#x27;key&#x27;) 删除表单对象属性中的值</span><br><span class="line">*/</span><br><span class="line">            console.log(formData.get(&#x27;username&#x27;));</span><br><span class="line">            // 如果设置的表单属性存在 将会覆盖属性原有的值</span><br><span class="line">            formData.set(&#x27;username&#x27;, &#x27;itcast&#x27;);</span><br><span class="line">            formData.append(&#x27;username&#x27;, &#x27;itheima&#x27;);</span><br><span class="line">            // 如果设置的表单属性不存在 将会创建这个表单属性</span><br><span class="line">            formData.set(&#x27;age&#x27;, 100);</span><br><span class="line">            // 删除用户输入的密码</span><br><span class="line">            formData.delete(&#x27;password&#x27;);</span><br><span class="line">            // 创建ajax对象</span><br><span class="line">            var xhr = new XMLHttpRequest();</span><br><span class="line">            // 对ajax对象进行配置</span><br><span class="line">            xhr.open(&#x27;post&#x27;, &#x27;http://localhost:3000/formData&#x27;);</span><br><span class="line">            // 发送ajax请求</span><br><span class="line">            xhr.send(formData);</span><br><span class="line">            // 监听xhr对象下面的onload事件</span><br><span class="line">            xhr.onload = function() &#123;</span><br><span class="line">                // 对象http状态码进行判断</span><br><span class="line">                if (xhr.status == 200) &#123;</span><br><span class="line">                    console.log(xhr.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：set 方法与 append 方法的区别是，在属性名已存在的情况下，set 会覆盖已有键名的值，append会保留两个值。</p></blockquote><h2 id="FormData二进制文件上传"><a href="#FormData二进制文件上传" class="headerlink" title="FormData二进制文件上传"></a>FormData二进制文件上传</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>二进制文件上传客户端代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当用户选择文件的时候</span></span><br><span class="line"> file.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 创建空表单对象</span></span><br><span class="line">     <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">     <span class="comment">// 将用户选择的二进制文件追加到表单对象中,files属性获取到的文件是一个集合,并且默认情况下input文件选择控件只能选择一个文件,索引就为0</span></span><br><span class="line">     formData.<span class="title function_">append</span>(<span class="string">&#x27;attrName&#x27;</span>, <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">     <span class="comment">// 配置ajax对象，请求方式必须为post</span></span><br><span class="line">     xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;www.example.com&#x27;</span>);</span><br><span class="line">     xhr.<span class="title function_">send</span>(formData);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>客户端代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>请选择文件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取文件选择控件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 为文件选择控件添加onchanges事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在用户选择文件时触发</span></span></span><br><span class="line"><span class="language-javascript">        file.<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建空的formData表单对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将用户选择的文件追加到formData表单对象中</span></span></span><br><span class="line"><span class="language-javascript">            formData.<span class="title function_">append</span>(<span class="string">&#x27;attrName&#x27;</span>, <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 对ajax对象进行配置</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://localhost:3000/upload&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(formData);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 监听服务器端响应给客户端的数据</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果服务器端返回的http状态码为200</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 说明请求是成功的</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 将服务器端返回的数据显示在控制台中</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器端代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 路径处理模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源访问服务功能</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现文件上传的路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建formidable表单解析对象</span></span><br><span class="line">    <span class="keyword">const</span> form = <span class="keyword">new</span> formidable.<span class="title class_">IncomingForm</span>();</span><br><span class="line">    <span class="comment">// 设置客户端上传文件的存储路径</span></span><br><span class="line">    form.<span class="property">uploadDir</span> = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>, <span class="string">&#x27;uploads&#x27;</span>);</span><br><span class="line">    <span class="comment">// 保留上传文件的后缀名字</span></span><br><span class="line">    form.<span class="property">keepExtensions</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 解析客户端传递过来的FormData对象</span></span><br><span class="line">    form.<span class="title function_">parse</span>(req, <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a4f811f10b314eb2bf850b30e7a02855.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="FormData文件上传进度展示"><a href="#FormData文件上传进度展示" class="headerlink" title="FormData文件上传进度展示"></a>FormData文件上传进度展示</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当用户选择文件的时候</span></span><br><span class="line"> file.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 文件上传过程中持续触发onprogress事件</span></span><br><span class="line">     xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">         <span class="comment">// 当前上传文件大小/文件总大小 再将结果转换为百分数</span></span><br><span class="line">         <span class="comment">// 将结果赋值给进度条的宽度属性 </span></span><br><span class="line">         bar.<span class="property">style</span>.<span class="property">width</span> = (ev.<span class="property">loaded</span> / ev.<span class="property">total</span>) * <span class="number">100</span> + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="FormData文件上传图片即时预览"><a href="#FormData文件上传图片即时预览" class="headerlink" title="FormData文件上传图片即时预览"></a>FormData文件上传图片即时预览</h2><p>在我们将图片上传到服务器端以后，服务器端通常都会将图片地址做为响应数据传递到客户端，客户端可以从响应数据中获取图片地址，然后将图片再显示在页面中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">     <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">     img.<span class="property">src</span> = result.<span class="property">src</span>;</span><br><span class="line">     img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><iframe id="csdn-buyside-iframe2" name="csdnBuysideIframe2" src="https://mall.csdn.net/sales/vip-buyside?from=" scrolling="no" width="0" height="0" frameborder="0"></iframe>]]></content>
      
      
      <categories>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础整合</title>
      <link href="/myblog.github.io/2022/04/24/Html%E5%9F%BA%E7%A1%80/"/>
      <url>/myblog.github.io/2022/04/24/Html%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>「学习笔记」HTML基础</strong></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>勤做笔记不仅可以让自己学的扎实，更重要的是可以让自己少走弯路。有人说:”再次翻开笔记是什么感觉”，我的回答是:”初恋般的感    觉”。或许笔记不一定十全十美，但肯定会让你有种初恋般的怦然心动。💖💖<br>  本章着重复习Html的基础内容，学习Html究竟要学些什么呢？主要是学习各种标签，来搭建网页的“结构”。✨✨<br>  本篇文章主要由五个章节构成，从WEB标准到初识HTML，接着学习HTML常用标签，最后学习表格列表和表单。💪💪开始充电之旅啦~~~</p><h2 id="认识WEB"><a href="#认识WEB" class="headerlink" title="认识WEB"></a>认识WEB</h2><p><strong>「网页」</strong>主要是由<code>文字</code>、<code>图像</code>和<code>超链接</code>等元素构成，当然除了这些元素，网页中还可以包括音频、视频以及Flash等。</p><p><strong>「浏览器」</strong>是网页显示、运行的平台。</p><p><strong>「浏览器内核」</strong>(排版引擎、解释引擎、渲染引擎)</p><blockquote><p>负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p></blockquote><table><thead><tr><th align="left">浏览器</th><th align="center">内核</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">IE</td><td align="center">Trident</td><td align="left">IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td align="left">firefox</td><td align="center">Gecko</td><td align="left">可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td></tr><tr><td align="left">Safari</td><td align="center">webkit</td><td align="left">现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了）。苹果感觉像被别人抢了媳妇，都哭晕在厕所里面了。</td></tr><tr><td align="left">chrome</td><td align="center">Chromium/Blink</td><td align="left">在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td></tr><tr><td align="left">Opera</td><td align="center">blink</td><td align="left">现在跟随chrome用blink内核。</td></tr></tbody></table><h3 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h3><p><strong>「构成」</strong>👉 <strong>结构标准，表现标准和行为标准</strong></p><ul><li>结构标准用于对网页元素进行整理和分类(HTML)</li><li>表现标准用于设置网页元素的版式、颜色、大小等外观属性(CSS)</li><li>行为标准用于对网页模型的定义及交互的编写(JavaScript)</li></ul><p><strong>「Web标准的优点」</strong>👇</p><ul><li>易于维护：只需更改CSS文件，就可以改变整站的样式</li><li>页面响应快：HTML文档体积变小，响应时间短</li><li>可访问性：语义化的HTML（结构和表现相分离的HTML）编写的网页文件，更容易被屏幕阅读器识别</li><li>设备兼容性：不同的样式表可以让网页在不同的设备上呈现不同的样式</li><li>搜索引擎：语义化的HTML能更容易被搜索引擎解析，提升排名</li></ul><hr><h2 id="HTML初识"><a href="#HTML初识" class="headerlink" title="HTML初识"></a>HTML初识</h2><h3 id="HTML初识-1"><a href="#HTML初识-1" class="headerlink" title="HTML初识"></a>HTML初识</h3><p><strong>「HTML」</strong>(Hyper Text Markup Language):超文本标记语言</p><p><strong>「所谓超文本，有2层含义：」</strong></p><ul><li>因为它可以加入图片、声音、动画、多媒体等内容（超越文本限制 ）</li><li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（超级链接文本）。</li></ul><p><strong>「HTML骨架格式」</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面中最大的标签 根标签 --&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;!-- 头部标签 --&gt;</span><br><span class="line">    &lt;head&gt;     </span><br><span class="line">        &lt;!-- 标题标签 --&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt; </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;!-- 文档的主体 --&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>「团队约定大小写」</strong></p><ul><li>HTML标签名、类名、标签属性和大部分属性值统一用小写</li></ul><p><strong>「HTML元素标签分类」</strong></p><ul><li>常规元素(双标签)</li><li>空元素(单标签)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常规元素(双标签)</span><br><span class="line">&lt;标签名&gt; 内容 &lt;/标签名&gt;   比如&lt;body&gt;我是文字&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">空元素(单标签)</span><br><span class="line">&lt;标签名 /&gt;  比如 &lt;br /&gt;或&lt;br&gt;</span><br></pre></td></tr></table></figure><p><strong>「HTML标签关系」</strong></p><ul><li><p>嵌套关系父子级包含关系</p></li><li><p>并列关系兄弟级并列关系</p></li><li><ul><li>如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。</li></ul></li></ul><h3 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型<!DOCTYPE ></h3><p><strong>「文档类型」</strong>用来说明你用的XHTML或者HTML是什么版本。<!DOCTYPE html>告诉浏览器按照HTML5标准解析页面。</p><h3 id="页面语言lang"><a href="#页面语言lang" class="headerlink" title="页面语言lang"></a>页面语言lang</h3><p>lang指定该html标签内容所用的语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;  </span><br><span class="line">en 定义语言为英语 zh-CN定义语言为中文</span><br></pre></td></tr></table></figure><p><strong>「lang的作用」</strong></p><ul><li>根据根据lang属性来设定不同语言的css样式，或者字体</li><li>告诉搜索引擎做精确的识别</li><li>让语法检查程序做语言识别</li><li>帮助翻译工具做识别</li><li>帮助网页阅读程序做识别</li></ul><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p><strong>「字符集」</strong>(Character set)是多个字符的集合,计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</p><ul><li>UTF-8是目前最常用的字符集编码方式</li><li>让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>「meta viewport的用法」</strong><br>  通常viewport是指视窗、视口。浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域。在移动端和pc端视口是不同的，pc端的视口是浏览器窗口区域，而在移动端有三个不同的视口概念：布局视口、视觉视口、理想视口</p><p>  meta有两个属性name 和 http-equiv</p><p><strong>name属性的取值</strong></p><ul><li>keywords(关键字) 告诉搜索引擎，该网页的关键字</li><li>description(网站内容描述) 用于告诉搜索引擎，你网站的主要内容。</li><li>viewport(移动端的窗口)</li><li>robots(定义搜索引擎爬虫的索引方式) robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引</li><li>author(作者)</li><li>generator(网页制作软件）</li><li>copyright(版权)</li></ul><p><strong>http-equiv有以下参数</strong></p><p>http-equiv相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容</p><ul><li>content-Type 设定网页字符集(Html4用法，不推荐)</li><li>Expires(期限) ,可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。</li><li>Pragma(cache模式),是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从Cache中再调出</li><li>Refresh(刷新),自动刷新并指向新页面。</li><li>cache-control（请求和响应遵循的缓存机制）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h3><ul><li>方便代码的阅读和维护，样式丢失的时候能让页面呈现清晰的结构。</li><li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li><li>方便其他设备解析，如盲人阅读器根据语义渲染网页</li></ul><p><strong>「拓展」</strong> 标签：规定页面上所有链接的默认 URL 和设置整体链接的打开状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;base href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">    &lt;base target=&quot;_self&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;&quot;&gt;测试&lt;/a&gt; 跳转到 百度</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h2><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><p><strong>「1. 排版标签」</strong>主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><ul><li>标题标签h(h1~h6)</li><li>段落标签p,可以把 HTML 文档分割为若干段落</li><li>水平线标签hr</li><li>换行标签br</li><li>div和span标签:是没有语义的,是我们网页布局最主要的2个盒子。</li></ul><p><strong>「2. 排版标签」</strong></p><ul><li>b和strong 文字以粗体显示</li><li>i和em 文字以斜体显示</li><li>s和del 文字以加删除线显示</li><li>u和ins 文字以加下划线显示</li></ul><p><strong>「3. 标签属性(行内式)」</strong></p><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 属性1=&quot;属性值1&quot; 属性2=&quot;属性值2&quot; …&gt; 内容 &lt;/标签名&gt;</span><br><span class="line">&lt;手机 颜色=&quot;红色&quot; 大小=&quot;5寸&quot;&gt;  &lt;/手机&gt;</span><br></pre></td></tr></table></figure><p><strong>「4. 图像标签img」</strong></p><p><img src="C:\Users\Lenovo\Desktop\前后端笔记\Html笔记\20220424215803.jpg" alt="图片"><strong>注意：</strong></p><ul><li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>采取  键值对 的格式  key=”value”  的格式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;cz.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; border=&quot;3&quot; title=&quot;这是个小蒲公英&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>「5. 链接标签(重点)」</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</span><br><span class="line">target=&quot;_self&quot;  默认窗口弹出方式</span><br><span class="line">target=&quot;_blank&quot; 新窗口弹出</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">href</td><td align="left">用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td></tr><tr><td align="left">target</td><td align="left">用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</td></tr></tbody></table><p><strong>src 和 href 的区别</strong></p><p>一句话概括:<strong>src 是引入资源的 href 是跳转url的</strong></p><ol><li>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</li><li>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</li><li>href是Hypertext  Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。如果我们在文档中添加那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。</li></ol><p><strong>注意：</strong></p><ol><li>外部链接 需要添加 http:// <a href="http://www.baidu.com/">www.baidu.com</a></li><li>内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页</li><li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li><li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li></ol><p><strong>锚点定位：通过创建锚点链接，用户能够快速定位到目标内容。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 使用相应的id名标注跳转目标的位置。 (找目标)</span><br><span class="line">  &lt;h3 id=&quot;two&quot;&gt;第2集&lt;/h3&gt; </span><br><span class="line"></span><br><span class="line">2. 使用&lt;a href=&quot;#id名&quot;&gt;链接文本&lt;/a&gt;创建链接文本（被点击的） </span><br><span class="line">  &lt;a href=&quot;#two&quot;&gt;   </span><br></pre></td></tr></table></figure><p><strong>「6. 注释标签」</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注释语句 --&gt;     </span><br><span class="line"> 快捷键是：    ctrl + /       </span><br><span class="line"> 或者 ctrl +shift + / </span><br></pre></td></tr></table></figure><p><strong>团队约定：</strong>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</p><p><strong>「7. 路径」</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6Iibv2yiaZltvia1gNEpvKl7pIice38E5o20ntruRRg9YIGsTAia9HgsUcOnLKQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><strong>「8. 其他知识」</strong></p><p>预格式化文本pre标签元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。</p><p>特殊字符<img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6IibvRnVibwMPVz0xv1K2EqzYRWEa6bVhZuTib8vxaTsBKuow67JT0Ghuy0icw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">什么是XHTML</p><ul><li>XHTML 指<strong>「可扩展超文本标签语言」</strong>（EXtensible HyperText Markup Language）。</li><li>XHTML 的目标是取代 HTML。</li><li>XHTML 与 HTML 4.01 几乎是相同的。</li><li>XHTML 是更严格更纯净的 HTML 版本。</li><li>XHTML 是作为一种 XML 应用被重新定义的 HTML,是严格版本的HTML。例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。</li><li>XHTML 是一个 W3C 标准。</li></ul><p><strong>写HTML代码时应注意什么？</strong></p><ul><li>尽可能少的使用无语义的标签div和span；</li><li>在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</li><li>不要使用纯样式标签，如：b、font、u等，改用css设置。</li><li>需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</li><li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</li><li>表单域要用fieldset标签包起来，并用legend标签说明表单的用途；</li><li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for来让说明文本和相对应的input关联起来。</li></ul><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><strong>「1. 表格」</strong></p><p>现在还是较为常用的一种标签，但不是用来布局，常见显示、展示表格式数据。因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候表格运用是否熟练就显得很重要，一个清爽简约的表格能够把繁杂的数据表现得很有条理。</p><p><strong>「2. 创建表格」</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;单元格内的文字&lt;/td&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>table、tr、td，他们是创建表格的基本标签，缺一不可</p><ul><li>table用于定义一个表格标签。</li><li>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</li><li>td 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。</li><li>字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。td像一个容器，可以容纳所有的元素。<img src="https://mmbiz.qpic.cn/mmbiz_jpg/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6Iibvq4teINyQJiaQSnEyRVAR33DXpXiadiap44NOc8vzcZ1Wib4AriaRTgf4fRQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></li></ul><p><strong>表头单元格标签th</strong>:一般表头单元格位于表格的第一行或第一列，并且文本加粗居中,只需用表头标签<th></th>替代相应的单元格标签<td></td>即可。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6Iibv6notxVwjwLIr5Ob12WhviaPZ5sG2RBvv0iczwS7c6xMe4QbmSDlt6YaA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>表格标题caption</strong>通常这个标题会被居中且显示于表格之上。caption 标签必须紧随 table 标签之后。这个标签只存在 表格里面才有意义。你是风儿我是沙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">   &lt;caption&gt;我是表格标题&lt;/caption&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p><strong>「3. 表格属性」</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6IibvE1nOjclyicbCX0wWYeHV0gmwa2ImQyMcyichSRs2uicIdOZniaFLYlzQXQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">三参为0，平时开发的我们这三个参数   border  cellpadding  cellspacing  为  0</p><p><strong>「4. 合并单元格」</strong>,合并的顺序我们按照  先上 后下   先左  后右 的顺序 ,合并完之后需要删除多余的单元格。</p><ul><li>跨行合并：rowspan=”合并单元格的个数”</li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><p><strong>「5. 总结表格」</strong></p><table><thead><tr><th align="left">标签名</th><th align="left">定义</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><table></table></td><td align="left">表格标签</td><td align="left">就是一个四方的盒子</td></tr><tr><td align="left"><tr></tr></td><td align="left">表格行标签</td><td align="left">行标签要再table标签内部才有意义</td></tr><tr><td align="left"><td></td></td><td align="left">单元格标签</td><td align="left">单元格标签是个容器级元素，可以放任何东西</td></tr><tr><td align="left"><th></th></td><td align="left">表头单元格标签</td><td align="left">它还是一个单元格，但是里面的文字会居中且加粗</td></tr><tr><td align="left"><caption></caption></td><td align="left">表格标题标签</td><td align="left">表格的标题，跟着表格一起走，和表格居中对齐</td></tr><tr><td align="left">clospan 和 rowspan</td><td align="left">合并属性</td><td align="left">用来合并单元格的</td></tr></tbody></table><p><strong>「6. 表格划分结构」</strong></p><p>  对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构。</p><p><strong>注意：</strong><br>\1.<thead></thead>：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有<tr> 标签！<br>\2. <tbody></tbody>：用于定义表格的主体。放数据本体 。<br>\3. <tfoot></tfoot>放表格的脚注之类。<br>\4. 以上标签都是放到table标签中。</p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>「列表ul」</strong>容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表。</p><p>列表最大的特点就是整齐 、整洁、 有序，跟表格类似，但是它可组合自由度会更高。</p><p><strong>「1. 无序列表 ul」</strong></p><ul><li><ul></ul>中只能嵌套<li></li>，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。</li><li><li>与</li>之间相当于一个容器，可以容纳所有元素。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表项2&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表项3&lt;/li&gt;</span><br><span class="line">  ......</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>「2. 有序列表 ol」</strong></p><ul><li><ol>标签中的type属性值为排序的序列号，不添加type属性时，有序列表默认从数字1开始排序。</li><li>常用的type属性值分别为是1，a，A，i，I</li><li><ol reversed="reversed">中的reversed属性能够让有序列表中的序列倒序排列。</li><li><ol start="3">中的start属性值为3，有序列表中的第一个序列号将从3开始排列。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol type=&quot;A&quot;&gt; </span><br><span class="line">  &lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表二&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;列表三&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><p><strong>「2. 自定义列表 dl」</strong></p><ul><li>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;名词1&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;名词1解释1&lt;/dd&gt;</span><br><span class="line">  &lt;dd&gt;名词1解释2&lt;/dd&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;dt&gt;名词2&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;名词2解释1&lt;/dd&gt;</span><br><span class="line">  &lt;dd&gt;名词2解释2&lt;/dd&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6IibvKlGaCSycMc6cWQEFeUhXcI0R9taOibCrJYf8CaxEGtOKq7azk3OCVsQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><hr><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。表单目的是为了收集用户信息。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6IibvGwtx6lpmriam6JKibhHUhy4UcEpsGFcAvN3QNAUFwMnJvoCzOjhEOmPA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><strong>表单控件：</strong><br> 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。<br><strong>提示信息：</strong><br> 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。<br><strong>表单域：</strong><br> 它相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><p><strong>「1. input 控件」</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;属性值&quot; value=&quot;你好&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>input 输入的意思</li><li><input />标签为单标签</li><li>type属性设置不同的属性值用来指定不同的控件类型</li><li>除了type属性还有别的属性</li></ul><p><strong>常用属性：</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6IibvaBdZQuhEnSaZK3hsN6cVEPaHGkoWe53KToqRDShtibEZahQPIFJVsYg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名: &lt;input type=&quot;text&quot; /&gt; </span><br><span class="line">密  码：&lt;input type=&quot;password&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>value属性</strong></p><ul><li>value 默认的文本值。有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:&lt;input type=&quot;text&quot;  name=&quot;username&quot; value=&quot;请输入用户名&quot;&gt; </span><br></pre></td></tr></table></figure><p><strong>name属性</strong></p><ul><li><p>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。 页面中的表单很多，name主要作用就是用于区别不同的表单。</p></li><li><ul><li>name属性后面的值，是我们自己定义的。</li><li>radio  如果是一组，我们必须给他们命名相同的名字 name  这样就可以多个选其中的一个啦</li><li>name属性，我们现在用的较少，但是，当我们学ajax 和后台的时候，是必须的。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot;  /&gt;男</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; /&gt;女</span><br></pre></td></tr></table></figure><p><strong>checked属性</strong></p><ul><li>表示默认选中状态。 较常见于 单选按钮和复选按钮。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">性    别:</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; checked=&quot;checked&quot; /&gt;男</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; /&gt;女 </span><br></pre></td></tr></table></figure><p> <strong>input 属性小结</strong></p><table><thead><tr><th align="left">属性</th><th align="left">说明</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">表单类型</td><td align="left">用来指定不同的控件类型</td></tr><tr><td align="left">value</td><td align="left">表单值</td><td align="left">表单里面默认显示的文本</td></tr><tr><td align="left">name</td><td align="left">表单名字</td><td align="left">页面中的表单很多，name主要作用就是用于区别不同的表单。</td></tr><tr><td align="left">checked</td><td align="left">默认选中</td><td align="left">表示那个单选或者复选按钮一开始就被选中了</td></tr></tbody></table><p><strong>「2.  label标签」</strong></p><ul><li>label 标签为 input 元素定义标注（标签）。</li><li>label标签主要目的是为了提高用户体验。为用户提高最优秀的服务。</li></ul><p> <strong>作用：</strong>用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p><p><strong>如何绑定元素呢</strong></p><ul><li>第一种用法就是用label标签直接包含input表单， 适合单个表单选择</li><li>第二种用法 for 属性规定 label 与哪个表单元素绑定(通过id)。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一种</span><br><span class="line">&lt;label&gt; 用户名： </span><br><span class="line">  &lt;input type=&quot;radio&quot; name=&quot;usename&quot; value=&quot;请输入用户名&quot;&gt;   </span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">&lt;label for=&quot;sex&quot;&gt;男&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;sex&quot;  id=&quot;sex&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>「3.  textarea控件(文本域)」</strong></p><ul><li>通过textarea控件可以轻松地创建多行文本输入框.</li><li>cols=”每行中的字符数” rows=”显示的行数”  我们实际开发不用</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6IibvqygjONK8icfRbFUlSBZjwd15lGYfEU53tGBxIrYxpiaAEemLzkADl1pg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea &gt;</span><br><span class="line">  文本内容</span><br><span class="line">&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><p><strong>文本框和文本域区别</strong></p><table><thead><tr><th align="left">表单</th><th align="center">名称</th><th align="center">区别</th><th align="right">默认值显示</th><th align="right">用于场景</th></tr></thead><tbody><tr><td align="left">input type=”text”</td><td align="center">文本框</td><td align="center">只能显示一行文本</td><td align="right">单标签，通过value显示默认值</td><td align="right">用户名、昵称、密码等</td></tr><tr><td align="left">textarea</td><td align="center">文本域</td><td align="center">可以显示多行文本</td><td align="right">双标签，默认值写到标签中间</td><td align="right">留言板</td></tr></tbody></table><p><strong>「4.  select下拉列表」</strong></p><ul><li>如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表。</li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li><li>我们实际开发会用的比较少</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6Iibv5b0icnUTHiczBRPmZ4VUkCnPibBopOaZ8Uoric39ysSXbLOib4FU6UwpviaA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;option&gt;选项1&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;选项2&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;选项3&lt;/option&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="form表单域"><a href="#form表单域" class="headerlink" title="form表单域"></a>form表单域</h3><ul><li><p>收集的用户信息怎么传递给服务器？</p></li><li><ul><li>通过form表单域</li></ul></li><li><p>目的：</p></li><li><ul><li>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;url地址&quot; method=&quot;提交方式&quot; name=&quot;表单名称&quot;&gt;</span><br><span class="line">  各种表单控件</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>常用属性：</strong></p><ul><li>每个表单都应该有自己表单域。后面学 ajax 后台交互的时候，必须需要form表单域。</li></ul><table><thead><tr><th align="left">属性</th><th align="left">属性值</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">action</td><td align="left">url地址</td><td align="left">用于指定接收并处理表单数据的服务器程序的url地址。</td></tr><tr><td align="left">method</td><td align="left">get/post</td><td align="left">用于设置表单数据的提交方式，其取值为get或post。</td></tr><tr><td align="left">name</td><td align="left">名称</td><td align="left">用于指定表单的名称，以区分同一个页面中的多个表单。</td></tr></tbody></table><p><strong>GET 和 POST 的区别</strong></p><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求大小一般是(1024字节)，http协议并没有限制，而与服务器，操作系统有关，POST理论上来说没有大小限制，http协议规范也没有进行大小限制，但实际上post所能传递的数据量根据取决于服务器的设置和内存大小。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li></ul><p><strong>团队约定：</strong></p><ul><li>元素属性值使用双引号语法</li><li>元素属性值可以写上的都写上</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">推荐</span><br><span class="line">&lt;input type=&quot;text&quot; /&gt; </span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;name&quot; checked=&quot;checked&quot; /&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="从输入url到页面展示发生了什么-面试"><a href="#从输入url到页面展示发生了什么-面试" class="headerlink" title="从输入url到页面展示发生了什么(面试)"></a>从输入url到页面展示发生了什么(面试)</h2><blockquote><p>作者：Twinkle_<br>链接：<a href="https://juejin.im/post/6869279683230629896">https://juejin.im/post/6869279683230629896</a><br>来源：掘金</p></blockquote><h3 id="浏览器的多进程架构"><a href="#浏览器的多进程架构" class="headerlink" title="浏览器的多进程架构"></a><strong>浏览器的多进程架构</strong></h3><p>从浏览器输入 URL 到页面渲染的整个过程都是由浏览器架构中的各个进程之间的配合完成。</p><ol><li>浏览器主进程: 管理子进程、提供服务功能</li><li>渲染进程：将HTML、CSS、JS渲染成界面，js引擎v8和排版引擎Blink就在上面，他会为每一个tab页面创建一个渲染进程</li><li>GPU进程：本来是负责处理3Dcss的，后来慢慢的UI界面也交给GPU来绘制</li><li>网络进程：就是负责网络请求，网络资源加载的进程</li><li>插件进程：负责插件的运行的，因为插件很容易崩溃，把它放到独立的进程里不要让它影响别人</li></ol><p><strong>浏览器的多进程架构</strong></p><p>从用户输入信息到页面展示的不同阶段，是不同的进程在发挥作用，示意图如下：<img src="https://mmbiz.qpic.cn/mmbiz/y7EkeCWAzmrC7zFuibKPfkDKFUfyH6Iibve8jRDxSGUqRqh8bLPOC9QicJEzXxIiaKqMp3IiaHxMY7UEc7Z3ZTBicWWA/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中可以看出，整个过程是需要各个进程之间相互配合完成的，过程大致可以描述为：</p><ol><li>用户输入url,处理输入信息，主进程开始导航，交给网络进程干活</li><li>网络进程发起网络请求，其中有可能会发生重定向</li><li>服务器响应URL之后，主进程就要通知渲染进程，你要开始干活了</li><li>渲染进程准备好了，要想渲染进程提交数据，这个时间叫做提交文档</li><li>渲染进程接受到数据，完成页面渲染。</li></ol><p><strong>具体过程</strong></p><ol><li>输入url</li></ol><p>用户输入url，处理输入信息：如果为非url结构的字符串，交给浏览器默认引擎去搜索改字符串；若为url结构的字符串，浏览器主进程会交给 网络进程 ,开始干活。2.1 查找浏览器缓存网络进程会先看看是否存在本地缓存，如果有就直接返回资源给浏览器进程，无则下一步 DNS-&gt; IP -&gt; TCP2.2 DNS解析网络进程拿到url后，先会进行DNS域名解析得到IP地址。如果请求协议是HTTPS，那么还需要建立TLS连接。2.2 建立TCP连接，三次握手接下来就是利用IP地址和服务器建立TCP连接。连接建立之后，向服务器发送请求。<br>服务器响应服务器收到请求信息后，会根据请求信息生成响应行、响应头、响应体，并发给网络进程。网络进程接受了响应信息之后，就开始解析响应头的内容。网络进程解析响应行和响应头信息的过程：3.1 重定向如果响应行状态码为301（永久重定向）和302（临时），那么说明需要重定向到其他url。这时候网络进程会从响应头中的Location字段里读取重定向的地址，并重新发起网络请求。3.2 响应数据处理导航会通过请求头的Content-type字段判断响应体数据的类型。浏览器通过这个来决定如何显示响应体的内容。比如：若为application/octet-stream，则会按照下载类型来处理这个请求，导航结束。若为text/html，这就告诉浏览器服务器返回的是html格式，浏览器会通知渲染进程，你要干活了。准备渲染进程默认情况，每个页面一个渲染进程。但若处于同一站点（同根域名+协议），那么渲染进程就会复用。提交文档渲染进程准备好后，浏览器进程发出“提交文档的消息”，渲染进程接受了消息之后，会跟网络进程简历传输数据的管道。等数据传输完成了，渲染进程会告诉浏览器进程，确认文档提交，这时候浏览器会更新页面，安全状态，url，前进后退的历史。到这里导航结束，进入渲染阶段。<br>注：当浏览器刚开始加载一个地址之后，标签页上的图标便进入了加载状态。但此时图中页面显示的依然是之前打开的页面内容，并没立即替换为百度首页的页面。因为需要等待提交文档阶段，页面内容才会被替换。前端HTML基础面试题iframe有哪些缺点？iframe是一种框架，也是一种很常见的网页嵌入方式。<strong>「iframe的优点」</strong>iframe能够原封不动的把嵌入的网页展现出来。如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。<strong>「iframe的缺点」</strong>会产生很多页面，不容易管理。iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理iframe中的内容，所以使用iframe会不利于搜索引擎优化。很多的移动设备（PDA 手机）无法完全显示框架，设备兼容性差。iframe框架页面会增加服务器的http请求，对于大型网站是不可取的。现在基本上都是用Ajax来代替iframe，所以iframe已经渐渐的退出了前端开发。label的作用是什么？是怎么用的？例子1: 点击” 用户名:” 就可以定位光标到输入框<code>&lt;form&gt;&lt;label for=&quot;myid &quot;&gt; 用户名:&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;myid&quot; /&gt;&lt;/form&gt; </code>例子2: 点击” 用户名:” 或按键alt+1, 都可以定位光标到输入框<code>&lt;form&gt;  &lt;label for=&quot;myid&quot; accesskey=&quot;1&quot;&gt; 用户名:&lt;/label&gt;  &lt;input type=&quot;text&quot; id=&quot;myid&quot; tabindex=&quot;1&quot; /&gt;&lt;/form&gt; </code><strong>for 属性</strong>功能：表示Label 标签要绑定的HTML 元素，你点击这个标签的时候，所绑定的元素将获取焦点。<strong>acesskey 属性</strong><br>功能：表示访问Label 标签所绑定的元素的热键，当您按下热键，所绑定的元素将获取焦点。<br>局限性：accessKey 属性所设置的快捷键不能与浏览器的快捷键冲突，否则将优先激活浏览器的快捷键。HTML5的form如何关闭自动完成功能？  HTML的输入框可以拥有自动完成的功能，当你往输入框输入内容的时候，浏览器会从你以前的同名输入框的历史记录中查找出类似的内容并列在输入框下面，这样就不用全部输入进去了，直接选择列表中的项目就可以了。<br>  但有时候我们希望关闭输入框的自动完成功能，例如当用户输入内容的时候，我们希望使用AJAX技术从数据库搜索并列举而不是在用户的历史记录中搜索。<strong>关闭输入框的自动完成功能有3种方法：</strong>在IE的Internet选项菜单里的内容–自动完成里面设置设置form的autocomplete为”on”或者”off”来开启或者关闭自动完成功能设置输入框的autocomplete为”on”或者”off”来开启或者关闭该输入框的自动完成功能将 HTML5 看作成开放的网络平台<strong>「什么是 HTML5 的基本构件（building block）？」</strong>语义 - 提供更准确地描述内容。连接 - 提供新的方式与服务器通信。离线和存储 - 允许网页在本地存储数据并有效地离线运行。多媒体 - 在 Open Web 中，视频和音频被视为一等公民（first-class citizens）。2D/3D 图形和特效 - 提供更多种演示选项。性能和集成 - 提供更快的访问速度和性能更好的计算机硬件。设备访问 - 允许使用各种输入、输出设备。外观 - 可以开发丰富的主题。浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？  在浏览器的html头部加上manifest属性，如果是第一次访问浏览器会根据manifest的内容进行下载存储离线内容，如果已经访问过则从离线存储中进行加载，然后在比对服务器如果有新内容在更新离线存储</p><p>  离线的情况下，浏览器就直接使用离线存储的资源。浏览器的渲染过程？<code>1、将获取的html解析成dom树2、处理css，构成层叠样式表模型CSSOM3、将dom树和CSSOM合并为渲染树4、根据CSSOM将渲染树的节点布局计算5、将渲染树节点样式绘制到页面上 // 注意在渲染的过程中是自上而下渲染，js会阻塞页面的渲染，优先等js执行完成如果在渲染的过程中改变了样式，会造成回流需要重新渲染</code></p><p>link和@import的区别？</p><p><code>1、从属关系区别：link属于html标签，而@import是css提供的。2、加载顺序区别：页面被加载时，link会同时被加载，而@import引用的css会等到页面被加载完再加载。3、兼容性区别：import只在IE5以上才能识别，而link是html标签，无兼容问题。4、dom可操作性区别：可以通过JS 操作 DOM ，插入link标签来改变样式；由于 DOM 方法是基于文档的，无法使用@import的方式插入样式5、权重区别：如果已经存在相同样式，@import引入的这个样式将被该 CSS 文件本身的样式层叠掉，表现出link方式的样式权重高于@import的权重这样的直观效果。（简而言之，link和@import，谁写在后面，谁的样式就被应用，后面的样式覆盖前面的样式。） </code></p><p>src与href的区别？</p><p><code>1、href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。2、src是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指</code></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础之对象与内置对象(三)</title>
      <link href="/myblog.github.io/2022/04/24/JavaScript%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1(%E4%B8%89)/"/>
      <url>/myblog.github.io/2022/04/24/JavaScript%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="目录总览"><a href="#目录总览" class="headerlink" title="目录总览"></a>目录总览</h1><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><p>对象是由属性和方法组成的：</p><ul><li>属性：事物的**特征，**在对象中用**属性**来表示（常用名词）</li><li>方法：事物的**行为，**在对象中用**方法**来表示（常用动词）</li></ul><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>在 JavaScript 中，现阶段我们可以采用三种方式创建对象（object）：</p><ul><li>利用字面量创建对象</li><li>利用 new Object创建对象</li><li>利用构造函数创建对象</li></ul><h3 id="①利用字面量创建对象"><a href="#①利用字面量创建对象" class="headerlink" title="①利用字面量创建对象"></a>①利用字面量创建对象</h3><p>对象字面量：就是花括号 <code>&#123; &#125;</code> 里面包含了表达这个具体事物（对象）的属性和方法</p><p><code>&#123; &#125;</code> 里面采取键值对的形式表示</p><ul><li>键：相当于属性名</li><li>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 多个属性或者方法中间用逗号隔开</span></span><br><span class="line"><span class="comment">// 方法冒号后面跟的是一个匿名函数</span></span><br></pre></td></tr></table></figure><h4 id="对象的调用"><a href="#对象的调用" class="headerlink" title="对象的调用"></a>对象的调用</h4><ul><li>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ <strong>的</strong> ”</li><li>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须<strong>加引号</strong>，我们后面会用</li><li>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面<strong>一定加括号</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star.<span class="property">name</span>)     <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star[<span class="string">&#x27;name&#x27;</span>])  <span class="comment">// 调用名字属性</span></span><br><span class="line">star.<span class="title function_">sayHi</span>();              <span class="comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span></span><br></pre></td></tr></table></figure><h4 id="变量、属性、函数、方法总结"><a href="#变量、属性、函数、方法总结" class="headerlink" title="变量、属性、函数、方法总结"></a>变量、属性、函数、方法总结</h4><ul><li>变量：单独声明赋值，单独存在</li><li>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li><li>函数：单独存在的，通过==“函数名()”==的方式就可以调用</li><li>方法：对象里面的函数称为方法，方法不需要声明，使用==“对象.方法名()”==的方式就可以调用，方法用来描述该对象的行为和功能。</li></ul><h3 id="②利用-new-Object-创建对象"><a href="#②利用-new-Object-创建对象" class="headerlink" title="②利用 new Object 创建对象"></a>②利用 new Object 创建对象</h3><p>跟之前的 <code>new Array()</code> 原理一致：<code>var 对象名 = new Object();</code></p><p>使用的格式：对象.属性 = 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">//创建了一个空的对象</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;张三丰&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">obj.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.我们是利用等号赋值的方法添加对象</span></span><br><span class="line"><span class="comment">//2.每个属性和方法之间用分号结束</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;sex&#x27;</span>]);</span><br><span class="line">obj.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><h3 id="③利用构造函数创建对象"><a href="#③利用构造函数创建对象" class="headerlink" title="③利用构造函数创建对象"></a>③利用构造函数创建对象</h3><p><strong>构造函数</strong> ：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p><p>在 js 中，使用构造函数要时要注意以下两点：</p><ul><li>构造函数用于创建某一类对象，其首字母要大写</li><li>构造函数要和 new 一起使用才有意义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数的语法格式</span></span><br><span class="line"><span class="keyword">function</span> 构造函数名() &#123;</span><br><span class="line">    <span class="variable language_">this</span>.属性 = 值;</span><br><span class="line">    <span class="variable language_">this</span>.方法 = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> 构造函数名();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构造函数名字首字母要大写</span></span><br><span class="line"><span class="comment">//2. 构造函数不需要return就可以返回结果</span></span><br><span class="line"><span class="comment">//3. 调用构造函数必须使用 new</span></span><br><span class="line"><span class="comment">//4. 我们只要new Star() 调用函数就创建了一个对象</span></span><br><span class="line"><span class="comment">//5. 我们的属性和方法前面必须加this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age,sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params">sang</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sang);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> ldh) <span class="comment">// object对象，调用函数返回的是对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh[<span class="string">&#x27;sex&#x27;</span>]);</span><br><span class="line">ldh.<span class="title function_">sing</span>(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line"><span class="comment">//把冰雨传给了sang</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>构造函数名字首字母要大写</li><li>函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方法。</li><li>构造函数中不需要 return 返回结果。</li><li>当我们创建对象的时候，必须用 new 来调用构造函数。</li></ul><h4 id="构造函数和对象"><a href="#构造函数和对象" class="headerlink" title="构造函数和对象"></a>构造函数和对象</h4><ul><li>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）</li><li>创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</li></ul><p><img src="https://img-blog.csdnimg.cn/3745ecf7ca3c42fbbd59ee2d22e91802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h4><p>new 在执行时会做四件事:</p><ol><li>在内存中创建一个新的空对象。</li><li>让 this 指向这个新的对象。</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这个新对象（所以构造函数里面不需要return）</li></ol><h2 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h2><ul><li><code>for...in</code> 语句用于对数组或者对象的属性进行循环操作</li></ul><p>语法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">in</span> 对象名字)&#123;</span><br><span class="line">    <span class="comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k);<span class="comment">//这里的 k 是属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]);<span class="comment">//这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;秦sir&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sex</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//for in 遍历我们的对象</span></span><br><span class="line"><span class="comment">//for (变量 in 对象)&#123;&#125;</span></span><br><span class="line"><span class="comment">//我们使用for in 里面的变量 我们喜欢写k 或者key</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k); <span class="comment">// k 变量 输出得到的是属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]); <span class="comment">// obj[k] 得到的是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><ul><li>JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对象</li><li>内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能</li><li>JavaScript 提供了多个内置对象：Math、 Date 、Array、String等</li></ul><h2 id="查文档"><a href="#查文档" class="headerlink" title="查文档"></a>查文档</h2><p>学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询</p><p>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h3 id="如何学习对象中的方法"><a href="#如何学习对象中的方法" class="headerlink" title="如何学习对象中的方法"></a>如何学习对象中的方法</h3><ol><li>查阅该方法的功能</li><li>查看里面参数的意义和类型</li><li>查看返回值的意义和类型</li><li>通过 demo 进行测试</li></ol><h1 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h1><p>Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math数学对象，不是一个构造函数，所以我们不需要new 来调用，而是直接使用里面的属性和方法即可</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span> <span class="comment">// 圆周率</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>()  <span class="comment">// 向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>()             <span class="comment">// 向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>()            <span class="comment">// 四舍五入版 就近取整   注意 -3.5   结果是  -3 </span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>() <span class="comment">// 绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()/<span class="title class_">Math</span>.<span class="title function_">min</span>()<span class="comment">// 求最大和最小值 </span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：上面的方法必须带括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">99</span>,<span class="number">3</span>)); <span class="comment">// 99</span></span><br></pre></td></tr></table></figure><p><strong>练习：封装自己的数学对象</strong></p><p>利用对象封装自己的数学对象，里面有PI 最大值 和最小值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myMath = &#123;</span><br><span class="line">    <span class="attr">PI</span>: <span class="number">3.141592653</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> max = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">                max = <span class="variable language_">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">min</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> min = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &lt; min) &#123;</span><br><span class="line">                min = <span class="variable language_">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="property">PI</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>));</span><br></pre></td></tr></table></figure><h2 id="Math绝对值和三个取整方法"><a href="#Math绝对值和三个取整方法" class="headerlink" title="Math绝对值和三个取整方法"></a>Math绝对值和三个取整方法</h2><ul><li><code>Math.abs()</code> 取绝对值</li><li>三个取整方法：   <ul><li><code>Math.floor()</code> : 向下取整</li><li><code>Math.ceil()</code> : 向上取整</li><li><code>Matg.round()</code> : 四舍五入，其他数字都是四舍五入，但是5特殊，它往大了取</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.绝对值方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">1</span>));  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&#x27;-1&#x27;</span>)); <span class="comment">// 1 隐式转换，会把字符串 -1 转换为数字型</span></span><br><span class="line"><span class="comment">//2.三个取整方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.1</span>)); <span class="comment">// 1 向下取整，向最小的取值 floor-地板</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.9</span>)); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.1</span>)); <span class="comment">//2 向上取整，向最大的取值 ceil-天花板</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.9</span>)); <span class="comment">//2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//四舍五入 其他数字都是四舍五入，但是5特殊，它往大了取</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.1</span>)); <span class="comment">//1 四舍五入</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.5</span>)); <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.9</span>)); <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">1.1</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">1.5</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h2 id="随机数方法random"><a href="#随机数方法random" class="headerlink" title="随机数方法random()"></a>随机数方法random()</h2><ul><li>random() 方法可以随机返回一个小数，其取值范围是 [0，1)，左闭右开 0 &lt;= x &lt; 1</li><li>得到一个两数之间的随机整数，包括两个数在内</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到两个数之间的随机整数，并且包含这两个整数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min,max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getRandom</span>(<span class="number">1</span>,<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p><strong>1.随机点名</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;秦六&#x27;</span>]；</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="title function_">getRandom</span>(<span class="number">0</span>,arr.<span class="property">length</span> - <span class="number">1</span>)]);</span><br></pre></td></tr></table></figure><p><strong>2.猜数字游戏</strong></p><p><img src="https://img-blog.csdnimg.cn/c1bd0e00171448ab8ec5af0763dd9cf2.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min,max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> random = <span class="title function_">getRandom</span>(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123; <span class="comment">//死循环 ，需要退出循环条件</span></span><br><span class="line">     <span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入1~10之间的一个整数:&#x27;</span>);</span><br><span class="line">     <span class="keyword">if</span>(num &gt; random) &#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&#x27;你猜大了&#x27;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span> (num &lt; random) &#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&#x27;你猜小了&#x27;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&#x27;你猜中了&#x27;</span>);</span><br><span class="line">         <span class="keyword">break</span>; <span class="comment">//退出整个循环</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Data-日期对象"><a href="#Data-日期对象" class="headerlink" title="Data()日期对象"></a>Data()日期对象</h1><ul><li>Date 对象和 Math 对象不一样，他是一个构造函数，所以我们需要实例化后才能使用</li><li>Date 实例用来处理日期和时间</li></ul><h2 id="Date-方法的使用"><a href="#Date-方法的使用" class="headerlink" title="Date()方法的使用"></a>Date()方法的使用</h2><h3 id="获取当前时间必须实例化"><a href="#获取当前时间必须实例化" class="headerlink" title="获取当前时间必须实例化"></a>获取当前时间必须实例化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);</span><br></pre></td></tr></table></figure><h3 id="Date-构造函数的参数"><a href="#Date-构造函数的参数" class="headerlink" title="Date()构造函数的参数"></a>Date()构造函数的参数</h3><p>如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为 <code>‘2019-5-1’</code>，可以写成<code>new Date(&#39;2019-5-1&#39;)</code> 或者 <code>new Date(&#39;2019/5/1&#39;)</code></p><ul><li>如果Date()不写参数，就返回当前时间</li><li>如果Date()里面写参数，就返回括号里面输入的时间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.如果没有参数，返回当前系统的当前时间</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.参数常用的写法 数字型 2019,10,1  字符串型 &#x27;2019-10-1 8:8:8&#x27; 时分秒</span></span><br><span class="line"><span class="comment">// 如果Date()里面写参数，就返回括号里面输入的时间 </span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);  <span class="comment">// 返回的是11月不是10月</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-10-1 8:8:8&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data2);</span><br></pre></td></tr></table></figure><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><p>我们想要 2019-8-8 8:8:8 格式的日期，要怎么办？</p><p>需要获取日期指定的部分，所以我们要手动的得到这种格式</p><table><thead><tr><th>方法名</th><th>说明</th><th>代码</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当年</td><td>dObj.getFullYear()</td></tr><tr><td>getMonth()</td><td>获取当月(0-11)</td><td>dObj.getMonth()</td></tr><tr><td>getDate</td><td>获取当天日期</td><td>dObj.getDate()</td></tr><tr><td>getDay()</td><td>获取星期几(周日0到周六6)</td><td>dObj.getDay()</td></tr><tr><td>getHours()</td><td>获取当前小时</td><td>dObj.getHours()</td></tr><tr><td>getMinutes()</td><td>获取当前小时</td><td>dObj.getMinutes()</td></tr><tr><td>getSeconds()</td><td>获取当前秒钟</td><td>dObj.gerSeconds()</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 返回当前日期的年 2019</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>);  <span class="comment">//返回的月份小一个月 记得月份 +1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="property">getDate</span>); <span class="comment">//返回的是几号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>());  <span class="comment">//周一返回1 周6返回六 周日返回0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写一个 2019年 5月 1日 星期三</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span><br><span class="line"><span class="keyword">var</span> year =  date.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates = date.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今天是&#x27;</span> + year +<span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates +<span class="string">&#x27;日&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个函数返回当前的时分秒 格式 08:08:08</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> h = time.<span class="title function_">getHours</span>();</span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = time.<span class="title function_">getMinutes</span>();</span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = time.<span class="title function_">getSeconds</span>();</span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">    <span class="keyword">return</span> h + <span class="string">&#x27;:&#x27;</span> + m + <span class="string">&#x27;:&#x27;</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getTimer</span>());</span><br></pre></td></tr></table></figure><h2 id="获取日期的总的毫秒形式"><a href="#获取日期的总的毫秒形式" class="headerlink" title="获取日期的总的毫秒形式"></a>获取日期的总的毫秒形式</h2><ul><li><code>date.valueOf()</code> ：得到现在时间距离1970.1.1总的毫秒数</li><li><code>date.getTime()</code> ：得到现在时间距离1970.1.1总的毫秒数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Date总的毫秒数 不是当前时间的毫秒数 而是距离1970年1月1号过了多少毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化Date对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 .通过 valueOf()  getTime() 用于获取对象的原始值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>());  <span class="comment">//得到现在时间距离1970.1.1总的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.简单的写法</span></span><br><span class="line"><span class="keyword">var</span> date1 = +<span class="keyword">new</span> <span class="title class_">Date</span>();  <span class="comment">// +new Date()返回的就是总的毫秒数，</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. HTML5中提供的方法 获得总的毫秒数 有兼容性问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure><h3 id="倒计时效果"><a href="#倒计时效果" class="headerlink" title="倒计时效果"></a>倒计时效果</h3><p><img src="https://img-blog.csdnimg.cn/30532fd39876470b978818007f8a0b13.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//没有参数，返回的是当前时间总的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(time); <span class="comment">// 有参数，返回的是用户输入时间的总毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">//times就是剩余时间的总的秒数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">//天数</span></span><br><span class="line">    d &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + d : d;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">//小时</span></span><br><span class="line">    h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">//分</span></span><br><span class="line">    m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">//秒</span></span><br><span class="line">    s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">    <span class="keyword">return</span> d + <span class="string">&#x27;天&#x27;</span> + h + <span class="string">&#x27;时&#x27;</span> + m + <span class="string">&#x27;分&#x27;</span> + s + <span class="string">&#x27;秒&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countDown</span>(<span class="string">&#x27;2020-11-09 18:29:00&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">//现在时间</span></span><br></pre></td></tr></table></figure><h1 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h1><h2 id="数组对象的创建"><a href="#数组对象的创建" class="headerlink" title="数组对象的创建"></a>数组对象的创建</h2><p>创建数组对象的两种方式</p><ul><li>字面量方式</li><li>new Array()</li></ul><h2 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h2><ul><li>instanceof 运算符，可以判断一个对象是否属于某种类型</li><li><code>Array.isArray()</code> 用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr));   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="添加删除数组元素"><a href="#添加删除数组元素" class="headerlink" title="添加删除数组元素"></a>添加删除数组元素</h2><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>push(参数1…)</td><td>末尾添加一个或多个元素，注意修改原数组</td><td>并返回新的长度</td></tr><tr><td>pop()</td><td>删除数组最后一个元素</td><td>返回它删除的元素的值</td></tr><tr><td>unshift(参数1…)</td><td>向数组的开头添加一个或更多元素，注意修改原数组</td><td>并返回新的长度</td></tr><tr><td>shift()</td><td>删除数组的第一个元素，数组长度减1，无参数，修改原数组</td><td>并返回第一个元素</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.push() 在我们数组的末尾，添加一个或者多个数组元素 push 推</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>, <span class="string">&#x27;秦晓&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>(<span class="number">4</span>, <span class="string">&#x27;秦晓&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="comment">// push 完毕之后，返回结果是新数组的长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. unshift 在我们数组的开头 添加一个或者多个数组元素</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop() 它可以删除数组的最后一个元素，一次只能删除一个元素</span></span><br><span class="line">arr.<span class="title function_">pop</span>(); <span class="comment">//不加参数</span></span><br><span class="line"><span class="comment">// shift() 它剋删除数组的第一个元素,一次只能删除一个元素</span></span><br><span class="line">arr.<span class="title function_">shift</span>(); <span class="comment">//不加参数</span></span><br></pre></td></tr></table></figure><h3 id="筛选数组"><a href="#筛选数组" class="headerlink" title="筛选数组"></a>筛选数组</h3><p>有一个包含工资的数组[1500,1200,2000,2100,1800],要求把数组中工资超过2000的删除，剩余的放到新数组里面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">2100</span>, <span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">        newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><table><thead><tr><th>方法名</th><th>说明</th><th>是否修改原数组</th></tr></thead><tbody><tr><td>reverse()</td><td>颠倒数组中元素的顺序，无参数</td><td>该方法会改变原来的数组，返回新数组</td></tr><tr><td>sort()</td><td>对数组的元素进行排序</td><td>该方法会改变原来的数组，返回新数组</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.翻转数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.数组排序(冒泡排序)</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">1</span>];</span><br><span class="line">arr1.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于双位数</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">64</span>,<span class="number">9</span>,<span class="number">61</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> b - a;  <span class="comment">//降序的排列</span></span><br><span class="line">     <span class="keyword">return</span> a - b; <span class="comment">//升序</span></span><br><span class="line"> &#125;</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h2 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h2><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>indexOf()</td><td>数组中查找给定元素的第一个索引</td><td>如果存在返回索引号，如果不存在，则返回-1</td></tr><tr><td>lastIndexOf()</td><td>在数组的最后一个索引，从后向前索引</td><td>如果存在返回索引号，如果不存在，则返回-1</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回数组元素索引号方法 indexOf(数组元素)  作用就是返回该数组元素的索引号</span></span><br><span class="line"><span class="comment">//它只发返回第一个满足条件的索引号</span></span><br><span class="line"><span class="comment">//如果找不到元素，则返回-1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>.<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;blue&#x27;</span>));  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p><img src="https://img-blog.csdnimg.cn/47fbf1445f964722aee1463bee9a6fab.png#pic_center" alt="在这里插入图片描述"></p><p>分析：把旧数组里面不重复的元素选取出来放到新数组中，重复的元素只保留一个，放到新数组中去重。</p><p>核心算法：我们遍历旧数组，然后拿着旧数组元素去查询新数组，如果该元素在新数组里面没有出现过，我们就添加，否则不添加。</p><p>我们怎么知道该元素没有存在？ 利用 新数组.indexOf(数组元素) 如果返回是 -1 就说明 新数组里面没有改元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装一个去重的函数 unique 独一无二的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> demo = <span class="title function_">unique</span>([<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo);</span><br></pre></td></tr></table></figure><h2 id="数组转化为字符串"><a href="#数组转化为字符串" class="headerlink" title="数组转化为字符串"></a>数组转化为字符串</h2><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>toString()</td><td>把数组转换成字符串，逗号分隔每一项</td><td>返回一个字符串</td></tr><tr><td>join(‘分隔符’)</td><td>方法用于把数组中的所有元素转换为一个字符串</td><td>返回一个字符串</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.toString() 将我们的数组转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="comment">// 2.join(&#x27;分隔符&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>()); <span class="comment">// 不写默认用逗号分割</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">//  green-blue-red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)); <span class="comment">// green&amp;blue&amp;red</span></span><br></pre></td></tr></table></figure><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>concat()</td><td>连接两个或多个数组 不影响原数组</td><td>返回一个新的数组</td></tr><tr><td>slice()</td><td>数组截取slice(begin,end)</td><td>返回被截取项目的新数组</td></tr><tr><td>splice()</td><td>数组删除splice(第几个开始要删除的个数)</td><td>返回被删除项目的新数组，这个会影响原数组</td></tr></tbody></table><h1 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h1><h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p><p><strong>基本包装类型</strong>就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><p>我们看看下面代码有什么问题吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br></pre></td></tr></table></figure><p>按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.生成临时变量,把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3.销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h2><p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">// 当重新给 str 赋值的时候，常量&#x27;abc&#x27;不会被修改，依然在内存中</span></span><br><span class="line"><span class="comment">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class="line"><span class="comment">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>;  i++)&#123;</span><br><span class="line">    str += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="comment">// 这个结果需要花费大量时间来显示，因为需要不断的开辟新的空间</span></span><br></pre></td></tr></table></figure><h2 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h2><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，<strong>操作完成会返回一个新的字符串</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>indexOf(‘要查找的字符’，开始的位置)</td><td>返回指定内容在元字符串中的位置，如果找不到就返回-1，开始的位置是index索引号</td></tr><tr><td>lastIndexOf()</td><td>从后往前找，只找第一个匹配的</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串对象  根据字符返回位置  str.indexOf(&#x27;要查找的字符&#x27;, [起始的位置])</span></span><br><span class="line">       <span class="keyword">var</span> str = <span class="string">&#x27;改革春风吹满地，春天来了&#x27;</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;春&#x27;</span>)); <span class="comment">//默认从0开始查找 ，结果为2</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;春&#x27;</span>, <span class="number">3</span>)); <span class="comment">// 从索引号是 3的位置开始往后查找，结果是8</span></span><br></pre></td></tr></table></figure><h3 id="返回字符位置"><a href="#返回字符位置" class="headerlink" title="返回字符位置"></a>返回字符位置</h3><p>查找字符串 “abcoefoxyozzopp” 中所有o出现的位置以及次数</p><ul><li>核心算法：先查找第一个o出现的位置</li><li>然后 只要 indexOf返回的结果不是 -1 就继续往后查找</li><li>因为 indexOf 只能查找到第一个，所以后面的查找，一定是当前索引加1，从而继续查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;oabcoefoxyozzopp&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// console.log(index);</span></span><br><span class="line"><span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">    num++;</span><br><span class="line">    index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o出现的次数是: &#x27;</span> + num);</span><br></pre></td></tr></table></figure><h2 id="根据位置返回字符🔥-重点"><a href="#根据位置返回字符🔥-重点" class="headerlink" title="根据位置返回字符🔥(重点)"></a>根据位置返回字符🔥(重点)</h2><table><thead><tr><th>方法名</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td>charAt(index)</td><td>返回指定位置的字符(index字符串的索引号)</td><td>str.charAt(0)</td></tr><tr><td>charCodeAt(index)</td><td>获取指定位置处字符的ASCII码(index索引号)</td><td>str.charCodeAt(0)</td></tr><tr><td>str[index]</td><td>获取指定位置处字符</td><td>HTML,IE8+支持和charAt()等效</td></tr></tbody></table><h4 id="返回字符位置-1"><a href="#返回字符位置-1" class="headerlink" title="返回字符位置"></a>返回字符位置</h4><p>判断一个字符串 “abcoefoxyozzopp” 中出现次数最多的字符，并统计其次数</p><ul><li>核心算法：利用 charAt() 遍历这个字符串</li><li>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</li><li>遍历对象，得到最大值和该字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 有一个对象 来判断是否有该属性 对象[&#x27;属性名&#x27;]</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (o[<span class="string">&#x27;sex&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;里面有该属性&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有该属性&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  判断一个字符串 &#x27;abcoefoxyozzopp&#x27; 中出现次数最多的字符，并统计其次数。</span></span><br><span class="line">    <span class="comment">// o.a = 1</span></span><br><span class="line">    <span class="comment">// o.b = 1</span></span><br><span class="line">    <span class="comment">// o.c = 1</span></span><br><span class="line">    <span class="comment">// o.o = 4</span></span><br><span class="line">    <span class="comment">// 核心算法：利用 charAt() 遍历这个字符串</span></span><br><span class="line">    <span class="comment">// 把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</span></span><br><span class="line">    <span class="comment">// 遍历对象，得到最大值和该字符</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> chars = str.<span class="title function_">charAt</span>(i); <span class="comment">// chars 是 字符串的每一个字符</span></span><br><span class="line">        <span class="keyword">if</span> (o[chars]) &#123; <span class="comment">// o[chars] 得到的是属性值</span></span><br><span class="line">            o[chars]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            o[chars] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">    <span class="comment">// 2. 遍历对象</span></span><br><span class="line">    <span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> ch = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="comment">// k 得到是 属性名</span></span><br><span class="line">        <span class="comment">// o[k] 得到的是属性值</span></span><br><span class="line">        <span class="keyword">if</span> (o[k] &gt; max) &#123;</span><br><span class="line">            max = o[k];</span><br><span class="line">            ch = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最多的字符是&#x27;</span> + ch);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h1><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>concat(str1,str2,str3…)</td><td>concat() 方法用于连接两个或对各字符串。拼接字符串</td></tr><tr><td>substr(start,length)</td><td>从 start 位置开始(索引号), length 取的个数</td></tr><tr><td>slice(start,end)</td><td>从 start 位置开始，截取到 end 位置 ，end 取不到 (两个都是索引号)</td></tr><tr><td>substring(start,end)</td><td>从 start 位置开始，截取到 end 位置 ，end 取不到 (基本和 slice 相同，但是不接受负)</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. concat(&#x27;字符串1&#x27;,&#x27;字符串2&#x27;....)</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&#x27;red&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. substr(&#x27;截取的起始位置&#x27;, &#x27;截取几个字符&#x27;);</span></span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">&#x27;改革春风吹满地&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 第一个2 是索引号的2   第二个2 是取几个字符</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h2><p>replace() 方法用于在字符串中用一些字符替换另一些字符</p><p>其使用格式：<code>replace(被替换的字符,要替换为的字符串)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 替换字符 replace(&#x27;被替换的字符&#x27;, &#x27;替换为的字符&#x27;)  它只会替换第一个字符</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;andyandy&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>));</span><br><span class="line">    <span class="comment">// 有一个字符串 &#x27;abcoefoxyozzopp&#x27;  要求把里面所有的 o 替换为 *</span></span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (str1.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        str1 = str1.<span class="title function_">replace</span>(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str1);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h2><p>split() 方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>例如下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;a,b,c,d&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>));</span><br><span class="line"><span class="comment">// 返回的是一个数组 [a, b, c, d]</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 2. 字符转换为数组 split(&#x27;分隔符&#x27;)    前面我们学过 join 把数组转换为字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> str2 = <span class="string">&#x27;red, pink, blue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> str3 = <span class="string">&#x27;red&amp;pink&amp;blue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str3.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><ul><li><code>toUpperCase()</code> 转换大写</li><li><code>toLowerCase()</code> 转换小写</li></ul><h1 id="简单类型于复杂类型"><a href="#简单类型于复杂类型" class="headerlink" title="简单类型于复杂类型"></a>简单类型于复杂类型</h1><p>简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。</p><ul><li>值类型：简单数据类型/基本数据类型，在存储时变量中存储的是值本身，因此叫做值类型   <ul><li>string ，number，boolean，undefined，null</li></ul></li><li>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型   <ul><li>通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</li></ul></li></ul><h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><p>堆栈空间分配区别：</p><ol><li>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；   <ul><li>简单数据类型存放到栈里面</li></ul></li><li>堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。   <ul><li>复杂数据类型存放到堆里面</li></ul></li></ol><p><img src="https://img-blog.csdnimg.cn/ec62026538be449cb9c639f1fa54c844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>注意：JavaScript中没有堆栈的概念，通过堆栈的方式，可以让大家更容易理解代码的一些执行方式，便于将来学习其他语言。</p><h2 id="简单类型的内存分配"><a href="#简单类型的内存分配" class="headerlink" title="简单类型的内存分配"></a>简单类型的内存分配</h2><ul><li>值类型（简单数据类型）： string ，number，boolean，undefined，null</li><li>值类型变量的数据直接存放在变量（栈空间）中</li></ul><p><img src="https://img-blog.csdnimg.cn/50bbae6222344edb9dac860c4538c527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>引用类型（复杂数据类型）：通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等</li><li>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</li></ul><p><img src="https://img-blog.csdnimg.cn/c6b0e56f9a6c436b9c46afcd8133d623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 简单数据类型 null  返回的是一个空的对象  object </span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer);</span><br><span class="line">    <span class="comment">// 如果有个变量我们以后打算存储为对象，暂时没想好放啥， 这个时候就给 null </span></span><br><span class="line">    <span class="comment">// 1. 简单数据类型 是存放在栈里面 里面直接开辟一个空间存放的是值</span></span><br><span class="line">    <span class="comment">// 2. 复杂数据类型 首先在栈里面存放地址 十六进制表示  然后这个地址指向堆里面的数据</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="简单类型传参"><a href="#简单类型传参" class="headerlink" title="简单类型传参"></a>简单类型传参</h2><p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 简单数据类型传参</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="title function_">fn</span>(x);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="复杂类型传参"><a href="#复杂类型传参" class="headerlink" title="复杂类型传参"></a>复杂类型传参</h2><p>函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 复杂数据类型传参</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x</span>) &#123; <span class="comment">// x = p</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 2. 这个输出什么 ?  刘德华   </span></span><br><span class="line">        x.<span class="property">name</span> = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 3. 这个输出什么 ?   张学友</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// 1. 这个输出什么 ?   刘德华 </span></span><br><span class="line">    <span class="title function_">f1</span>(p);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// 4. 这个输出什么 ?   张学友</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript提高班之面向对象(六)</title>
      <link href="/myblog.github.io/2022/04/24/JavaScript%E6%8F%90%E9%AB%98%E7%8F%AD%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E5%85%AD)/"/>
      <url>/myblog.github.io/2022/04/24/JavaScript%E6%8F%90%E9%AB%98%E7%8F%AD%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E5%85%AD)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>面向对象更贴近我们的实际生活, 可以使用面向对象描述现实世界事物. 但是事物分为具体的事物和抽象的事物</p><p>面向对象的思维特点：</p><ol><li>抽取（抽象）对象共用的属性和行为组织(封装)成一个类(模板)</li><li>对类进行实例化, 获取类的对象</li></ol><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><p>对象是由属性和方法组成的</p><ul><li>属性：事物的**特征，**在对象中用**属性**来表示</li><li>方法：事物的**行为，**在对象中用**方法**来表示</li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。</p><ul><li>类抽象了对象的公共部分，它泛指某一大类（class）</li><li>对象特指某一个，通过类实例化一个具体的对象</li></ul><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">name</span> &#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">XX</span> = <span class="keyword">new</span> <span class="title function_">name</span>();</span><br></pre></td></tr></table></figure><p>注意：类必须使用<code>new</code> 实例化对象</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>constructor() 方法是类的构造函数(默认方法)，用于传递参数,返回实例对象，通过 new 命令生成对象实例时，自动调用该方法。如果没有显示定义, 类内部会自动给我们创建一个constructor()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 创建类 class  创建一个 明星类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">        <span class="comment">// constructor 构造器或者构造函数</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line">    <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zxy);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>通过 class 关键字创建类，类名我们还是习惯性<strong>定义首字母大写</strong></li><li>类里面有个 <code>constructor</code>函数，可以接收传递过来的参数，同时返回实例对象</li><li><code>constructor</code>函数只要 new 生成实例时，就会自动调用这个函数，如果我们不写这个函数，类也会自动生成这个函数</li><li>最后注意语法规范   <ul><li>创建类➡类名后面不要加小括号</li><li>生成实例➡类名后面加小括号</li><li>构造函数不需要加 function 关键字</li></ul></li></ul><h3 id="类中添加方法"><a href="#类中添加方法" class="headerlink" title="类中添加方法"></a>类中添加方法</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age</span>) &#123;   </span><br><span class="line">      <span class="comment">// constructor 称为构造器或者构造函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;      </span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>); </span><br><span class="line">ldh.<span class="title function_">say</span>() </span><br></pre></td></tr></table></figure><p><strong>注意</strong>： 方法之间不能加逗号分隔，同时方法不需要添加 function 关键字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 创建类 class  创建一个 明星类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">        <span class="comment">// 类的共有属性放到 constructor 里面</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sing</span>(<span class="params">song</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">uname</span> + song);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line">    <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(zxy);</span><br><span class="line">    <span class="comment">// (1) 我们类里面所有的函数不需要写function </span></span><br><span class="line">    <span class="comment">// (2) 多个函数方法之间不需要添加逗号分隔</span></span><br><span class="line">    ldh.<span class="title function_">sing</span>(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line">    zxy.<span class="title function_">sing</span>(<span class="string">&#x27;李香兰&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>类的共有属性放到<code>constructor</code> 里面</li><li>类里面的函数都不需要写 <code>function</code> 关键字</li></ul><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>现实中的继承：子承父业，比如我们都继承了父亲的姓。</p><p>程序中的继承：子类可以继承父类的一些属性和方法。</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一个实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 父类有加法方法</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 子类继承父类加法方法 同时 扩展减法方法</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">            <span class="comment">// 利用super 调用父类的构造函数</span></span><br><span class="line">            <span class="comment">// super 必须在子类this之前调用</span></span><br><span class="line">            <span class="variable language_">super</span>(x, y);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">subtract</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    son.<span class="title function_">subtract</span>();</span><br><span class="line">    son.<span class="title function_">sum</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><ul><li><code>super</code> 关键字用于访问和调用对象父类上的函数，可以调用父类的构造函数，也可以调用父类的普通函数</li></ul><h3 id="调用父类的构造函数"><a href="#调用父类的构造函数" class="headerlink" title="调用父类的构造函数"></a>调用父类的构造函数</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">surname</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">surname</span> = surname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> entends <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">surname,firstname</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(surname);<span class="comment">//调用父类的 constructor(surname)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstname</span> = firstname;<span class="comment">//定义子类独有的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<strong>子类在构造函数中使用super,必须放到this前面（必须先调用父类的构造方法，在使用子类构造方法）</strong></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">surname</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">surname</span> = surname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">saySurname</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的姓是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">surname</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> entends <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">surname,firstname</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(surname);<span class="comment">//调用父类的 constructor(surname)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstname</span> = firstname;<span class="comment">//定义子类独有的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayFirstname</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是:&#x27;</span> + <span class="variable language_">this</span>.<span class="property">firstname</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> damao = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘&#x27;</span>,<span class="string">&#x27;德华&#x27;</span>);</span><br><span class="line">damao.<span class="title function_">saySurname</span>();</span><br><span class="line">damao.<span class="title function_">sayFirstname</span>();</span><br></pre></td></tr></table></figure><h3 id="调用父类的普通函数"><a href="#调用父类的普通函数" class="headerlink" title="调用父类的普通函数"></a>调用父类的普通函数</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我是爸爸&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// super.say() super调用父类的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">say</span>() + <span class="string">&#x27;的儿子&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> damao = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(damao.<span class="title function_">say</span>());</span><br></pre></td></tr></table></figure><ul><li>多个方法之间不需要添加逗号分隔</li><li>继承中属性和方法的查找原则：就近原则，先看子类，再看父类</li></ul><h2 id="三个注意点"><a href="#三个注意点" class="headerlink" title="三个注意点"></a>三个注意点</h2><ol><li><p>在ES6中类没有变量提升，所以必须先定义类，才能通过类实例化对象</p></li><li><p>类里面的共有属性和方法一定要加 <code>this</code>使用</p></li><li><p>类里面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this</span><br></pre></td></tr></table></figure><p>指向：   </p><ul><li>constructor 里面的 <code>this</code>指向实例对象</li><li>方法里面的<code>this</code>指向这个方法的调用者</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> that;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> _that;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">constructor</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// constructor 里面的this 指向的是 创建的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// this.sing();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">btn</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">btn</span>.<span class="property">onclick</span> = <span class="variable language_">this</span>.<span class="property">sing</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 这个sing方法里面的this 指向的是 btn 这个按钮,因为这个按钮调用了这个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">uname</span>); </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// that里面存储的是constructor里面的this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">dance</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 这个dance里面的this 指向的是实例对象 ldh 因为ldh 调用了这个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                _that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(that === ldh);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ldh.<span class="title function_">dance</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(_that === ldh);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 类里面的共有的属性和方法一定要加this使用.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="构造函数和原型"><a href="#构造函数和原型" class="headerlink" title="构造函数和原型"></a>构造函数和原型</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在典型的 OOP 的语言中（如 Java），都存在类的概念，类就是对象的模板，对象就是类的实例，但在 ES6之前， JS 中并没用引入类的概念。</p><p>ES6， 全称 ECMAScript 6.0 ，2015.06 发版。但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏览器也支持 ES6，不过只实现了 ES6 的部分特性和功能。</p><p>在 ES6之前 ，对象不是基于类创建的，而是用一种称为构建函数的特殊函数来定义对象和它们的特征。</p><ul><li>创建对象有三种方式   <ul><li><strong>对象字面量</strong></li><li><strong>new Object()</strong></li><li><strong>自定义构造函数</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 利用 new Object() 创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用对象字面量创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;；</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.利用构造函数创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>构造函数用于创建某一类对象，其首字母要大写</li><li>构造函数要和<code>new</code>一起使用才有意义</li></ol><h2 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li>构造函数是一种特殊的函数，主要用来初始化对象(为对象成员变量赋初始值)，它总与<code>new</code>一起使用</li><li>我们可以把对象中的一些公共的属性和方法抽取出来，然后封装到这个函数里面</li></ul><p>new 在执行时会做四件事</p><ol><li>在内存中创建一个新的空对象。</li><li>让 this 指向这个新的对象。</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法。</li><li>返回这个新对象（所以构造函数里面不需要 return ）。</li></ol><h3 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h3><p>JavaScript 的构造函数中可以添加一些成员，可以在构造函数本身上添加，也可以在构造函数内部的<code>this</code>上添加。通过这两种方式添加的成员，就分别称为静态成员和实例成员。</p><ul><li>静态成员: 在构造函数本身上添加的成员为静态成员，只能由构造函数本身来访问</li><li>实例成员: 在构造函数内部创建的对象成员称为实例成员，只能由实例化的对象来访问</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数中的属性和方法我们称为成员，成员可以添加</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例成员就是构造函数内部通过this添加的成员  uname age sing  就是实例成员</span></span><br><span class="line"><span class="comment">// 实例成员只能通过实例化的对象来访问</span></span><br><span class="line">ldh.<span class="title function_">sing</span>();</span><br><span class="line"><span class="title class_">Star</span>.<span class="property">uname</span>; <span class="comment">// undefined     不可以通过构造函数来访问实例成员</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员就是在构造函数本身上添加的成员 sex 就是静态成员</span></span><br><span class="line"><span class="comment">// 静态成员只能通过构造函数来访问</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property">sex</span>;</span><br><span class="line">ldh.<span class="property">sex</span>; <span class="comment">// undefined  不能通过对象来访问</span></span><br></pre></td></tr></table></figure><h3 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h3><p>构造函数方法很好用，但是存在浪费内存的问题。</p><p><img src="https://img-blog.csdnimg.cn/080f8513ab074159abf16942fd009b2b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><strong>我们希望所有的对象使用同一个函数，这样就比较节省内存</strong></li></ul><h2 id="构造函数原型-prototype"><a href="#构造函数原型-prototype" class="headerlink" title="构造函数原型 prototype"></a>构造函数原型 prototype</h2><ul><li>构造函数通过原型分配的函数是所有对象所共享的,这样就解决了内存浪费问题</li><li>JavaScript 规定，每一个构造函数都有一个<code>prototype</code>属性，指向另一个对象，注意这个<code>prototype</code>就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有</li><li>我们可以把那些不变的方法，直接定义在<code>prototype</code> 对象上，这样所有对象的实例就可以共享这些方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 构造函数的问题. </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//公共属性定义到构造函数里面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this.sing = function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(&#x27;我会唱歌&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//公共的方法我们放到原型对象身上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sing</span> === zxy.<span class="property">sing</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ldh.<span class="title function_">sing</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        zxy.<span class="title function_">sing</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 一般情况下,我们的公共属性定义到构造函数里面, 公共的方法我们放到原型对象身上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>一般情况下,我们的公共属性定义到构造函数里面, 公共的方法我们放到原型对象身上</li></ul><p>问答：原型是什么？</p><ul><li>一个对象，我们也称为 <code>prototype</code> 为原型对象</li></ul><p>问答：原型的作用是什么？</p><ul><li>共享方法</li></ul><h2 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型 __ proto __"></a>对象原型 __ proto __</h2><ul><li>对象都会有一个属性 <code>_proto_</code> 指向构造函数的<code>prototype</code>原型对象，之所以我们对象可以使用构造函数<code>prototype</code> 原型对象的属性和方法，就是因为对象有<code>_proto_</code>原型的存在。</li><li><code>_proto_</code>对象原型和原型对象 <code>prototype</code> 是等价的</li><li><code>_proto_</code>对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 <code>prototype</code></li></ul><p><img src="https://img-blog.csdnimg.cn/e8e771c189c548f7b67209722f6289dc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li><code>Star.prototype 和 ldh._proto_</code> 指向相同</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ldh.<span class="title function_">sing</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh); </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 对象身上系统自己添加一个 __proto__ 指向我们构造函数的原型对象 prototype</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span> === <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 方法的查找规则: 首先先看ldh 对象身上是否有 sing 方法,如果有就执行这个对象上的sing</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果没有sing 这个方法,因为有 __proto__ 的存在,就去构造函数原型对象prototype身上去查找sing这个方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="constructor-构造函数"><a href="#constructor-构造函数" class="headerlink" title="constructor 构造函数"></a>constructor 构造函数</h2><ul><li>对象原型(__ proto __) 和构造函数(prototype)原型对象 里面都有一个属性 constructor 属性， constructor 我们称为构造函数，因为它指回构造函数本身。</li><li><code>constructor</code>主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数</li><li><strong>一般情况下，对象的方法都在构造函数(prototype)的原型对象中设置</strong></li><li>如果有多个对象的方法，我们可以给原型对象<code>prototype</code>采取对象形式赋值，但是这样会覆盖构造函数原型对象原来的内容，这样修改后的原型对象<code>constructor</code>就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个<code>constructor</code>指向原来的构造函数</li></ul><p>具体请看实例配合理解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Star.prototype.sing = function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     console.log(&#x27;我会唱歌&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Star.prototype.movie = function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     console.log(&#x27;我会演电影&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">constructor</span>: <span class="title class_">Star</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">sing</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">movie</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会演电影&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;<span class="number">7</span></span><br></pre></td></tr></table></figure><h2 id="构造函数、实例、原型对象三者关系"><a href="#构造函数、实例、原型对象三者关系" class="headerlink" title="构造函数、实例、原型对象三者关系"></a>构造函数、实例、原型对象三者关系</h2><p><img src="https://img-blog.csdnimg.cn/8ee8345e99974afd93ce053e7988712d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="原型链查找规则"><a href="#原型链查找规则" class="headerlink" title="原型链查找规则"></a>原型链查找规则</h2><ol><li>当访问一个对象的属性(包括方法)时，首先查找这个对象自身有没有该属性</li><li>如果没有就查找它的原型(也就是<code>_proto_</code>指向的<code>prototype原型对象</code>)</li><li>如果还没有就查找原型对象的原型(Object的原型对象)</li><li>依次类推一直找到Object为止(null)</li><li>__ proto __对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</li></ol><p><img src="https://img-blog.csdnimg.cn/c1cbd18ff3444621bf151654714b85cd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 只要是对象就有__proto__ 原型, 指向原型对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.我们Star原型对象里面的__proto__原型指向的是 Object.prototype</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 我们Object.prototype原型对象里面的__proto__原型  指向为 null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="原型对象this指向"><a href="#原型对象this指向" class="headerlink" title="原型对象this指向"></a>原型对象this指向</h2><ul><li>构造函数中的 <code>this</code>指向我们的实例对象</li><li>原型对象里面放的是方法，这个方法里面的<code>this</code>指向的是这个方法的调用者，也就是这个实例对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> that;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ldh.<span class="title function_">sing</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(that === ldh);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h2><ul><li>可以通过原型对象，对原来的内置对象进行扩展自定义的方法</li><li>比如给数组增加自定义求偶数和的功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 原型对象的应用 扩展内置对象方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                sum += <span class="variable language_">this</span>[i];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> sum;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Array.prototype = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     sum: function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//         var sum = 0;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//         for (var i = 0; i &lt; this.length; i++) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//             sum += this[i];</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//         &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//         return sum;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sum</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">sum</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>数组和字符串内置对象不能给原型对象覆盖操作<code>Array.prototype = &#123;&#125;</code>，只能是<code>Array.prototype.xxx = function()&#123;&#125;</code>的方式</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>ES6 之前并没有给我们提供<code>extends</code>继承</p><ul><li>我们可以通过构造函数+原型对象模拟实现继承，被称为组合继承</li></ul><h2 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h2><p>调用这个函数，并且修改函数运行时的 this 指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(thisArg,arg1,arg2,......)</span><br></pre></td></tr></table></figure><ul><li><code>thisArg</code>：当前调用函数 this 的指向对象</li><li><code>arg1,arg2</code>： 传递的其他参数</li></ul><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// call 方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我希望我的希望有希望&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// Object&#123;...&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);<span class="comment">// 3</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// fn();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. call() 可以调用函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// fn.call();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. call() 可以改变这个函数的this指向 此时这个函数的this 就指向了o这个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fn.<span class="title function_">call</span>(o, <span class="number">1</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="借用构造函数继承父类型属性"><a href="#借用构造函数继承父类型属性" class="headerlink" title="借用构造函数继承父类型属性"></a>借用构造函数继承父类型属性</h2><ul><li>核心原理: 通过 <code>call()</code> 把父类型的 this 指向子类型的 this，这样就可以实现子类型继承父类型的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 借用父构造函数继承属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 父构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this 指向父构造函数的对象实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2 .子构造函数 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this 指向子构造函数的对象实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">score</span> = score;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="借用原型对象继承父类型方法"><a href="#借用原型对象继承父类型方法" class="headerlink" title="借用原型对象继承父类型方法"></a>借用原型对象继承父类型方法</h2><ul><li>一般情况下，对象的方法都在构造函数的原型对象中设置，通过构造函数无法继承父类方法</li></ul><p>核心原理：</p><ol><li>将子类所共享的方法提取出来，让子类的 <code>prototype 原型对象 = new 父类()</code></li><li>本质： 子类原型对象等于是实例化父类，因为父类实例化之后另外开辟空间，就不会影响原来父类原型对象</li><li>将子类的<code>constructor</code>重新指向子类的构造函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 借用父构造函数继承属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 父构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this 指向父构造函数的对象实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">money</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2 .子构造函数 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this 指向子构造函数的对象实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">score</span> = score;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 这个是子构造函数专门的方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">exam</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;孩子要考试&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="类的本质"><a href="#类的本质" class="headerlink" title="类的本质"></a>类的本质</h2><ol><li>class 本质还是 function</li><li>类的所有方法都定义在类的 <code>prototype</code>属性上</li><li>类创建的实例，里面也有<code>_proto_</code>指向类的<code>prototype</code>原型对象</li><li>所以 ES6 的类它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</li><li>所以 ES6 的类其实就是语法糖</li><li>语法糖：语法糖就是一种便捷写法，简单理解</li></ol><h1 id="ES5新增方法"><a href="#ES5新增方法" class="headerlink" title="ES5新增方法"></a>ES5新增方法</h1><p>ES5 给我们新增了一些方法，可以很方便的操作数组或者字符串</p><ul><li>数组方法</li><li>字符串方法</li><li>对象方法</li></ul><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><ul><li>迭代(遍历)方法：forEach() ，map()，filter()，some() ，every() ;</li></ul><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>))</span><br></pre></td></tr></table></figure><ul><li>currentValue : 数组当前项的值</li><li>index: 数组当前项的索引</li><li>arr: 数组对象本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// forEach 迭代(遍历) 数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, index, array</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;每个数组元素&#x27;</span> + value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;每个数组元素的索引号&#x27;</span> + index);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数组本身&#x27;</span> + array);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            sum += value;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="filter-筛选数组"><a href="#filter-筛选数组" class="headerlink" title="filter()筛选数组"></a>filter()筛选数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>))</span><br></pre></td></tr></table></figure><ul><li><code>filter()</code>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于筛选数组</li><li>注意它直接返回一个新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// filter 筛选数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">88</span>, <span class="number">3</span>, <span class="number">7</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value, index</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// return value &gt;= 20;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><ul><li><code>some()</code>方法用于检测数组中的元素是否满足指定条件（查找数组中是否有满足条件的元素）</li><li>注意它返回的是布尔值，如果查找到这个元素，就返回true，如果查找不到就返回false</li><li>如果找到第一个满足条件的元素，则终止循环，不再继续查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// some 查找数组中是否有满足条件的元素 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> flag1 = arr1.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> value == <span class="string">&#x27;pink&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(flag1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. filter 也是查找满足条件的元素 返回的是一个数组 而且是把所有满足条件的元素返回回来</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. some 也是查找满足条件的元素是否存在  返回的是一个布尔值 如果查找到第一个满足条件的元素就终止循环</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ul><li><code>trim()</code>方法会从一个字符串的两端删除空白字符</li><li><code>trim()</code>方法并不影响原字符串本身，它返回的是一个新的字符串</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// trim 方法去除字符串两侧空格</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = <span class="string">&#x27;   an  dy   &#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str1 = str.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str1);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = input.<span class="property">value</span>.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (str === <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;请输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">innerHTML</span> = str;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><ol><li><code>Object.keys()</code>用于获取对象自身所有的属性</li><li>效果类似<code>for...in</code></li><li>返回一个由属性名组成的数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 用于获取对象自身所有的属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="number">1999</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">num</span>: <span class="number">2000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// id</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// pname</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// price</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// num</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><ul><li><code>Object.defineProperty()</code>定义对象中新属性或修改原有的属性(了解)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,prop,descriptor)</span><br></pre></td></tr></table></figure><ul><li>obj : 目标对象</li><li>prop : 需定义或修改的属性的名字</li><li>descriptor : 目标属性所拥有的特性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Object.defineProperty() 定义新属性或修改原有的属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">id</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">price</span>: <span class="number">1999</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 以前的对象添加和修改属性的方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// obj.num = 1000;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// obj.price = 99;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(obj);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. Object.defineProperty() 定义新属性或修改原有的属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;num&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">value</span>: <span class="number">1000</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">enumerable</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;price&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">value</span>: <span class="number">9.9</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;id&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果值为false 不允许修改这个属性值 默认值也是false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">writable</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="property">id</span> = <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;address&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">value</span>: <span class="string">&#x27;中国山东蓝翔技校xx单元&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果只为false 不允许修改这个属性值 默认值也是false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">writable</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// enumerable 如果值为false 则不允许遍历, 默认的值是 false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">enumerable</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// configurable 如果为false 则不允许删除这个属性 不允许在修改第三个参数里面的特性 默认为false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">configurable</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">delete</span> obj.<span class="property">address</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">delete</span> obj.<span class="property">pname</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;address&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">value</span>: <span class="string">&#x27;中国山东蓝翔技校xx单元&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果值为false 不允许修改这个属性值 默认值也是false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">writable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// enumerable 如果值为false 则不允许遍历, 默认的值是 false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">enumerable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// configurable 如果为false 则不允许删除这个属性 默认为false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">configurable</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">address</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>第三个参数 descriptor 说明：以对象形式{ }书写</li><li>value：设置属性的值，默认为undefined</li><li>writeable: 值是否可以重写 true | false 默认为false</li><li>enumerable: 目标属性是否可以被枚举 true | false 默认为false</li><li>configurable: 目标属性是否可以被删除或是否可以再次修改特性 true | false 默认为false</li></ul><h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h2><ol><li>函数声明方式 function 关键字(命名函数)</li><li>函数表达式(匿名函数)</li><li>new Function()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;参数1&#x27;</span>,<span class="string">&#x27;参数2&#x27;</span>,.....,<span class="string">&#x27;函数体&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>Function 里面参数都必须是字符串格式</li><li>第三种方式执行效率低，也不方便书写，因此较少使用</li><li>所有函数都是 Function 的实例(对象)</li><li>函数也属于对象</li></ul><p><img src="https://img-blog.csdnimg.cn/41f3e6248b384edba0cef92f7557b9b3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  函数的定义方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 自定义函数(命名函数) </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 函数表达式 (匿名函数)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 利用 new Function(&#x27;参数1&#x27;,&#x27;参数2&#x27;, &#x27;函数体&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Function 里面参数都必须是字符串格式，执行效率低，较少写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;console.log(a + b)&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 4. 所有函数都是 Function 的实例(对象)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(f);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 5. 函数也属于对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(f <span class="keyword">instanceof</span> <span class="title class_">Object</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h2><ol><li>普通函数</li><li>对象的方法</li><li>构造函数</li><li>绑定事件函数</li><li>定时器函数</li><li>立即执行函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 函数的调用方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 普通函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// fn();   fn.call()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 对象的方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        o.<span class="title function_">sayHi</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Star</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 4. 绑定事件函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// btn.onclick = function() &#123;&#125;;   // 点击了按钮就可以调用这个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 5. 定时器函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// setInterval(function() &#123;&#125;, 1000);  这个函数是定时器自动1秒钟调用一次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 6. 立即执行函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 立即执行函数是自动调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="函数内this的指向"><a href="#函数内this的指向" class="headerlink" title="函数内this的指向"></a>函数内this的指向</h2><ul><li><code>this</code>指向，是当我们调用函数的时候确定的，调用方式的不同决定了<code>this</code>的指向不同，一般我们指向我们的调用者</li></ul><table><thead><tr><th>调用方式</th><th>this指向</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td></tr><tr><td>构造函数调用</td><td>实例对象，原型对象里面的方法也指向实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td></tr><tr><td>定时器函数</td><td>window</td></tr><tr><td>立即执行函数</td><td>window</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 函数的不同调用方式决定了this 的指向不同</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 普通函数 this 指向window</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;普通函数的this&#x27;</span> + <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 对象的方法 this指向的是对象 o</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;对象方法的this:&#x27;</span> + <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        o.<span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 构造函数 this 指向 ldh 这个实例对象 原型对象里面的this 指向的也是 ldh这个实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 绑定事件函数 this 指向的是函数的调用者 btn这个按钮对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;绑定时间函数的this:&#x27;</span> + <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 5. 定时器函数 this 指向的也是window</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定时器的this:&#x27;</span> + <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 6. 立即执行函数 this还是指向window</span></span></span><br><span class="line"><span class="language-javascript">        (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;立即执行函数的this&#x27;</span> + <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="改变函数内部this指向"><a href="#改变函数内部this指向" class="headerlink" title="改变函数内部this指向"></a>改变函数内部this指向</h2><ul><li>JavaScript 为我们专门提供了一些函数方法来帮我们处理函数内部 this 的指向问题，常用的有 <code>bind(),call(),apply()</code>三种方法</li></ul><h3 id="call-方法"><a href="#call-方法" class="headerlink" title="call() 方法"></a>call() 方法</h3><ul><li><code>call()</code>方法调用一个对象，简单理解为调用函数的方式，但是它可以改变函数的<code>this</code>指向</li><li><code>fun.call(thisArg,arg1,arg2,.....)</code></li><li><code>thisArg</code>: 在 fun 函数运行时指定的 this 值</li><li><code>arg1,arg2</code>: 传递的其他参数</li><li>返回值就是函数的返回值，因为它就是调用函数</li><li>因此当我们想改变 this 指向，同时想调用这个函数的时候，可以使用 call，比如继承</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 改变函数内this指向  js提供了三种方法  call()  apply()  bind()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. call()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fn.<span class="title function_">call</span>(o, <span class="number">1</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// call 第一个可以调用函数 第二个可以改变函数内的this 指向</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// call 的主要作用可以实现继承</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age, sex</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, sex</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age, sex);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply()方法"></a>apply()方法</h3><ul><li><code>apply()</code>方法调用一个函数，简单理解为调用函数的方式，但是它可以改变函数的 <code>this</code>指向</li><li><code>fun.apply(thisArg,[argsArray])</code></li><li>thisArg: 在 fun 函数运行时指定的 this 值</li><li>argsArray : 传递的值，必须包含在数组里面</li><li>返回值就是函数的返回值，因为它就是调用函数</li><li>因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 改变函数内this指向  js提供了三种方法  call()  apply()  bind()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. apply()  应用 运用的意思</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// &#x27;pink&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fn.<span class="title function_">apply</span>(o, [<span class="string">&#x27;pink&#x27;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 也是调用函数 第二个可以改变函数内部的this指向</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 但是他的参数必须是数组(伪数组)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. apply 的主要应用 比如说我们可以利用 apply 借助于数学内置对象求数组最大值 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Math.max();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">4</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var max = Math.max.apply(null, arr);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> min = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(max, min);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h3><ul><li><code>bind()</code>方法不会调用函数。但是能改变函数内部 <code>this</code>指向</li><li><code>fun.bind(thisArg,arg1,arg2,....)</code></li><li>返回由指定的 <code>this</code>值和初始化参数改造的 原函数拷贝</li><li>因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 改变函数内this指向  js提供了三种方法  call()  apply()  bind()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. bind()  绑定 捆绑的意思</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> f = fn.<span class="title function_">bind</span>(o, <span class="number">1</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">f</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 不会调用原来的函数   可以改变原来函数内部的this 指向</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 返回的是原函数改变this之后产生的新函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 如果有的函数我们不需要立即调用,但是又想改变这个函数内部的this指向此时用bind</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 4. 我们有一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var btn1 = document.querySelector(&#x27;button&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// btn1.onclick = function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     this.disabled = true; // 这个this 指向的是 btn 这个按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     // var that = this;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     setTimeout(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//         // that.disabled = false; // 定时器函数里面的this 指向的是window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//         this.disabled = false; // 此时定时器函数里面的this 指向的是btn</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     &#125;.bind(this), 3000); // 这个this 指向的是btn 这个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>call apply bind 总结：</p><p>相同点：</p><ul><li>都可以改变函数内部的 <code>this</code>指向</li></ul><p>区别点：</p><ul><li><code>call</code>和<code>apply</code>会调用函数，并且改变函数内部的<code>this</code>指向</li><li><code>call</code>和<code>apply</code>传递的参数不一样，call 传递参数，apply 必须数组形式</li><li><code>bind</code>不会调用函数，可以改变函数内部<code>this</code>指向</li></ul><p>主要应用场景</p><ol><li><code>call</code>经常做继承</li><li><code>apply</code>经常跟数组有关系，比如借助于数学对线实现数组最大值与最小值</li><li><code>bind</code>不调用函数，但是还想改变this指向，比如改变定时器内部的this指向</li></ol>]]></content>
      
      
      <categories>
          
          <category> JS面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs基础之Express框架和art-template引擎(四)</title>
      <link href="/myblog.github.io/2022/04/24/Nodejs%E5%9F%BA%E7%A1%80%E4%B9%8BExpress%E6%A1%86%E6%9E%B6%E5%92%8Cart-template%E5%BC%95%E6%93%8E(%E5%9B%9B)/"/>
      <url>/myblog.github.io/2022/04/24/Nodejs%E5%9F%BA%E7%A1%80%E4%B9%8BExpress%E6%A1%86%E6%9E%B6%E5%92%8Cart-template%E5%BC%95%E6%93%8E(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="目录脑图"><a href="#目录脑图" class="headerlink" title="目录脑图"></a>目录脑图</h1><p><img src="https://img-blog.csdnimg.cn/82e31f33d08e453ab900db939701914c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ul><li>参考视频：</li><li><a href="https://www.bilibili.com/video/BV1UE411H71P?from=search&seid=4380085066966008976">Node.js 黑马程序员</a></li><li><a href="https://www.bilibili.com/video/BV11t411k79h?from=search&seid=4268305071411376003">Node.js大地老师讲解</a></li></ul><h1 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h1><p>Express 是一个基于Node.js 平台，快速、开放、极简的web 开发框架，它提供一系列强大的特性，帮助你创建各种Web 和移动设备应用。</p><ul><li>英文官网：<a href="http://expressjs.com/">http://expressjs.com/</a></li><li>中文官网：<a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></li></ul><h2 id="Express安装"><a href="#Express安装" class="headerlink" title="Express安装"></a>Express安装</h2><ol><li>安装 Expresss 框架，就是使用 npm 的命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><ul><li>–save 参数，表示自动修改 package.json 文件，自动添加依赖项目</li></ul><h2 id="Express简单使用"><a href="#Express简单使用" class="headerlink" title="Express简单使用"></a>Express简单使用</h2><h3 id="app-get"><a href="#app-get" class="headerlink" title="app.get"></a>app.get</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">// app.get 主要用来显示数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/article&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;新闻页面&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;登录页面&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/register&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;注册页面&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7a0f6f57c2644cdeaf2cbebd93ab5996.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="app-post"><a href="#app-post" class="headerlink" title="app.post"></a>app.post</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">// app.post 主要用于增加数据</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/doLogin&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;执行登录&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d4891c0739514952bad7dceaf391862b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="app-put"><a href="#app-put" class="headerlink" title="app.put"></a>app.put</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">// app.put 主要用于修改数据</span></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/editUser&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;修改用户&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/72d3a0e2a5a744738334cd890c62ce06.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="app-delete"><a href="#app-delete" class="headerlink" title="app.delete"></a>app.delete</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">// app.delete 主要用于删除数据</span></span><br><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/deleteUser&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/420de4e2f66543b0ae31d709a1629987.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="路由配置多级目录"><a href="#路由配置多级目录" class="headerlink" title="路由配置多级目录"></a>路由配置多级目录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">// 路由里面配置多级目录  http://localhost:3000/admin/user/edit</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/admin/user/add&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;admin user add&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b6be7f734e544dd3827b980362c599c4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">// app.get 主要用来显示数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/article&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;新闻页面&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//动态路由  配置路由的时候也要注意顺序</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/article/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id = req.<span class="property">params</span>[<span class="string">&quot;id&quot;</span>]; <span class="comment">//获取动态路由</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;动态路由&quot;</span> + id);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/article/add&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;article add&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/348bca2f3be94717b0d9be3693577e8b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="GET传值"><a href="#GET传值" class="headerlink" title="GET传值"></a>GET传值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">//get 传值  http://localhost:3000/product?name=zhangsan&amp;age=20</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/product&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> query = req.<span class="property">query</span>; <span class="comment">//获取get传值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span> + query.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age:&quot;</span> + query.<span class="property">age</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;name:&quot;</span> + query.<span class="property">name</span> + <span class="string">&quot;age:&quot;</span> + query.<span class="property">age</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/70bc205bdf46463ebb38543e0f7ac31b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="Express框架中EJS的使用"><a href="#Express框架中EJS的使用" class="headerlink" title="Express框架中EJS的使用"></a>Express框架中EJS的使用</h2><p>EJS 是后台模板，可以把我们数据库和文件读取的数据显示到 HTML页面上面。它是一个第三方模块，需要通过 npm 安装。Express 框架里面集成了 EJS 模板引擎，所以我们来看下两者结合的使用。</p><ol><li>安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure><ol><li>配置ejs <code>app.set(&quot;view engine&quot;,&quot;ejs)</code></li><li>使用ejs（默认加载模板引擎的文件夹是views，所以 index 前面不需要加 views）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>,&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;ejs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问127.0.0.1:3000/  渲染的是index模板</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>,&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>之后我们在 views 文件夹下新建 index.ejs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是一个ejs模板引擎<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">1234567891011</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0a3c03c1b844412aa8a71aebd2d495da.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="EJS常用标签"><a href="#EJS常用标签" class="headerlink" title="EJS常用标签"></a>EJS常用标签</h3><h3 id="绑定数据"><a href="#绑定数据" class="headerlink" title="绑定数据"></a>绑定数据</h3><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;ejs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问127.0.0.1:3000/  渲染的是index模板</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title = <span class="string">&quot;你好ejs&quot;</span>;<span class="comment">// 假如这个数据是从数据库获取到的</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>,&#123;</span><br><span class="line"><span class="attr">title</span>: title, <span class="comment">// 这样就绑定到 index.ejs 模板里面了</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>接下来我们去 index.ejs 里面输出这个数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是一个ejs模板引擎<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%=title%&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c98725744d1142979f8bd2360ec571d1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h3><p>我们也可以绑定对象中的数据并将其渲染到 html 页面。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/news&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> userinfo = &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;news&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">userinfo</span>: userinfo,<span class="comment">// 绑定 userinfo 对象数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>接下来我们去 views 文件夹下新建 news.ejs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>绑定对象中的数据<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &lt;%=userinfo.username%&gt;---&lt;%=userinfo.age%&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b88ec0d7bdb14529a9f4f3a5813a6aa1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="输出-HTML标签"><a href="#输出-HTML标签" class="headerlink" title="输出 HTML标签"></a>输出 HTML标签</h3><p>我们也可以输出 HTML标签，既可以原格式输出，又可以解析 HTML 标签输出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">    <span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/news&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> article = <span class="string">&quot;&lt;h3&gt;我是一个h3&lt;/h3&gt;&quot;</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;news&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">article</span>: article,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &lt;%=article%&gt;<span class="comment">&lt;!-- 原格式输出 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &lt;%-article%&gt;<span class="comment">&lt;!-- 解析html标签输出 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a79e5260e4864ac2b3b327418f90d2f0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、安装  cnpm install ejs --save</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、app.set(&quot;view engine&quot;,&quot;ejs&quot;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、使用  (默认加载模板引擎的文件夹是views)</span></span><br><span class="line"><span class="comment">    res.render(&quot;index&quot;,&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;ejs&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title = <span class="string">&quot;你好ejs&quot;</span>;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">title</span>:title</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/news&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;news&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">flag</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">score</span>:<span class="number">60</span>,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br><span class="line"> </span><br><span class="line">&lt;h2&gt;条件判断&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="keyword">if</span>(flag==<span class="literal">true</span>)&#123;%&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>flag=true<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">&lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="keyword">if</span>(score&gt;=<span class="number">60</span>)&#123;%&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;%&#125;<span class="keyword">else</span>&#123;%&gt;</span><br><span class="line">   不及格</span><br><span class="line">&lt;%&#125;%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/677f628e55314faba10d3f8b0286f50e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、安装  cnpm install ejs --save</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、app.set(&quot;view engine&quot;,&quot;ejs&quot;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、使用  (默认加载模板引擎的文件夹是views)</span></span><br><span class="line"><span class="comment">    res.render(&quot;index&quot;,&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">    <span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> title = <span class="string">&quot;你好ejs&quot;</span>;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">title</span>: title</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/news&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> list = [<span class="string">&quot;1111&quot;</span>, <span class="string">&quot;22222&quot;</span>, <span class="string">&quot;3333333&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newsList = [&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;新闻1111&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;新闻122222&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;新闻33331&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;新闻44444&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;news&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">list</span>: list,</span><br><span class="line">        <span class="attr">newsList</span>: newsList</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>循环遍历<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;%for(let i=0;i&lt;list.length;i++)&#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=list[i]%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;%for(let i=0;i&lt;newsList.length;i++)&#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=newsList[i].title%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ccaf5c9ec0a44ff1b8c209ba7cd7b348.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="引入模板"><a href="#引入模板" class="headerlink" title="引入模板"></a>引入模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- include(&#x27;footer.ejs&#x27;) %&gt;</span><br></pre></td></tr></table></figure><h3 id="ejs后缀修改为html"><a href="#ejs后缀修改为html" class="headerlink" title="ejs后缀修改为html"></a>ejs后缀修改为html</h3><p>这是一个小技巧，看着.ejs 的后缀总觉得不爽，使用如下方法，可以将模板文件的后缀换成我们习惯的.html。</p><ol><li>在 app.js 的头上定义ejs</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li>注册html 模板引擎代码如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>,ejs__express)</span><br></pre></td></tr></table></figure><ol><li>将模板引擎转换成 html 代码如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>,<span class="string">&#x27;html&#x27;</span>)====</span><br></pre></td></tr></table></figure><ol><li>修改模板文件的后缀为 .html 即可</li></ol><h3 id="Express-static托管静态文件"><a href="#Express-static托管静态文件" class="headerlink" title="Express.static托管静态文件"></a>Express.static托管静态文件</h3><p>我们的静态资源 img、css 等要如何引入呢？</p><ol><li>调用 express.static 中间件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;static&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在，static 目录下面的文件就可以访问了</p><ol><li>在 ejs 里面正常引入css 即可</li></ol><h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><p>通俗的讲：中间件就是匹配路由之前或者匹配路由完成做的一系列的操作。中间件如果想往下匹配的话，那么需要写 <code>next()</code></p><p>中间件可以用来做权限判断：没有登录 跳转到登录页面，登录以后就显示登录以后的页面</p><p>如果我的get、post 回调函数中，没有next 参数，那么就匹配上第一个路由，，就不会往下匹配了。如果想往下匹配的话，那么需要写 <code>next()</code></p><p><strong>Express 应用可使用如下几种中间件</strong></p><ul><li>应用级中间件</li><li>路由级中间件（用的少）</li><li>错误处理中间件</li><li>内置中间件</li><li>第三方中间件</li></ul><h3 id="应用级中间件"><a href="#应用级中间件" class="headerlink" title="应用级中间件"></a>应用级中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、应用级中间件 (用于权限判断)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;<span class="comment">// 匹配任何路由</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); </span><br><span class="line">    <span class="title function_">next</span>();<span class="comment">// 表示匹配完成这个中间件之后程序继续向下执行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;执行登录&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、路由级中间件(用的比较少)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/news/add&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// res.send(&quot;执行增加新闻&quot;)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行增加新闻&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/news/:id&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;新闻动态路由&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、错误处理中间件  </span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">   res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;404&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内置服务</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;./static&#x27;</span>))</span><br></pre></td></tr></table></figure><p>内置中间件一般用于 css、img 等静态资源的加载访问。</p><h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><h3 id="获取GET请求参数"><a href="#获取GET请求参数" class="headerlink" title="获取GET请求参数"></a>获取GET请求参数</h3><ul><li>GET 请求的参数在 URL 中，在原生 Node中，需要使用 url 模块来识别参数字符串。在 Express 中，不需要使用 url模块了，可以直接使用 req.query 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/?name=zhangsan&amp;age=20</span></span><br><span class="line">    <span class="keyword">let</span> query = req.<span class="property">query</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query.<span class="property">age</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">query</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1d0948d471f8445c9667c6ede185d09b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="获取POST请求参数"><a href="#获取POST请求参数" class="headerlink" title="获取POST请求参数"></a>获取POST请求参数</h3><p>获取 POST 请求参数需要加载第三方中间件 <code>body-parser</code></p><ol><li>首先下载 body-parse</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><ol><li>引入中间件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>配置中间件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure><ol><li>接收 post 数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.body</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置第三方中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/doLogin&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.body 获取post传值</span></span><br><span class="line">    <span class="keyword">var</span> body = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(body);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/51fde927fd844cd38a528792e0b2e8c3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="Express-Cookie"><a href="#Express-Cookie" class="headerlink" title="Express Cookie"></a>Express Cookie</h2><h3 id="Cookie简介"><a href="#Cookie简介" class="headerlink" title="Cookie简介"></a>Cookie简介</h3><ul><li>cookie 是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一个域名的时候共享数据。</li><li>HTTP 是无状态协议。简单地说，当你浏览了一个页面，然后转到同一个网站的另一个页面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何关系的。</li><li>Cookie 是一个简单到爆的想法：当访问一个页面的时候，服务器在下行HTTP 报文中，命令浏览器存储一个字符串;  浏览器再访问同一个域的时候，将把这个字符串携带到上行HTTP  请求中。第一次访问一个服务器，不可能携带cookie。必须是服务器得到这次请求，在下行响应报头中，携带cookie  信息，此后每一次浏览器往这个服务器发出的请求，都会携带这个cookie。</li></ul><h3 id="Cookie的特点"><a href="#Cookie的特点" class="headerlink" title="Cookie的特点"></a>Cookie的特点</h3><ul><li>cookie 保存在浏览器本地</li><li>正常设置的cookie 是不加密的，用户可以自由看到</li><li>用户可以删除cookie，或者禁用它</li><li>cookie 可以被篡改</li><li>cookie 可以用于攻击</li><li>cookie 存储量很小。未来实际上要被localStorage 替代，但是后者IE9 兼容。</li></ul><h3 id="Cookie的使用"><a href="#Cookie的使用" class="headerlink" title="Cookie的使用"></a>Cookie的使用</h3><p>Express 中要使用Cookie 的话，我们需要使用 <code>cookie-parser</code> 模块来实现</p><ol><li>安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cookie-parser --save</span><br></pre></td></tr></table></figure><ol><li>引入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>设置中间件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>())</span><br></pre></td></tr></table></figure><ol><li>设置 cookie</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>&#125;)</span><br></pre></td></tr></table></figure><ol><li>获取 cookie</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">cookies</span>.<span class="property">username</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//配置cookieParser中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  </span><br><span class="line">    <span class="comment">// 设置cookie  如果cookie没有过期的话，关闭浏览器后重新打开,cookie不会销毁</span></span><br><span class="line">    res.<span class="title function_">cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>&#125;);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;你好 Cookie&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/article&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取cookie</span></span><br><span class="line">    <span class="keyword">let</span> username=req.<span class="property">cookies</span>.<span class="property">username</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;新闻页面--&quot;</span>+username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/user&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取cookie</span></span><br><span class="line">    <span class="keyword">let</span> username=req.<span class="property">cookies</span>.<span class="property">username</span>;   </span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;用户--&quot;</span>+username);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>设置Cookie</p><p><img src="https://img-blog.csdnimg.cn/e2f71460ca26429e8c8e0854dee4cc36.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>获取Cookie</p><p><img src="https://img-blog.csdnimg.cn/59e5d99b701045b48c67dc2571f39f14.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="Cookie属性说明"><a href="#Cookie属性说明" class="headerlink" title="Cookie属性说明"></a>Cookie属性说明</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>domain🔥</td><td>域名 name = value:，是键值对，可以设置要保存 key/Value，注意这里的 name 不能和其他属性项的名字一样</td></tr><tr><td>Expires</td><td>过期时间（ 秒） ， 在设置的某个时间点后该Cookie 就会失效， 如 expires=Wednesday, 09-Nov-99 23:12:40 GMT</td></tr><tr><td>maxAge</td><td>最大失效时间（毫秒），设置在多少后失效</td></tr><tr><td>secure</td><td>当secure 值为true 时，cookie 在HTTP 中是无效，在HTTPS 中才有效</td></tr><tr><td>Path🔥</td><td>表示cookie 影响到的路径，如path=/。如果路径不能匹配时，浏览器则不发送这个Cookie</td></tr><tr><td>httpOnly</td><td>是微软对COOKIE 做的扩展。如果在COOKIE 中设置了“httpOnly”属性，则通过程序（JS 脚本、applet 等）将无法读取到COOKIE 信息，防止XSS 攻击产生</td></tr><tr><td>singed</td><td>表示是否签名cookie, 设为true 会对这个cookie 签名， 这样就需要用res.signedCookies 而不是res.cookies 访问它。被篡改的签名cookie 会被服务器拒绝，并且cookie 值会重置为它的原始值</td></tr></tbody></table><ul><li>多个域名共享 cookie：aaa.itying.com bbb.itying.com 下的二级域名都可以访问这个 cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个域名共享cookie  aaa.itying.com   bbb.itying.com </span></span><br><span class="line">res.<span class="title function_">cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan1111&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="attr">domain</span>:<span class="string">&quot;.itying.com&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>中文 cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;张三&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>设置只有 <code>/article</code> 路由可以访问这个cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="attr">path</span>:<span class="string">&quot;/article&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="Cookie的加密"><a href="#Cookie的加密" class="headerlink" title="Cookie的加密"></a>Cookie的加密</h3><ol><li>配置中间件的时候需要传入加密的参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>(<span class="string">&quot;itying&quot;</span>))</span><br></pre></td></tr></table></figure><ol><li>设置加密 Cookie</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="attr">signed</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><ol><li>获取加密的cookie</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">signedCookies</span></span><br></pre></td></tr></table></figure><h2 id="Express-Session"><a href="#Express-Session" class="headerlink" title="Express Session"></a>Express Session</h2><h3 id="Session简介"><a href="#Session简介" class="headerlink" title="Session简介"></a>Session简介</h3><ul><li>session 是另一种记录客户状态的机制，不同的是Cookie 保存在客户端浏览器中，而session 保存在服务器上。</li><li>Cookie 数据存放在客户的浏览器上，Session 数据放在服务器上。Session 相比Cookie 要更安全一些</li><li>由于Session 保存到服务器上，所以当访问量增多的时候，会比较占用服务器的性能。</li><li>单个cookie 保存的数据大小不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。Session 没有这方面的限制。Session 是基于Cookie 进行工作的。</li></ul><h3 id="Session的工作流程"><a href="#Session的工作流程" class="headerlink" title="Session的工作流程"></a>Session的工作流程</h3><p>当浏览器访问服务器并发送第一次请求时，服务器端会创建一个session 对象，生成一个类似于key,value</p><p>的键值对， 然后将key(cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带key(cookie)，找到对应</p><p>的session(value)。</p><h3 id="express-session"><a href="#express-session" class="headerlink" title="express-session"></a>express-session</h3><ol><li>安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session --save</span><br></pre></td></tr></table></figure><ol><li>引入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>设置官方文档提供的中间件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>,</span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">cookie</span>: &#123; <span class="attr">secure</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><ol><li>使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置值</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">username</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">username</span></span><br></pre></td></tr></table></figure><h3 id="express-session的常用参数"><a href="#express-session的常用参数" class="headerlink" title="express-session的常用参数"></a>express-session的常用参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>,</span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">cookie</span>: &#123; <span class="attr">secure</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>secret</td><td>一个String 类型的字符串，作为服务器端生成session 的签名</td></tr><tr><td>name</td><td>返回客户端的key 的名称，默认为connect.sid,也可以自己设置。</td></tr><tr><td>resave</td><td>强制保存session 即使它并没有变化, 。默认为false 。don’t save session if unmodified</td></tr><tr><td>saveUninitialized</td><td>强制将未初始化的session 存储。当新建了一个session 且未设定属性或值时，它就处于未初始化状态。在设定一个cookie 前，这对于登陆验证，减轻服务端存储压力，权限控制是有帮助的。（默认：true）。建议手动添加。</td></tr><tr><td>cookie</td><td>设置返回到前端key 的属性，默认值为{ path: ‘/’, httpOnly: true, secure: false,maxAge: null }。</td></tr><tr><td>rolling</td><td>在每次请求时强行设置cookie，这将重置cookie 过期时间（默认：false）</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置session的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;this is session&#x27;</span>, <span class="comment">//服务器端生成 session 的签名</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;itying&quot;</span>, <span class="comment">//修改session对应cookie的名称</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>, <span class="comment">//强制保存 session 即使它并没有变化</span></span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>, <span class="comment">//强制将未初始化的 session 存储</span></span><br><span class="line">    <span class="attr">cookie</span>: &#123;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">30</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span> <span class="comment">// true 表示只有https协议才能访问cookie  </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rolling</span>: <span class="literal">true</span> <span class="comment">//在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//获取seesion</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">username</span> || req.<span class="property">session</span>.<span class="property">age</span>) &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(req.<span class="property">session</span>.<span class="property">username</span> + <span class="string">&quot;--&quot;</span> + req.<span class="property">session</span>.<span class="property">age</span> + <span class="string">&quot;-已登录&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;没有登录&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置seesion</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">username</span> = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;执行登录&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bd849da977aa4928aff7196e3e93199e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="express-session的常用方法"><a href="#express-session的常用方法" class="headerlink" title="express-session的常用方法"></a>express-session的常用方法</h3><ol><li>设置session的过期时间为 0(它会把所有的session都销毁)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">session</span>.<span class="property">cookie</span>.<span class="property">maxAge</span>=<span class="number">0</span></span><br></pre></td></tr></table></figure><ol><li>销毁指定session</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">session</span>.<span class="property">username</span>=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><ol><li>销毁session</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/loginOut&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  </span><br><span class="line">    <span class="comment">//1、设置session的过期时间为0  (它会把所有的session都销毁)</span></span><br><span class="line">    <span class="comment">// req.session.cookie.maxAge=0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、销毁指定session</span></span><br><span class="line">    <span class="comment">// req.session.username=&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、销毁session  destroy</span></span><br><span class="line"></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">destroy</span>();</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;退出登录&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="art-template模板"><a href="#art-template模板" class="headerlink" title="art-template模板"></a>art-template模板</h1><p>模板引擎是第三方模块,art-template模板引擎官方网址：<a href="https://aui.github.io/art-template/zh-cn/index.html">https://aui.github.io/art-template/zh-cn/index.html</a></p><ol><li>下载</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template --save</span><br></pre></td></tr></table></figure><ol><li>引入</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const template = require(&#x27;art-template&#x27;);</span><br></pre></td></tr></table></figure><ol><li>告诉模板引擎要拼接的数据和模板在哪</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const html = template(‘模板路径’, 数据);</span><br></pre></td></tr></table></figure><ol><li>使用</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模板引擎</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> views = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;index.art&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// template方法是用来拼接字符串的</span></span><br><span class="line"><span class="comment">// 1. 模板路径 绝对路径</span></span><br><span class="line"><span class="comment">// 2. 要在模板中显示的数据 对象类型</span></span><br><span class="line"><span class="comment">// 返回拼接好的字符串</span></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(views, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><p>用模板引擎在 index.art 中接收</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123; name &#125;&#125; &#123;&#123; age &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8177a9b5951a475cb0fdbbd96db887b7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><ul><li>art-template同时支持两种模板语法：标准语法和原始语法</li><li>标准语法可以让模板更容易读写，原始语法具有强大的逻辑处理能力</li></ul><h3 id="输出-（省略，此处省略了部分知识…-）"><a href="#输出-（省略，此处省略了部分知识…-）" class="headerlink" title="输出   （省略，此处省略了部分知识…..）"></a>输出   （省略，此处省略了部分知识…..）</h3><h3 id="原文输出"><a href="#原文输出" class="headerlink" title="原文输出"></a>原文输出</h3><p>例如我们在 app.js 中放入数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模板引擎</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> views = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;index.art&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// template方法是用来拼接字符串的</span></span><br><span class="line"><span class="comment">// 1. 模板路径 绝对路径</span></span><br><span class="line"><span class="comment">// 2. 要在模板中显示的数据 对象类型</span></span><br><span class="line"><span class="comment">// 返回拼接好的字符串</span></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(views, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;&lt;h1&gt;我是标题&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><p>使用模板语法在 index.art 中接收</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标准语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 1 + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 1 + 1 == 2 ? &#x27;相等&#x27; : &#x27;不相等&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;@ content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%= name %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%= 1 + 2%&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%= 1 + 1 == 2 ? &#x27;相等&#x27; : &#x27;不相等&#x27; %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%= content%&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&lt;%- content%&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6d54cd5dfe1b4e16aed3f56677868b06.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="条件判断-1"><a href="#条件判断-1" class="headerlink" title="条件判断"></a>条件判断</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准语法 --&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!-- 标准语法 --&gt; </span><br><span class="line">&#123;&#123;if age &gt; 18&#125;&#125;</span><br><span class="line">年龄大于18</span><br><span class="line">&#123;&#123;else if age &lt; 15 &#125;&#125;</span><br><span class="line">年龄小于15</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">年龄不符合要求</span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标准语法 --&gt; </span><br><span class="line">&lt;% if (age &gt; 18) &#123; %&gt;</span><br><span class="line">年龄大于18</span><br><span class="line">&lt;% &#125; else if (age &lt; 15) &#123; %&gt;</span><br><span class="line">年龄小于15</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">年龄不符合要求</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>标准语法：<code>&#123;&#123;each 数据&#125;&#125;&#123;&#123;/each&#125;&#125;</code></li><li>原始语法：<code>&lt;% for() &#123;%><%&#125; %&gt;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准语法 --&gt;</span></span><br><span class="line">&#123;&#123;each target&#125;&#125;</span><br><span class="line"> &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line">&lt;% for(var i = 0; i &lt; target.length; i++)&#123; %&gt;</span><br><span class="line"> &lt;%= i %&gt; &lt;%= target[i] %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>例如我们在 app.js 中放入数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> views = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;index.art&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(views, &#123;</span><br><span class="line">    <span class="attr">users</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;玛丽&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">15</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><p>使用模板语法在 index.art 中接收</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;&#123;each users&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;$value.name&#125;&#125;</span><br><span class="line">&#123;&#123;$value.age&#125;&#125;</span><br><span class="line">&#123;&#123;$value.sex&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&lt;% for (var i = 0; i &lt; users.length; i++) &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">&lt;%=users[i].name %&gt;</span><br><span class="line">&lt;%=users[i].age %&gt;</span><br><span class="line">&lt;%=users[i].sex %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2d4480b0c45347f695feafff66073eb5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="子模版"><a href="#子模版" class="headerlink" title="子模版"></a>子模版</h2><p>使用子模板可以将网站公共区块(头部、底部)抽离到单独的文件中。</p><ul><li>标准语法：<code>&#123;&#123;include '模板'&#125;&#125;</code></li><li>原始语法：<code>&lt;%include&#123;&#39;模板&#39;&#125;%&gt;</code></li></ul><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p>使用模板继承可以将网站HTML骨架抽离到单独的文件中，其他页面模板可以继承骨架文件。</p><p><img src="https://img-blog.csdnimg.cn/1cbd7ac8344246d3903ecf18cb6baf4d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>如下图，我们可以在左边 HTML骨架 中预留位置(挖坑)，比如分别需要填充 css 内容，填充 js 内容，填充页面主体内容</p><p>右边是页面模板，它继承了这个 HTML骨架模板，在继承的时候将骨架模板预留的位置都填充了</p><p><img src="https://img-blog.csdnimg.cn/385a85dcf66a4f93bbf9548dbd249821.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="模板继承示例"><a href="#模板继承示例" class="headerlink" title="模板继承示例"></a>模板继承示例</h3><p>如下代码是 HTML骨架模板代码，我们可以通过<code>&#123;&#123;block '模板'&#125;&#125;&#123;&#123;/block&#125;&#125;</code> 来预留位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML骨架模板 layout.art<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">         &#123;&#123;block &#x27;head&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">         &#123;&#123;block &#x27;content&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首页模板继承 HTML骨架模板，我们可以通过 <code>&#123;&#123;extend '模板路径/模板名字'&#125;&#125;</code> 来继承骨架模板，</p><ul><li>再使用<code>&#123;&#123;block 'head'&#125;&#125;内容&#123;&#123;/block&#125;&#125;</code> 来填充骨架模板中的 head 位置</li><li>再使用<code>&#123;&#123;block 'content'&#125;&#125;内容&#123;&#123;/block&#125;&#125;</code> 来填充骨架模板中的 content 位置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--index.<span class="property">art</span> 首页模板--&gt;</span><br><span class="line">&#123;&#123;extend <span class="string">&#x27;./layout.art&#x27;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;block <span class="string">&#x27;head&#x27;</span>&#125;&#125; &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;custom.css&quot;</span>&gt; &#123;&#123;/block&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;block <span class="string">&#x27;content&#x27;</span>&#125;&#125; &lt;p&gt;<span class="title class_">This</span> is just an awesome page.&lt;<span class="regexp">/p&gt; &#123;&#123;/</span>block&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h2><p>在使用模板配置之前我们先看一个第三方时间处理模块 <code>dateformat</code></p><ol><li>使用 silly-datatime 第三方模块说明，首先下载，所有的第三方模块均在 npmjs.com 中搜索即可</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install dateformat --save</span><br></pre></td></tr></table></figure><ol><li>example</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dateFormat = <span class="built_in">require</span>(<span class="string">&quot;dateformat&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Basic usage</span></span><br><span class="line"><span class="title function_">dateFormat</span>(time, <span class="string">&quot;dddd, mmmm dS, yyyy, h:MM:ss TT&quot;</span>);</span><br><span class="line"><span class="comment">// Saturday, June 9th, 2007, 5:46:21 PM</span></span><br></pre></td></tr></table></figure><hr><h3 id="配置第三方模块方法"><a href="#配置第三方模块方法" class="headerlink" title="配置第三方模块方法"></a>配置第三方模块方法</h3><p>接下来我们看个示例，代码如下：</p><p>我们在 app.js 中存放 time 时间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> views = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;index.art&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(views, &#123;</span><br><span class="line">    <span class="comment">// 原始时间格式</span></span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><p>我们在 index.art 中接收 time</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;time&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/83de92c330b149509193cc0485c02302.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>我们现在相对我们的时间格式进行处理，默认情况下是不能在模板当中直接调用 dateFormat 方法的，我们需要将这个方法作为模板的变量导入到模板当中</p><ol><li>向模板中导入变量 <code>template.defaults.imports.变量名 = 变量值</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dateFormat = <span class="built_in">require</span>(<span class="string">&quot;dateformat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> views = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;index.art&#x27;</span>);</span><br><span class="line"><span class="comment">// 导入模板变量</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">dateFormat</span> = dateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(views, &#123;</span><br><span class="line">    <span class="comment">// 原始时间格式</span></span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><ol><li>在 index.art 中调用 dateFormat 方法</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     &#123;&#123;dateFormat(time, &#x27;yyyy-mm-dd&#x27;)&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b6ee08b2f2ef47c6965b2b590b854095.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="配置模板根目录"><a href="#配置模板根目录" class="headerlink" title="配置模板根目录"></a>配置模板根目录</h3><ol><li><p>设置模板根目录 <code>template.defaults.root = 模板目录</code></p><p>我们设置模板根目录为 views 文件夹，之后只需要在 template 中传入我们模板的文件名全称，也是可以访问到静态资源 index.art 的</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dateFormat = <span class="built_in">require</span>(<span class="string">&quot;dateformat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模板的根目录</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">root</span> = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入模板变量</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">dateFormat</span> = dateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(<span class="string">&#x27;index.art&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 原始时间格式</span></span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/19324c755cc6442aa4e862f80df1786b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="配置模板默认后缀"><a href="#配置模板默认后缀" class="headerlink" title="配置模板默认后缀"></a>配置模板默认后缀</h3><p>我们看 art 后缀是不是很不爽？一招直接使其成为 html 后缀</p><ol><li><p>设置模板默认后缀 <code>template.defaults.extname = &#39;.html&#39;</code></p><p>这样我们只需在 template 中传入模板的名字即可，会自动去找 index.html 模板</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dateFormat = <span class="built_in">require</span>(<span class="string">&quot;dateformat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模板的根目录</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">root</span> = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置模板的默认后缀</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">extname</span> = <span class="string">&#x27;.html&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入模板变量</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">dateFormat</span> = dateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 原始时间格式</span></span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a272927732f344c39851b983df1484e0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> 模块化开发 </tag>
            
            <tag> Express框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs基础之常用模块(三)</title>
      <link href="/myblog.github.io/2022/04/24/Nodejs%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97(%E4%B8%89)/"/>
      <url>/myblog.github.io/2022/04/24/Nodejs%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="✍-目录脑图"><a href="#✍-目录脑图" class="headerlink" title="✍ 目录脑图"></a>✍ 目录脑图</h1><p><img src="https://img-blog.csdnimg.cn/650095adb0fa44e182eb1203ac679f4e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ul><li>参考视频：</li><li><a href="https://www.bilibili.com/video/BV1UE411H71P?from=search&seid=4380085066966008976">Node.js 黑马程序员</a></li><li><a href="https://www.bilibili.com/video/BV11t411k79h?from=search&seid=4268305071411376003">Node.js大地老师讲解</a></li></ul><h1 id="✍Node是什么"><a href="#✍Node是什么" class="headerlink" title="✍Node是什么"></a>✍Node是什么</h1><ul><li>Node 是一个基于 Chrome V8 引擎的 JavaScript 代码运行环境。</li><li>浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境</li><li>Node（软件）能够运行JavaScript代码，Node就是JavaScript代码的运行环境</li><li>Node文档中文网：<a href="http://nodejs.cn/api/url.html#url_new_url_input_base">http://nodejs.cn/api/url.html#url_new_url_input_base</a></li></ul><h1 id="第一个Node程序"><a href="#第一个Node程序" class="headerlink" title="第一个Node程序"></a>第一个Node程序</h1><ol><li>新建 app.js</li><li>输入代码块 <code>node-http-server</code>,自动生成 Node 结构（安装插件：Node-snippets就可以快捷生成）</li></ol><p><img src="https://img-blog.csdnimg.cn/684a92b73e7d4272b25c90a81f5c1426.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li>在终端使用 <code>node app.js</code> 运行程序</li></ol><p><img src="https://img-blog.csdnimg.cn/2becf15aab2d49e99b732ac741b7e885.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li>假如要停止我们的服务器，在终端处按 <code>ctrl + c</code> 停止服务器</li></ol><h2 id="解析第一个Node程序"><a href="#解析第一个Node程序" class="headerlink" title="解析第一个Node程序"></a>解析第一个Node程序</h2><ol><li>引入 http 模块</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li><p>创建服务器</p><p>接下来我们使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 3000 端口。函数通过 request、response 参数来接收和响应数据</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    request    获取客户端(浏览器)传过来的信息</span></span><br><span class="line"><span class="comment">    response   给浏览器响应信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//发送响应头</span></span><br><span class="line">  <span class="comment">//设置HTTP头部,状态码是200,文件类型是 html,字符集是 utf8 </span></span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>&#125;);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//表示给我们页面上面输出一句话并且结束响应</span></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);  <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><h1 id="内置模块HTTP"><a href="#内置模块HTTP" class="headerlink" title="内置模块HTTP"></a>内置模块HTTP</h1><p>Node.js中，将很多的功能，划分为一个个 module(模块)。 Node.js 中的很多功能都是通过模块实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    request    获取客户端(浏览器)传过来的信息</span></span><br><span class="line"><span class="comment">    response   给浏览器响应信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//发送响应头</span></span><br><span class="line">  <span class="comment">//设置HTTP头部,状态码是200,文件类型是 html,字符集是 utf8 </span></span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>&#125;);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//表示给我们页面上面输出一句话并且结束响应</span></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);  <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/628bfc483126460983783db3097585e2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>那我们如果想在屏幕上输出汉字呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应头</span></span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示给我们页面上面输出一句话并且结束响应</span></span><br><span class="line">    response.<span class="title function_">write</span>(<span class="string">&#x27;你好 Nodejs&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h2&gt;你好 Nodejs&lt;/h2&gt;&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>); <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b215b40f3f514ba9ac4c6a46da657a26.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>如何解决 Preview 里面的乱码状态呢？只需要在<code>http.createServer</code>中添加下方代码即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">write</span>(<span class="string">&quot;&lt;head&gt; &lt;meta charset=&#x27;UTF-8&#x27;&gt;&lt;/head&gt;&quot;</span>); <span class="comment">//解决乱码   </span></span><br></pre></td></tr></table></figure><h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><p>创建服务器对象，我们是通过 createServer 来完成的</p><ul><li>req：request请求对象，包含请求相关的信息</li><li>res：response响应对象，包含我们要发送给客户端的信息</li></ul><h2 id="监听主机和端口号"><a href="#监听主机和端口号" class="headerlink" title="监听主机和端口号"></a>监听主机和端口号</h2><p>通过listen方法来开启服务器，并且在某一个主机和端口上监听网络请求</p><p>listen函数有三个参数：</p><ul><li>端口port: 可以不传, 系统会默认分配端</li><li>主机host: 通常可以传入localhost、ip地址127.0.0.1,或者ip地址0.0.0.0，默认是0.0.0.0</li><li>回调函数：服务器启动成功时的回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动服务器,并且制定端口号和主机</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h2><p>在向服务器发送请求时，我们会携带很多信息，比如：</p><ul><li>本次请求的URL，服务器需要根据不同的URL进行不同的处理</li><li>本次请求的请求方式，比如GET、POST请求传入的参数和处理的方式是不同的</li><li>本次请求的 headers 中也会携带一些信息，比如客户端信息、接受数据的格式、支持的编码格式等</li></ul><p>这些信息，Node会帮助我们封装到一个request的对象中，我们可以直接来处理这个request对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个web服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// request对象中封装了客户端给我们服务器传递过来的所有信息</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;Hello Server&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器,并且制定端口号和主机</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动成功~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="URL的处理"><a href="#URL的处理" class="headerlink" title="URL的处理"></a>URL的处理</h2><p>客户端在发送请求时，会请求不同的数据，那么会传入不同的请求地址：</p><ul><li>比如<a href="http://localhost:8000/login">http://localhost:8000/login</a></li><li>比如<a href="http://localhost:8000/products">http://localhost:8000/products</a></li></ul><p>服务器端需要根据不同的请求地址，作出不同的响应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个web服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最基本的使用方式</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;欢迎回来~&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&#x27;/users&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;用户列表~&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;错误请求, 检查~&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>那么如果用户发送的地址中还携带一些额外的参数呢？</p><p>比如：<a href="http://localhost:8000/login?name=why&amp;password=123">http://localhost:8000/login?name=why&amp;password=123</a></p><p>这个时候，url的值是 /login?name=why&amp;password=123</p><p>我们如何对它进行解析呢？使用内置模块url</p><h1 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h1><h2 id="旧版url-API"><a href="#旧版url-API" class="headerlink" title="旧版url API"></a>旧版url API</h2><p>我们来看一下 req 里面能够使用的东西。</p><ul><li>最重要的是 <code>req.url</code> 属性，表示用户的请求URL 地址。所有路由设计，都是通过 <code>req.url</code> 来实现的。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应头</span></span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;UTF-8&quot;&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示给我们页面上面输出一句话并且结束响应</span></span><br><span class="line">    response.<span class="title function_">write</span>(<span class="string">&#x27;你好 Nodejs&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h2&gt;你好 Nodejs&lt;/h2&gt;&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>); <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/48a3627399bb4de38a66913b5398f6c4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>这里注意一下输出是在 Nodejs 控制台输出，而不是在浏览器上输出。因为输出是在服务端，浏览器是客户端</p><ul><li>我们比较关心的不是拿到 URL，而是识别这个 URL。</li><li>识别 URL，下面的 url 模块</li></ul><p>旧版本 Node 的 url 用法如下：</p><table><thead><tr><th>url模块的使用</th><th>说明</th></tr></thead><tbody><tr><td>url.parse()</td><td>解析 url(第二个参数为true,可以将 query 里面的数据转换为对象)</td></tr><tr><td>url.format(urlObject)</td><td>是上面 url.parse() 操作的逆向操作</td></tr><tr><td>url.resolve(from,to)</td><td>添加或者替换地址</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/8e85809e295b4784af684fbd95244a5b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> api = <span class="string">&#x27;http://www.itying.com?name=zhangsan&amp;age=20&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(url.parse(api, true));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getValue = url.<span class="title function_">parse</span>(api, <span class="literal">true</span>).<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6中模板字符串写法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`姓名：<span class="subst">$&#123;getValue.name&#125;</span>--年龄:<span class="subst">$&#123;getValue.age&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b6598f22b5ee4da2b14242c0f832c93d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="新版url-API"><a href="#新版url-API" class="headerlink" title="新版url API"></a>新版url API</h2><p>新版本 Node 的 url 用法如下：</p><ul><li>```<br>new URL(input,[,base])<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   ：   </span><br><span class="line"></span><br><span class="line">  - `input` 类型：String，要解析的绝对或相对的输入网址。如果 input 是相对的，则需要 base。如果 input 是绝对的，则忽略 base。</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">const myURL = new URL(&#x27;/foo&#x27;, &#x27;https://example.org/&#x27;);</span><br><span class="line">// https://example.org/foo</span><br><span class="line">12</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">const myURL = new URL(</span><br><span class="line">    &quot;http://localhost:3000/p/a/t/h?name=zhangsan&amp;age=20#hash&quot;);</span><br><span class="line"></span><br><span class="line">console.log(myURL);</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/a6b91ab91325402bbe93444b9b8bb3d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="searchParams"><a href="#searchParams" class="headerlink" title="searchParams"></a>searchParams</h2><p>searchParams 可以获取到 url 参数的 value</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;https://example.org/?abc=123&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myURL.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="comment">// 打印 123</span></span><br><span class="line"></span><br><span class="line">myURL.<span class="property">searchParams</span>.<span class="title function_">append</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myURL.<span class="property">href</span>);</span><br><span class="line"><span class="comment">// 打印 https://example.org/?abc=123&amp;abc=xyz</span></span><br><span class="line"></span><br><span class="line">myURL.<span class="property">searchParams</span>.<span class="title function_">delete</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">myURL.<span class="property">searchParams</span>.<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myURL.<span class="property">href</span>);</span><br><span class="line"><span class="comment">// 打印 https://example.org/?a=b</span></span><br></pre></td></tr></table></figure><h1 id="Nodejs工具"><a href="#Nodejs工具" class="headerlink" title="Nodejs工具"></a>Nodejs工具</h1><h2 id="supervisor-工具"><a href="#supervisor-工具" class="headerlink" title="supervisor 工具"></a>supervisor 工具</h2><p>supervisor 会不停的watch 你应用下面的所有文件，发现有文件被修改，就重新载入程序文件这样就实现了部署，修改了程序文件后马上就能看到变更后的结果。麻麻再也不用担心我的重启nodejs 了</p><ol><li>首先安装 supervisor(在cmd控制台输入下方代码)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g supervisor</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1923c06a2f1a4a52892a05c40faf193e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li>使用 supervisor 代替 node 命令启动应用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisor app.js</span><br></pre></td></tr></table></figure><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><ul><li>nodemon 和 supervisor 的功能一样，两者安装一个即可</li><li>使用<code>npm install -g nodemon</code> 下载它（-g 是全局安装）</li><li>在命令行工具中用<code>nodemon</code>命令替代<code>node</code>命令执行文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><h1 id="内置模块fs"><a href="#内置模块fs" class="headerlink" title="内置模块fs"></a>内置模块fs</h1><p>fs：file system ，文件操作系统，是系统模块，直接引入即可使用.</p><p>文件系统的API非常的多，我们不可能，也没必要一个个去学习，更多的是使用是时候去查对应的API</p><h2 id="fs-stat🔥"><a href="#fs-stat🔥" class="headerlink" title="fs.stat🔥"></a>fs.stat🔥</h2><p>fs.stat ：检测是文件还是目录：</p><ul><li>第一个参数是 path ：路径</li><li>第二个参数是 callback：回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. fs.stat   检测是文件还是目录</span></span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;./html&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`是文件:<span class="subst">$&#123;data.isFile()&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`是目录:<span class="subst">$&#123;data.isDirectory()&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fs-mkdir🔥"><a href="#fs-mkdir🔥" class="headerlink" title="fs.mkdir🔥"></a>fs.mkdir🔥</h2><p>fs.mkdir()： 创建目录</p><ul><li>第一个参数 path：将要创建的目录路径</li><li>第二个参数 mode：目录权限(读写权限)，默认为777</li><li>第三个参数 callback：回调函数，传递异常参数 err</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./css&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fs-writeFile🔥"><a href="#fs-writeFile🔥" class="headerlink" title="fs.writeFile🔥"></a>fs.writeFile🔥</h2><p>fs.writeFile ：创建写入文件</p><ul><li>第一个参数 filename：文件名称</li><li>第二个参数 data：将要写入的内容，可以使用字符串或 buffer 数据</li><li>第三个参数 options：option 数组对象，包含   <ul><li>encoding ：可选值，默认为 ‘utf8’，当 data 使用 buffer 时，该值应该为 ignored</li><li>mode：文件读写权限，默认为 438</li><li>flag ：默认为 ‘w’</li></ul></li><li>第四个参数 callback：回调函数，传递一个异常参数 err</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./html/index.html&#x27;</span>,<span class="string">&#x27;你好nodejs&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建写入文件成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./html/index.html&#x27;</span>,<span class="string">&#x27;你好nodejs 哈哈&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建写入文件成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：如果没有这个文件，则会新建一个文件，如果已经有这个文件，那么会覆盖这个文件里面的内容</p><h2 id="fs-appendFile"><a href="#fs-appendFile" class="headerlink" title="fs.appendFile"></a>fs.appendFile</h2><p>fs.appendFile 追加文件</p><ul><li>第一个参数 path：将要追加的文件路径</li><li>第二个参数 data：要追加的文件内容</li><li>第三个参数callback：回调函数，传递一个异常参数 err</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;./css/base.css&#x27;</span>,<span class="string">&#x27;body&#123;color:red&#125;&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;appendFile 成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;./css/base.css&#x27;</span>,<span class="string">&#x27;h3&#123;color:red&#125;\n&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;appendFile 成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：如果这个文件不存在，则会新建文件，如果文件已经存在，则会在文件内容后面追加内容</p><h2 id="fs-readFile"><a href="#fs-readFile" class="headerlink" title="fs.readFile"></a>fs.readFile</h2><p>fs.readFile 读取文件：</p><ul><li>第一个参数路径 path：想要读取的文件的路径</li><li>第二个参数callback：回调函数，传递一个异常参数 err 和读取的文件数据 data，data类型是 Buffer</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./html/index.html&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());  <span class="comment">//把Buffer 转化成string类型</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./aaa/index.html&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());  <span class="comment">//把Buffer 转化成string类型</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fs-readdir"><a href="#fs-readdir" class="headerlink" title="fs.readdir"></a>fs.readdir</h2><p>fs.readdir 读取目录：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./html&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fs-rename"><a href="#fs-rename" class="headerlink" title="fs.rename"></a>fs.rename</h2><p>fs.rename ：重命名，功能：1、表示重命名 2、移动文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;./css/aaa.css&#x27;</span>,<span class="string">&#x27;./css/index.css&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;重命名成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;./css/index.css&#x27;</span>,<span class="string">&#x27;./html/index.css&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动文件成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fs-rmdir"><a href="#fs-rmdir" class="headerlink" title="fs.rmdir"></a>fs.rmdir</h2><p>fs.rmdir 删除目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./aaaa&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除目录成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：要删除目录之前需要先删除目录下的所有文件</p><h2 id="fs-unlink"><a href="#fs-unlink" class="headerlink" title="fs.unlink"></a>fs.unlink</h2><p>fs.unlink 删除文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;./aaaa/index.html&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除文件成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fs-createReadStream"><a href="#fs-createReadStream" class="headerlink" title="fs.createReadStream"></a>fs.createReadStream</h2><p>fs.createReadStream： 从文件流中读取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 以流的方式读取 data 目录下的 aaa.txt</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ReadStream</span> = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;./data/aaa.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 on 方法监听 data,表示我们读取到了这个数据</span></span><br><span class="line"><span class="title class_">ReadStream</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    str += data;</span><br><span class="line">    count++;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 on 方法监听 end,表示我们读取完了这个数据</span></span><br><span class="line"><span class="title class_">ReadStream</span>.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 on 方法监听 error,表示读取过程中的错误信息</span></span><br><span class="line"><span class="title class_">ReadStream</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fs-createWriteStream"><a href="#fs-createWriteStream" class="headerlink" title="fs.createWriteStream"></a>fs.createWriteStream</h2><p>fs.createWriteStream：写入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">500</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">    str +=<span class="string">&#x27;我是从数据库获取的数据,我要保存起来&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以流的方式写到 data目录下的 output.txt</span></span><br><span class="line"><span class="keyword">var</span> writeStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;/data/output.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writeStream.<span class="title function_">write</span>(str); </span><br><span class="line"></span><br><span class="line"><span class="comment">//标记写入完成</span></span><br><span class="line">writeStream.<span class="title function_">end</span>();</span><br><span class="line">writeStream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入完成&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="管道流🔥"><a href="#管道流🔥" class="headerlink" title="管道流🔥"></a>管道流🔥</h2><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p><p><img src="https://img-blog.csdnimg.cn/8d67c441d7ce441aa8d096f73bb60126.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="keyword">var</span> readerStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建一个可写流</span></span><br><span class="line"><span class="keyword">var</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;output.txt&#x27;</span>)</span><br><span class="line"><span class="comment">// 管道读写操作</span></span><br><span class="line"><span class="comment">// 读取 input.txt 文件内容,并将内容写入到 output.txt 文件中</span></span><br><span class="line">readStream.<span class="title function_">pipi</span>(writeStream);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;程序执行完毕。&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h1><h2 id="同步API、异步API"><a href="#同步API、异步API" class="headerlink" title="同步API、异步API"></a>同步API、异步API</h2><ul><li><strong>同步API可以从返回值中拿到API执行的结果, 但是异步API是不可以的</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (n1, n2) &#123; </span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> result = sum (<span class="number">10</span>, <span class="number">20</span>);<span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMsg</span> () &#123; </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">&#x27;Hello Node.js&#x27;</span> &#125;</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">  <span class="comment">// return undefined;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> msg = getMsg (); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li><strong>同步API从上到下依次执行，前面代码会阻塞后面代码的执行</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for循环后面的代码&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>异步API不会等待API执行完成后再向下执行代码</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;代码开始执行&#x27;</span>); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2秒后执行的代码&#x27;</span>)&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&quot;0秒&quot;后执行的代码&#x27;</span>)&#125;, <span class="number">0</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;代码结束执行&#x27;</span>);</span><br><span class="line"><span class="comment">//代码开始执行</span></span><br><span class="line"><span class="comment">//代码结束执行</span></span><br><span class="line"><span class="comment">//&quot;0秒&quot;后执行的代码</span></span><br><span class="line"><span class="comment">//2秒后执行的代码</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6d86977de88c4ee49cfefba1458a11ee.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><blockquote><p>同步API 放在同步代码执行区，异步API放在异步代码执行区，同时将异步API  所对应的回调函数放在回调函数队列，这个时候注意，同步代码执行区和回调函数队列两者里面的代码没有执行，当同步代码区里面的内容执行完毕，这个时候去异步代码区，发现第二个 setTimeout 执行完毕，则将其对应的回调函数放入同步代码区执行，再去异步代码区发现第一个 setTimeout  执行完毕，再将其对应的回调函数放入同步代码区执行。</p></blockquote><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>自己定义函数让别人去调用。</p><p>回调函数视频讲解：<a href="https://www.bilibili.com/video/BV1UE411H71P?p=36">https://www.bilibili.com/video/BV1UE411H71P?p=36</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getData函数定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span> (callback) &#123;&#125;</span><br><span class="line"><span class="comment">// getData函数调用</span></span><br><span class="line">getData ( <span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>getData 函数有一个形参 callback，传递的实参是一个函数，将一个函数作为另外一个函数的形参，则此形参就叫做回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="string">&#x27;123&#x27;</span>);<span class="comment">// 使用callback可以调用下面的匿名函数function,并给callback传递参数</span></span><br><span class="line">    <span class="comment">//callback函数被调用了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">getData</span>(<span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;callback函数被调用了&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">    <span class="comment">// 123</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>我们可以调用 callback 回调函数将异步API执行的结果传递出来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMsg</span> (callback) &#123;</span><br><span class="line">    <span class="comment">// 调用callback将异步API执行的结果传递出来</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        callback (&#123; <span class="attr">msg</span>: <span class="string">&#x27;Hello Node.js&#x27;</span> &#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line">getMsg (<span class="keyword">function</span> (<span class="params">msg</span>) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">    <span class="comment">// &#123; msg: &#x27;Hello Node.js&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Nodejs里面的异步API"><a href="#Nodejs里面的异步API" class="headerlink" title="Nodejs里面的异步API"></a>Nodejs里面的异步API</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./demo.txt&#x27;</span>,<span class="function">(<span class="params">err,result</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>读取文件是需要时间的，文件读取的结果不能通过返回值的方式获取，需要通过回调函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>事件监测也是异步API</li></ul><blockquote><p>如果异步API后面代码的执行依赖当前异步API的执行结果，但实际上后续代码在执行的时候异步API还没有返回结果，这个问题要怎么解决呢？</p></blockquote><p>例如，我们需要依次读取A文件、B文件、C文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./2.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result2</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./3.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,(err,result3)=&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result3);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>回调嵌套的情况就叫做 回调地狱</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise 出现的目的是解决 Node.js 异步编程中回调地狱的问题。</p><p>实际上，Promise 本身是一个构造函数，我们要解决回调地狱的问题，需要先使用 new 运算符创建 Promise 实例，在创建 Promise 实例的过程中，需要传入一个匿名函数，在匿名函数中有两个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;失败了&#x27;</span>) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// &#123;name: &#x27;张三&#x27;&#125;)</span></span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="comment">// 失败了)</span></span><br></pre></td></tr></table></figure><p>例如，我们需要依次读取A文件、B文件、C文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./2.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    lreturn <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./3.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">p1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">r1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">p2</span>();         <span class="comment">//返回一个promise对象</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">r2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r2);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">p3</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">r3</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r3);</span><br><span class="line">    <span class="keyword">return</span> p3;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES7异步函数"><a href="#ES7异步函数" class="headerlink" title="ES7异步函数"></a>ES7异步函数</h2><p>异步函数是异步编程语法的终极解决方案，它可以让我们将异步代码写成同步的形式，让代码不再有回调函数嵌套，使代码变得清晰明了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="async关键字"><a href="#async关键字" class="headerlink" title="async关键字"></a>async关键字</h3><ul><li>普通函数定义前加<strong>async</strong>关键字 普通函数变成异步函数</li><li>异步函数默认返回promise对象</li><li>在异步函数内部使用return关键字进行结果返回 结果会被包裹在promise对象中 return关键字代替了resolve方法</li><li>在异步函数内部使用<strong>throw</strong>关键字抛出程序异常</li><li>调用异步函数再链式调用<strong>then方法获取异步函数执行结果</strong></li><li>调用异步函数再链式调用<strong>catch方法获取异步函数执行的错误信息</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 普通函数定义前加async关键字，普通函数变成异步函数</span></span><br><span class="line"><span class="comment">// 2. 异步函数默认的返回值是promise 对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;发生了一些错误&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn ().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">//123</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);    <span class="comment">//发生了一些错误</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h3><ul><li><strong>await关键字只能出现在异步函数中</strong></li><li><strong>await promise</strong> await后面只能写promise对象 写其他类型的API是不可以的</li><li><strong>await关键字是暂停异步函数向下执行 直到promise返回结果</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;p1&#x27;</span>;<span class="comment">// 返回的是 promise 对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;p2&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">p3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;p3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">p1</span>();</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">p2</span>();</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">p3</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">run</span>();</span><br></pre></td></tr></table></figure><p>简单理解：</p><ul><li>async 是让方法变成异步</li><li>await 是等待异步方法执行完成</li></ul><h2 id="Node-js全局对象global"><a href="#Node-js全局对象global" class="headerlink" title="Node.js全局对象global"></a>Node.js全局对象global</h2><p>在浏览器中全局对象是 window，在 Node 中全局对象是 global。</p><p>Node 中全局对象有以下方法，可以在任何地方使用，global 可以省略</p><ul><li>console.log() 在控制台输出、</li><li>setTimeout() 设置超时定时器</li><li>clearTimeout() 清除超时定时器</li><li>setInterval() 设置间歇定时器</li><li>clearInterval() 清除间歇定时器</li></ul><blockquote><p>注意：Node中不存在 BOM、DOM，所以全局对象是 global。但是在 DOM、BOM 中也有这些方法，只是全局对象是 window。</p></blockquote><h2 id="获取异步方法里面的数据"><a href="#获取异步方法里面的数据" class="headerlink" title="获取异步方法里面的数据"></a>获取异步方法里面的数据</h2><h3 id="回调函数获取"><a href="#回调函数获取" class="headerlink" title="回调函数获取"></a>回调函数获取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调函数 获取异步方法里面的数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">callbck</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> name=<span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">        <span class="title function_">callbck</span>(name);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部获取异步方法里面的数据</span></span><br><span class="line"><span class="title function_">getData</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(data+<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise获取"><a href="#Promise获取" class="headerlink" title="Promise获取"></a>Promise获取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise来处理异步  resolve 成功的回调函数   reject失败的回调函数</span></span><br><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">var</span> name=<span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">     <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()&lt;<span class="number">0.7</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(name);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Async、Await使用"><a href="#Async、Await使用" class="headerlink" title="Async、Await使用"></a>Async、Await使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您好nodejs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>());<span class="comment">// 您好nodejs</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//异步方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您好nodejs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>());  <span class="comment">//  Promise &#123; &#x27;您好nodejs&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>async 是让方法变成异步，它返回的是 Promise，那我们要获取 Promise 对象里面的字符串要如何做呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误用法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;   <span class="comment">//  Promise &#123; &#x27;您好nodejs&#x27; &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您好nodejs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">test</span>());  <span class="comment">//错误  : await必须得用在async的方法里面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您好nodejs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确获取异步方法里面的数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data=<span class="keyword">await</span> <span class="title function_">test</span>();  <span class="comment">//获取异步方法里面的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>我们当然最好是要返回的是 Promise 对象，否则也没必要将方法变为异步了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async 封装一个异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;  </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> name=<span class="string">&#x27;张三 222&#x27;</span>;   </span><br><span class="line">            <span class="title function_">resolve</span>(name);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> data=<span class="keyword">await</span> <span class="title function_">test</span>();  <span class="comment">//获取异步方法里面的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h1 id="内置模块Path"><a href="#内置模块Path" class="headerlink" title="内置模块Path"></a>内置模块Path</h1><h2 id="path常见的API"><a href="#path常见的API" class="headerlink" title="path常见的API"></a>path常见的API</h2><ul><li>从路径中获取信息   <ul><li>dirname：获取文件的父文件夹</li><li>basename：获取文件名</li><li>extname：获取文件扩展名</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.获取路径的信息</span></span><br><span class="line"><span class="keyword">const</span> filepath = <span class="string">&#x27;/User/why/abc.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(filepath)); <span class="comment">// /User/why</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(filepath)); <span class="comment">// abc.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(filepath)); <span class="comment">// .txt</span></span><br></pre></td></tr></table></figure><ul><li>路径的拼接   <ul><li>如果我们希望将多个路径进行拼接，但是不同的操作系统可能使用的是不同的分隔符</li><li>这个时候我们可以使用 <code>path.join</code> 函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.join路径拼接</span></span><br><span class="line"><span class="keyword">const</span> basepath = <span class="string">&#x27;../User/why&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">&#x27;./abc.txt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> othername = <span class="string">&#x27;./why.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filepath1 = path.<span class="title function_">join</span>(basepath, filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filepath1);     <span class="comment">// ..\User\why\abc.txt</span></span><br></pre></td></tr></table></figure><ul><li>将文件和某个文件夹拼接   <ul><li>如果我们希望将某个文件和文件夹拼接，可以使用<code>path.resolve</code></li><li>resolve 函数会判断我们拼接的路径前面是否有 / 或 …/ 或 ./</li><li>如果有表示是一个绝对路径，会返回对应的拼接路径</li><li>如果没有，那么会和当前执行文件所在的文件夹进行路径的拼接</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> basepath = <span class="string">&#x27;../User/why&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">&#x27;./abc.txt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> othername = <span class="string">&#x27;./why.js&#x27;</span>;</span><br><span class="line"><span class="comment">// 3.resolve路径拼接</span></span><br><span class="line"><span class="comment">// resolve会判断拼接的路径字符串中,是否有以/或./或../开头的路径</span></span><br><span class="line"><span class="keyword">const</span> filepath2 = path.<span class="title function_">resolve</span>(basepath, filename, othername);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filepath2);</span><br><span class="line"><span class="comment">// E:\Code\Node\NodeCodeWhy\User\why\abc.txt\why.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> basepath2 = <span class="string">&#x27;/User/coderwhy&#x27;</span>;</span><br><span class="line"><span class="comment">// const filename2 = &#x27;/why/abc.txt&#x27;;              // E:\why\abc.txt</span></span><br><span class="line"><span class="comment">// const filename2 = &#x27;./why/abc.txt&#x27;;             // E:\User\coderwhy\why\abc.txt</span></span><br><span class="line"><span class="comment">// const filename2 = &#x27;why/abc.txt&#x27;;               // E:\User\coderwhy\why\abc.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const filename2 = &#x27;../why/abc.txt&#x27;;            // E:\User\why\abc.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = path.<span class="title function_">resolve</span>(basepath2, filename2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a>path.extname</h3><ul><li><code>path.extname()</code> 获取文件(可以是一个路径文件)的扩展名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(<span class="string">&#x27;hello.md&#x27;</span>)); <span class="comment">// md</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径信息的扩展名</span></span><br><span class="line"><span class="keyword">let</span> strPath = <span class="string">&quot;http://www.xinhuanet.html&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(strPath)); <span class="comment">// html</span></span><br></pre></td></tr></table></figure><h3 id="path-resolve"><a href="#path-resolve" class="headerlink" title="path.resolve"></a>path.resolve</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;/sxt&#x27;</span>, <span class="string">&#x27;qianduan&#x27;</span>, <span class="string">&#x27;zhongji&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> info1 = path.<span class="title function_">resolve</span>(...arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info1);</span><br><span class="line"><span class="comment">// D:\sxt\qianduan\zhongji</span></span><br></pre></td></tr></table></figure><p>给定的路径的序列是”从右往左”被处理的，后面每个 <code>path</code> 被依次解析，直到构造完成一个绝对路径。</p><h3 id="path-join🔥"><a href="#path-join🔥" class="headerlink" title="path.join🔥"></a>path.join🔥</h3><ul><li><code>path.join([...paths])</code> 方法使用平台特定的分隔符把全部给定的 <code>path</code> 片段连接到一起，并规范化生成的路径。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./02art-template.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;/foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;./baz&#x27;</span>);</span><br><span class="line"><span class="comment">// &#x27;foo/bar/baz&#x27;</span></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;/foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;/baz&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="comment">// &#x27;foo/bar&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>__dirname</code> 获得当前执行文件所在目录的完整目录名</li><li><code>__filename</code> 获得当前执行文件的带有完整绝对路径的文件名</li></ul><h1 id="服务器端与客户端"><a href="#服务器端与客户端" class="headerlink" title="服务器端与客户端"></a>服务器端与客户端</h1><p>网站应用程序主要分为两大部分：客户端和服务器端</p><ul><li>客户端：在浏览器中运行的部分，就是用户看到并与之交互的界面程序。使用HTML、CSS、JS构建</li><li>服务器端：在服务器中运行的部分，负责存储数据和处理应用逻辑。（可以将服务器端理解为另一台电脑）</li></ul><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>路由指的就是针对不同请求的URL，处理不同的业务逻辑。</p><p><img src="https://img-blog.csdnimg.cn/169ce43919d8404497f5eb6abb752f11.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">// 解构写法,相当于 request.url</span></span><br><span class="line">    <span class="keyword">const</span> &#123; url &#125; = request;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="string">&#x27;/&#x27;</span> || url == <span class="string">&#x27;index&#x27;</span>) &#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;欢迎来到首页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;欢迎来到列表页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;抱歉，您访问的页面出游了~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/888ff5d045124541853cd969336cba51.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h2><p>在客户端和服务器之间进行请求 - 响应时，两种最常被用到的方法是：GET 和 POST</p><ul><li>GET - 从指定的资源请求数据。(一般用于获取数据)   <ul><li><code>request.url</code> 获取请求地址</li><li><code>request.method</code> 获取请求方法</li></ul></li><li>POST - 向指定的资源提交要被处理的数据。(一般用于提交数据)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应头</span></span><br><span class="line">    <span class="comment">//设置HTTP头部,状态码是200,文件类型是 html,字符集是 utf8 </span></span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span> &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">url</span>); <span class="comment">// 获取请求地址/index.html</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">method</span>); <span class="comment">// 获取请求方法GET/POST</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表示给我们页面上面输出一句话并且结束响应</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>); <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><h3 id="GET请求参数"><a href="#GET请求参数" class="headerlink" title="GET请求参数"></a>GET请求参数</h3><ul><li><p>参数被放置在浏览器地址栏中，例如：<a href="http://localhost:3000/?name=zhangsan&amp;age=20">http://localhost:3000/?name=zhangsan&amp;age=20</a></p></li><li><p>参数获取需要借助系统模块url，url模块用来处理url地址</p><ul><li><p><code>request.url</code> 获取 /name=zhangsan&amp;age=20</p></li><li><p><code>request.headers.host</code> 获取 127.0.0.1:3000</p></li><li><p>```js<br>const myURL = new URL(url, <code>http://&#123;host&#125;</code>);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 如上获取到 url 对象，再从对象中获取参数</span><br><span class="line"></span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/5ee5f3f531c947b7b1ef6205b973d017.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">http.createServer(function(request, response) &#123;</span><br><span class="line">    response.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html;charset=UTF-8&#x27; &#125;);</span><br><span class="line">    // 解构写法,相当于 request.url</span><br><span class="line">    const &#123; url &#125; = request;</span><br><span class="line">    // 解构写法,相当于 request.headers.host</span><br><span class="line">    const &#123; host &#125; = request.headers;</span><br><span class="line"></span><br><span class="line">    if (url !== &#x27;/favicion.ico&#x27;) &#123;</span><br><span class="line">        const myURL = new URL(url, `http://&#123;host&#125;`);</span><br><span class="line">        response.write(`name: $&#123;myURL.searchParams.get(&quot;name&quot;)&#125;,age: $&#123;myURL.searchParams.get(&quot;age&quot;)&#125;`);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    response.end(&#x27;Hello World&#x27;);</span><br><span class="line">&#125;).listen(3000);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;Server running at http://127.0.0.1:3000/&#x27;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/de272693dd41467886184758de9ecc3c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h2><ul><li>参数被放置在请求体中进行传输</li><li>获取 POST 参数需要使用 data 事件和 end 事件</li><li>使用 querystring 系统模块将参数转化为对象格式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// 处理请求参数模块</span></span><br><span class="line"><span class="keyword">const</span> queryString = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line">  <span class="comment">// data 当请求参数传递的时候触发data事件</span></span><br><span class="line">  <span class="comment">// end 当请求参数传递完成的时候触发end事件</span></span><br><span class="line">  <span class="keyword">let</span> postParams = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">params</span>)=&gt;</span>&#123;</span><br><span class="line">    postParams += params;</span><br><span class="line">  &#125;)</span><br><span class="line">  request.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(postParams);            <span class="comment">// 接收到的是一个字符串</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(queryString.<span class="title function_">parse</span>(postParams));        <span class="comment">// 使用queryString将字符串转化为对象    </span></span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> 模块化开发 </tag>
            
            <tag> Express框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue全家桶之Vue组件化开发(二)</title>
      <link href="/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91(%E4%BA%8C)/"/>
      <url>/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="✍、目录脑图"><a href="#✍、目录脑图" class="headerlink" title="✍、目录脑图"></a>✍、目录脑图</h1><p><img src="https://img-blog.csdnimg.cn/499fde216e40477296ff2138ea2eb4f1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><ul><li>配套视频讲解: <a href="https://www.bilibili.com/video/BV15741177Eh?from=search&seid=12220650172270950947&spm_id_from=333.337.0.0">CoderWhy老师的Vuejs讲解</a></li></ul><h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><p>我们将一个完整的页面分成很多个组件，每个组件都用于实现页面的一个功能块，而每一个组件又可以进行细分</p><h2 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h2><p>步骤：</p><ol><li>创建组件构造器： 调用 <code>Vue.extend()</code> 方法创建组件构造器</li><li>注册组件：调用 <code>Vue.component()</code> 方法注册组件</li><li>使用组件：在 Vue 实例的作用范围内使用组件</li></ol><p><img src="https://img-blog.csdnimg.cn/52782df813e041a1aa118cd251b8e108.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!--<span class="number">3.</span>使用组件--&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.创建组件构造器对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容, 哈哈哈哈&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容, 呵呵呵呵&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;/div&gt; `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 2.注册组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 参数1:字符串格式,表示组件的注册名称</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 参数2:需要被全局注册的那个组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>, cpnC)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="步骤解析"><a href="#步骤解析" class="headerlink" title="步骤解析"></a>步骤解析</h2><ol><li><p>Vue.extend():</p><ul><li>调用 <code>Vue.extend()</code> 创建的是一个组件构造器</li><li>通常在创建组件构造器时，传入 <code>template</code> 代表我们自定义组件的模板</li><li>该模板就是在使用到组件的地方，要显示的HTML代码</li><li>事实上，这种写法在Vue2.x的文档中几乎已经看不到了，它会直接使用下面我们会讲到的语法糖，但是在很多资料还是会提到这种方式，而且这种方式是学习后面方式的基础。</li></ul></li><li><p>Vue.component():</p><ul><li>调用 <code>Vue.component()</code> 是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称</li><li>所以需要传递两个参数：1、注册组件的标签名。 2、组件构造器</li></ul></li><li><p><strong>组件必须挂载在某个Vue实例下，否则它不会生效</strong></p><p>我们来看下面我使用了三次 <code>&lt;my-cpn&gt;&lt;/my-cpn&gt;</code> ,而第三次其实并没有生效</p></li></ol><p><img src="https://img-blog.csdnimg.cn/c8b50fa33e764a79a1a676d1546ab67f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h2><p>当我们调用<code>Vue.component()</code>注册组件时，组件的注册是全局的</p><ul><li>这意味着该组件可以在任意Vue示例下使用</li><li>但是如果我们注册的组件是挂载在某个实例中，那么就是一个局部组件</li></ul><p><img src="https://img-blog.csdnimg.cn/4e627e94def34b99a56390cc76ae8d69.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app2&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.创建组件构造器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容,哈哈哈哈啊&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 2.注册组件(全局组件, 意味着可以在多个Vue的实例下面使用)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Vue.component(&#x27;cpn&#x27;, cpnC)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 疑问: 怎么注册的组件才是局部组件了?</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 答:将组件构造器放在实例当中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 将组件构造器放在实例当中  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// cpn使用组件时的标签名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">cpn</span>: cpnC</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>通过Vue.component()方法注册的组件是全局组件，通过 components 注册的是私有子组件</p></blockquote><h2 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h2><p>组件与组件之间存在层级关系，其中一种最重要的关系就是父子组件</p><p><img src="https://img-blog.csdnimg.cn/9dca2b8341164de188e182d7f22fedd3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span></span><br><span class="line">  &lt;!--<span class="language-xml"><span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span>--&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // 1.创建第一个组件构造器(子组件)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const cpnC1 = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // 2.创建第二个组件构造器(父组件)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const cpnC2 = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 呵呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    `,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // 在父组件中注册子组件,这样就可以在父组件里面使用子组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // 例如上面的<span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span>  </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      cpn1: cpnC1</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // root组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const app = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    el: &#x27;#app&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    data: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      message: &#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // cpn1子组件在cpn2父组件中注册,父组件cpn2在Vue实例里面注册</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      cpn2: cpnC2</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="父子组件的错误用法"><a href="#父子组件的错误用法" class="headerlink" title="父子组件的错误用法"></a>父子组件的错误用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span></span><br><span class="line">  &lt;!--父子组件的错误用法:以子组件的形式在 <span class="title class_">Vue</span> 实例中使用--&gt;  </span><br><span class="line">  &lt;!--<span class="language-xml"><span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span>--&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // 1.创建第一个组件构造器(子组件)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const cpnC1 = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // 2.创建第二个组件构造器(父组件)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const cpnC2 = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 呵呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    `,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // 在父组件中注册子组件,这样就可以在父组件里面使用子组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // 例如上面的<span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span>  </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      cpn1: cpnC1</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  // root组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  const app = new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    el: &#x27;#app&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    data: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      message: &#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    components: &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      // cpn1子组件在cpn2父组件中注册,父组件cpn2在Vue实例里面注册</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      cpn2: cpnC2</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>父子组件的错误用法： 以子组件的形式在 Vue 实例中使用</p><ul><li>因为当子组件注册到父组件的 components 时，Vue 会编译好父组件的模块</li><li>该模板的内容已经决定了父组件将要渲染的 HTML(相当于父组件中已经有了子组件的内容了)</li><li><code>&lt;cpn1&gt;&lt;/cpn1&gt;</code> 是只能在父组件中被识别的</li><li>类似这种用法，<code>&lt;cpn1&gt;&lt;/cpn1&gt;</code> 是会被浏览器忽略的。</li></ul><h2 id="注册组件语法糖🔥"><a href="#注册组件语法糖🔥" class="headerlink" title="注册组件语法糖🔥"></a>注册组件语法糖🔥</h2><ul><li>Vue 为了简化这个过程，提供了注册的语法糖</li><li>主要是省去了调用 <code>Vue.extend()</code> 的步骤,而是可以直接使用一个对象来代替</li></ul><p><strong>语法糖注册全局组件和局部组件语法糖：看图片左边</strong></p><p><img src="https://img-blog.csdnimg.cn/5190091974f1483dbc1d9fbeda75a0cc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.全局组件注册的语法糖</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.创建组件构造器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// const cpn1 = Vue.extend()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 2.注册组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn1&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;h2&gt;我是标题1&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;p&gt;我是内容, 哈哈哈哈&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 2.注册局部组件的语法糖</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;cpn2&#x27;</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">template</span>: <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">            &lt;h2&gt;我是标题2&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">            &lt;p&gt;我是内容, 呵呵呵&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板的分离写法"><a href="#模板的分离写法" class="headerlink" title="模板的分离写法"></a>模板的分离写法</h2><p>通过语法糖简化了 Vue 组件的注册过程，另外还有一个地方的写法比较麻烦，就是 <code>template</code> 模块写法</p><ul><li>如果我们能将其中的HTML分离出来写，然后挂载到对应的组件上，必然结构会变得非常清晰</li><li>Vue 提供了两种方案来定义HTML模板内容<ul><li><strong>使用 &lt; script &gt; 标签</strong></li><li><strong>使用 &lt; template &gt; 标签</strong></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/ad45233c87644604a7b8522901cd3bb3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="使用-script-标签"><a href="#使用-script-标签" class="headerlink" title="使用 script 标签"></a>使用 script 标签</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">1.</span>script标签, 注意:类型必须是text/x-template--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容,哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.注册一个全局组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="使用template标签🔥"><a href="#使用template标签🔥" class="headerlink" title="使用template标签🔥"></a>使用template标签🔥</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">2.</span>template标签--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容,呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.注册一个全局组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="组件数据存放"><a href="#组件数据存放" class="headerlink" title="组件数据存放"></a>组件数据存放</h2><p>问题：组件可以访问Vue实例数据吗？我们来测试一下</p><p><img src="https://img-blog.csdnimg.cn/272f0a4334f4466fa6665687e438fbd3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>结论：组件不能直接访问Vue实例中的 data</p><p>组件是一个单独功能模块的封装：</p><ul><li>这个模块有属于自己的 HTML 模板，也应该有属于自己的数据 data</li></ul><blockquote><p>组件自己的数据存放在哪呢？</p></blockquote><ul><li>组件对象也有一个 data 属性(也可以有 methods 属性)</li><li>只是这个 data 属性必须是一个函数</li><li>而且这个函数返回一个对象，对象内部保存着数据</li></ul><p><img src="https://img-blog.csdnimg.cn/96510d98d88b439f91130368d9ed4853.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="number">2.</span>template标签--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容,呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.注册一个全局组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>: <span class="string">&#x27;abc&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// title: &#x27;我是标题&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>为什么 data 在组件中必须是一个函数呢？</p></blockquote><ul><li>首先，如果不算是一个函数，Vue 直接就会报错</li><li>其次，原因是在于 Vue 让每个组件对象都返回一个新的对象，因为如果是同一个对象，组件在多次使用后会相互影响</li></ul><h2 id="父子组件通信🔥"><a href="#父子组件通信🔥" class="headerlink" title="父子组件通信🔥"></a>父子组件通信🔥</h2><p>在上一个小节中，我们提到了子组件是不能引用父组件或者Vue实例的数据的</p><p>但是，在开发中，往往一些数据确实需要从上层传递到下层</p><ul><li>比如在一个页面中，我们从服务器请求到了很多的数据</li><li>其中的一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示</li><li>这个时候，并不会让子组件再次发送一个网络请求，而是直接让<strong>大组件(父组件)</strong> 将数据传递给<strong>小组件(子组件)</strong></li></ul><blockquote><p>如何进行父子组件间的通信呢？</p></blockquote><ul><li>通过 <code>props</code> 向子组件传递数据</li><li>通过事件向父组件发送消息</li></ul><p><img src="https://img-blog.csdnimg.cn/21fc2b0b81d24913870cc6d0eae7192c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="props-基本用法"><a href="#props-基本用法" class="headerlink" title="props 基本用法"></a>props 基本用法</h2><p>在组件中，使用选项 <code>props</code> 来声明需要从父级接收到的数据(properties)</p><p><code>props</code> 的值有两种方式：</p><ul><li>方式一：字符串数组，数组中的字符串就是传递时的名称</li><li>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等。</li></ul><h3 id="传数组"><a href="#传数组" class="headerlink" title="传数组"></a>传数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!-- <span class="number">4.</span>使用组件(v-bind动态绑定) --&gt;  </span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:cmessage</span>=<span class="string">&quot;`message`&quot;</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">2.</span>组件构造器的模板分离写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.创建组件构造器(子组件)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpn = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: [<span class="string">&#x27;cmovies&#x27;</span>, <span class="string">&#x27;cmessage&#x27;</span>]<span class="comment">//父传子,props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 3.注册组件(将子组件在父组件里面注册)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">movies</span>: [<span class="string">&#x27;海王&#x27;</span>, <span class="string">&#x27;海贼王&#x27;</span>, <span class="string">&#x27;海尔兄弟&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//对象字面量增强写法的属性增强写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      cpn</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/38ea4862cdcb45f09cb95b2684e294f1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><strong>注意</strong>：我们在使用组件时，需要用<code>v-bind</code> 动态绑定数据。</p><h3 id="传对象"><a href="#传对象" class="headerlink" title="传对象"></a>传对象</h3><ul><li>在前面，我们的 <code>props</code> 选项是使用一个数组</li><li>除了数组之外，我们也可以使用对象，当需要对<code>props</code> 进行类型等验证时，就需要对象写法了</li></ul><p>验证支持的数据类型有：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul><h4 id="①类型限制"><a href="#①类型限制" class="headerlink" title="①类型限制"></a>①类型限制</h4><p>我们可以在 props 里面限制父组件给子组件传递的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--父组件模板--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:cmessage</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--子组件模板--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 父传子: props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpn = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1.类型限制</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">cmovies</span>: <span class="title class_">Array</span>,<span class="comment">// 限制父组件传的是数组类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">cmessage</span>: <span class="title class_">String</span>,<span class="comment">// 限制父组件传的是字符串类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// root组件,我们当作父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">movies</span>: [<span class="string">&#x27;海王&#x27;</span>, <span class="string">&#x27;海贼王&#x27;</span>, <span class="string">&#x27;海尔兄弟&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//对象字面量增强写法的属性增强写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      cpn</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="②默认值和必传值"><a href="#②默认值和必传值" class="headerlink" title="②默认值和必传值"></a>②默认值和必传值</h4><ul><li><p><code>type</code> : 限制的类型</p></li><li><p>```<br>default</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  : 如果没有传值,给一个默认值</span><br><span class="line"></span><br><span class="line">  - **注意**:类型是对象或者数组时, 默认值必须是一个函数</span><br><span class="line"></span><br><span class="line">- `required` : 必须的,即意味着这个值是必须要传递的,不传就报错</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">   &lt;!--在这里传值--&gt; </span><br><span class="line">  &lt;cpn :cmessage=&quot;message&quot; :cmovies=&quot;movies&quot;&gt;&lt;/cpn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id=&quot;cpn&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;cmovies&#125;&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;cmessage&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 父传子: props</span><br><span class="line">  const cpn = &#123;</span><br><span class="line">    template: &#x27;#cpn&#x27;,</span><br><span class="line">    // props: [&#x27;cmovies&#x27;, &#x27;cmessage&#x27;],</span><br><span class="line">    props: &#123;</span><br><span class="line"></span><br><span class="line">      // 2.提供一些默认值, 以及必传值</span><br><span class="line">      cmessage: &#123;</span><br><span class="line">        type: String,         // 类型限制为 String</span><br><span class="line">        default: &#x27;aaaaaaaa&#x27;,  // 如果没有传值,则给一个默认值</span><br><span class="line">        required: true        // required 必须的,即意味着这个值是必须要传递的,不传就报错</span><br><span class="line">      &#125;,</span><br><span class="line">      // 类型是对象或者数组时, 默认值必须是一个函数</span><br><span class="line">      cmovies: &#123;</span><br><span class="line">        type: Array,</span><br><span class="line">        default() &#123;</span><br><span class="line">          return []</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // root组件,我们当作父组件</span><br><span class="line">  const app = new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: &#x27;你好啊&#x27;,</span><br><span class="line">      movies: [&#x27;海王&#x27;, &#x27;海贼王&#x27;, &#x27;海尔兄弟&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      //对象字面量增强写法的属性增强写法</span><br><span class="line">      cpn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="③自定义类型"><a href="#③自定义类型" class="headerlink" title="③自定义类型"></a>③自定义类型</h4><p>当我们有自定义构造函数时,验证也支持自定义的类型</p><p><img src="https://img-blog.csdnimg.cn/95312d96846d4c309d996738e21e4e8d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h4 id="④props驼峰标识"><a href="#④props驼峰标识" class="headerlink" title="④props驼峰标识"></a>④props驼峰标识</h4><p>当我们 props 里面的属性是驼峰写法的时,在传入值时需要进行 <code>-</code> 连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!--目前不支持直接写cInfo,驼峰得加 <span class="string">`-`</span> 连接--&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:c-info</span>=<span class="string">&quot;info&quot;</span> <span class="attr">:child-my-message</span>=<span class="string">&quot;message&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cInfo&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;childMyMessage&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpn = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 驼峰写法cInfo</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">cInfo</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//类型是对象或者数组时, 默认值必须是一个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">default</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">childMyMessage</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">info</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">height</span>: <span class="number">1.88</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;aaaaaa&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      cpn</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="子级向父级传递"><a href="#子级向父级传递" class="headerlink" title="子级向父级传递"></a>子级向父级传递</h2><ul><li><code>props</code> 用于父组件向子组件传递数据，还有一种比较常见的是子组件传递数据或事件到父组件去</li><li>这个时候，我们需要使用自定义事件来完成</li></ul><p>什么时候需要自定义事件呢？</p><ul><li>当子组件需要向父组件传递数据时，就要用到自定义事件了</li><li>我们之前学习的 <code>v-on</code> 不仅仅可以用于监听 DOM 事件，也可以用于组件间的自定义事件</li></ul><p>自定义事件的流程：</p><ul><li>在子组件中，通过<code>$emit()</code> 来触发事件</li><li>在父组件中，通过<code>v-on</code> 来监听子组件事件</li></ul><p>我们来看一个简单的例子：</p><ul><li>我们之前做过一个两个按钮 +1 和 -1，点击后修改 counter</li><li>我们整个操作的过程还是在子组件中完成，但是之后的展示交给父组件</li><li>这样，我们就需要将子组件中的 counter，传给父组件的某个属性，比如total</li></ul><p><img src="https://img-blog.csdnimg.cn/751bbb8a13a9467dbccb2777e78c2c4b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--父组件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2.父组件里面接收子组件发出的自定义事件 值是一个方法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">item-click</span>=<span class="string">&quot;cpnClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in categories&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;btnClick(item)&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.子组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">categories</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;热门推荐&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;手机数码&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;ccc&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;家用家电&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;电脑办公&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">btnClick</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(item);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.发射事件: 自定义事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第一个参数是自定义事件的名称,第二个参数是自定义事件的参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;item-click&#x27;</span>, item)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.父组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      cpn</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3.父组件里面定义方法处理</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">cpnClick</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cpnClick&#x27;</span>, item);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6d8359f9af054acbb43163ffdd7d9e5e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h2><p>有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问根组件。</p><ul><li>父组件访问子组件：使用 <code>$children</code> 或 <code>$refs</code></li><li>子组件访问父组件：使用<code>$parent</code></li></ul><h3 id="父组件访问子组件-1"><a href="#父组件访问子组件-1" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h3><p>我们先来看下<code>$children</code> 的访问</p><ul><li><code>this.$children</code> 是一个数组类型，它包含所有子组件对象</li></ul><blockquote><p><code>$children</code> 的缺陷：</p></blockquote><ul><li>通过 <code>$children</code> 访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值</li><li>但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至还可能会发生变化</li><li>有时候，我们想明确获取其中一个特定的组件，这个时候就可以使用 <code>$refs</code></li></ul><blockquote><p><code>$refs</code> 的使用🔥</p></blockquote><ul><li><code>$refs</code> 和 ref 指令通常是一起使用的</li><li>首先，我们通过 ref 给某一个子组件绑定一个特定的 ID</li><li>其次，通过 <code>this.$refs.ID</code> 就可以访问到该组件了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--父组件的模板--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!--子组件的模板--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 2.$refs =&gt; 对象类型, 默认是一个空的对象 必须在组件上加 ref=&#x27;bbb&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">aaa</span>.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">cpn</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">name</span>: <span class="string">&#x27;我是子组件的name&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h3><p>如果我们想在子组件中直接访问父组件，可以通过 <code>$parent</code></p><ul><li>尽管在 Vue 开发中，我们允许通过 <code>$parent</code> 来访问父组件，但是在真实开发中尽量不要这要做</li><li>子组件应该尽量避免直接访问父组件的数据，因为这样耦合度太高了</li><li>如果我们将子组件放入另外一个组件之内，很可能该父组件没有对应的属性，往往会引起问题</li></ul><h1 id="组件化高级"><a href="#组件化高级" class="headerlink" title="组件化高级"></a>组件化高级</h1><h2 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h2><ul><li>在子组件中，使用特殊的元素 <code>&lt;slot&gt;</code>就可以为子组件开启一个插槽</li><li>该插槽插入什么内容取决于父组件如何使用</li><li>我们来看一个简单的例子，来给子组件定义一个插槽：<ul><li><code>&lt;slot&gt;</code> 中的内容表示，如果没有在该组件中插入任何其他内容，就默认显示该内容</li><li>如果有多个值，同时放入到组件进行替换时，一起作为替换元素</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/b8150b8d0afe4b02875d6f00b49acc08.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--父组件模板--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--子组件模板--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">cpn</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0745908f950a4341a24994ef915f9e62.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="具名插槽slot"><a href="#具名插槽slot" class="headerlink" title="具名插槽slot"></a>具名插槽slot</h2><p>当子组件的功能复杂时，子组件的插槽可能并非是一个。</p><ul><li>比如我们封装一个导航栏的子组件，可能就需要三个插槽，分别代表左边、中间、右边。</li><li>那么，外面在给插槽插入内容时，如何区分插入的是哪一个呢？p这个时候，我们就需要给插槽起一个名字</li></ul><p>如何给插槽起名字呢？</p><ul><li>给插槽起一个名字，只要给 slot 元素一个 name 属性即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">cpn</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/18b7920894474f2f8561cb509ffa245d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h2><p>我们来考虑下面的代码是否最终是可以渲染出来的：</p><p><img src="https://img-blog.csdnimg.cn/0682dd47f7af42c1ae2291061870053d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li><code>&lt; my-cpn v-show=&quot;isShow&quot;&gt;&lt;/ my-cpn &gt;</code> 中，我们使用了 isShow 属性</li><li>isShow 属性包含在组件中，也包含在 Vue 实例中</li></ul><p>答案：最终可以渲染出来，也就是使用的是 Vue 实例的属性</p><p>为什么呢？</p><ul><li>官方给出了一条准则：<strong>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在级作用域内编译</strong></li><li>而我们在使用 <code>&lt; my-cpn v-show=&quot;isShow&quot;&gt;&lt;/ my-cpn &gt;</code> 的时候，整个组件的使用过程相当于在父组件中出现的</li><li>那么它的作用域就是父组件，使用的属性也是属于父组件的属性</li><li>因此 ,isShow 使用的是 Vue 实例中的属性，而不是子组件的属性</li></ul><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>一句话总结：<strong>父组件替换插槽的标签，但是内容由子组件来提供</strong></p><p>我们先提一个需求：</p><ul><li>子组件包括一组数据</li><li>需要在多个界面进行展示<ul><li>某些界面是以水平方向一一展示的</li><li>某些界面是以列表形式展示</li><li>某些界面直接展示一个数组</li></ul></li><li>内容在子组件，希望父组件告诉我们如何展示，怎么办呢？<ul><li>利用 slot 作用域插槽就可以了</li></ul></li></ul><p>我们先来看看子组件的定义：</p><p><img src="https://img-blog.csdnimg.cn/cf1167d91a6d4537856f7ab7514e4d1b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>在父组件使用我们的子组件时，从子组件中拿到数据</p><ul><li>我们通过 <code>&lt;template slot-scope=&quot;slotProps&quot;&gt;</code> 获取到 slotProps 属性</li><li>在通过 <code>slotProps.data</code>就可以获取到我们传入的 data 了</li></ul><p><img src="https://img-blog.csdnimg.cn/22aa66056b7741dd83bd5dd544ae5cc1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--父组件模板--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--目的是获取子组件中的pLanguages--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!--&lt;span v-for=&quot;item in slot.data&quot;&gt; - &#123;&#123;item&#125;&#125;&lt;/span&gt;--&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slot.data.join(&#x27; - &#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--目的是获取子组件中的pLanguages--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!--&lt;span v-for=&quot;item in slot.data&quot;&gt;&#123;&#123;item&#125;&#125; * &lt;/span&gt;--&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slot.data.join(&#x27; * &#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--子组件模板--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;pLanguages&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in pLanguages&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">cpn</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">pLanguages</span>: [<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Swift&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e452f26bdf5b42f1b5279ceaaf22ea22.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h1 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h1><h2 id="ES6export指令"><a href="#ES6export指令" class="headerlink" title="ES6export指令"></a>ES6export指令</h2><ul><li><code>export</code> 指令用于导出变量，比如下面的代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&#x27;why&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> height = <span class="number">1.88</span></span><br></pre></td></tr></table></figure><ul><li>上面的代码还有另外一种写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;why&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> height = <span class="number">1.88</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>&#123;name,age,height&#125;</span><br></pre></td></tr></table></figure><h2 id="导出函数或类"><a href="#导出函数或类" class="headerlink" title="导出函数或类"></a>导出函数或类</h2><p>上面我们主要是输出变量，也可以输出函数或者输出类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">content</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;在奔跑&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的代码也可以写成这种形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">test</span><span class="params">(content)</span> &#123;</span><br><span class="line">    console.log(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    constructor(name,age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    run() &#123;</span><br><span class="line">        console.log(<span class="built_in">this</span>.name + <span class="string">&#x27;在奔跑&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123;test,Person&#125;</span><br></pre></td></tr></table></figure><h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h2><ul><li>某些情况下，一个模块中包含某个功能，我们并不希望给这个功能命名，而是让导入者可以自己来命名</li><li>这个时候就可以使用 <code>export default</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;default function&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>我们来到 <code>main.js</code> 中，这样使用就可以了</p><ul><li>这里的 <code>myFunc</code> 是我自己命名的，你可以根据需要命名它对应的名字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myFunc form <span class="string">&#x27;./info.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>()</span><br></pre></td></tr></table></figure></li><li><p>另外，需要注意：</p><ul><li><code>export default</code> 在同一个模块中，不允许同时存在多个</li></ul></li></ul><h2 id="ES6-import的使用"><a href="#ES6-import的使用" class="headerlink" title="ES6 import的使用"></a>ES6 import的使用</h2><p>我们使用 export 指令导出了模块对外提供的接口，下面我们就可以通过 <code>import</code> 命令来加载对应的这个模块了</p><ul><li>首先，我们需要在 HTML 代码中引入两个j文件，并且类型需要设置为 module</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;info.js&quot;</span> <span class="attr">type</span> = <span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;main.js&quot;</span> <span class="attr">type</span> = <span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>import</code> 指令用于导入模块中的内容，比如 <code>main.js</code> 的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name,age,height&#125; <span class="keyword">from</span> <span class="string">&quot;./info.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name,age,height);</span><br></pre></td></tr></table></figure><ul><li>如果我们希望某个模块中所有的信息都导入，一个个导入显然有些麻烦<ul><li>p通过<code>*</code>可以导入模块中所有的export变量</li><li>p但是通常情况下我们需要给<code>*</code>起一个别名，方便后续的使用</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> info <span class="keyword">from</span> <span class="string">&#x27;./info.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>,info.<span class="property">age</span>,info.<span class="property">height</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2.0 </tag>
            
            <tag> Vue-router </tag>
            
            <tag> Vuex </tag>
            
            <tag> VueCli4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue全家桶之webpack详解(四)</title>
      <link href="/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8Bwebpack%E8%AF%A6%E8%A7%A3(%E5%9B%9B)/"/>
      <url>/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8Bwebpack%E8%AF%A6%E8%A7%A3(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><ul><li>配套视频讲解: <a href="https://www.bilibili.com/video/BV15741177Eh?from=search&seid=12220650172270950947&spm_id_from=333.337.0.0">CoderWhy老师的Vuejs讲解</a></li></ul><h1 id="认识webpack"><a href="#认识webpack" class="headerlink" title="认识webpack"></a>认识webpack</h1><ul><li>在ES6之前，我们相要进行模块化开发，就必须借助于其他的工具，让我们可以进行模块化开发</li><li>并且在通过模块化开发完成了项目后，还需要处理模块间的各种依赖，并且将其进行整合打包</li><li>而webpack其中一个核心就是让我们可能进行模块化开发，并且会帮助我们处理模块间的依赖关系。</li><li>而且不仅仅是 JavaScript 文件，我们的CSS、图片、json文件等等在webpack中都可以被当做模块来使用</li><li>这就是webpack模块化的概念</li></ul><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><ul><li>理解了webpack可以帮助我们进行模块化，并且处理模块间的各种复杂关系后，打包的概念就非常好理解了</li><li>就是将webpack的各种资源模块进行打包整合成一个或多个包Bundle</li><li>并且在打包的过程中，还可以对资源进行处理，比如压缩图片，将scss转成css，将ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作</li><li>但是打包的操作似乎 grunt/gulp 也可以帮助我们完成，它们有什么不同呢？</li></ul><h2 id="和grunt-gulp的对比"><a href="#和grunt-gulp的对比" class="headerlink" title="和grunt/gulp的对比"></a>和grunt/gulp的对比</h2><p><strong>grunt / gulp 的核心是 Task</strong></p><ul><li>我们可以配置一系列的 task，并且定义 task 要处理的事务(例如ES6,ts转化，图片压缩，scss转成css)</li><li>之后让 grunt / gulp 来依次执行这些 task，而且让整个流程自动化</li><li>所以 grunt / gulp 也被称为前端自动化任务管理工具</li></ul><p><strong>我们来看一个 gulp 的task</strong></p><ul><li>下面的 task 就是将 src 下面的所有 js 文件转成 ES5 的语法</li><li>并且最终输出到 dist 文件夹中</li></ul><p><img src="https://img-blog.csdnimg.cn/6b963714abef4ef080b4f9570a9f023f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><strong>什么时候用 grunt / gulp 呢？</strong></p><ul><li>如果你都工程模块依赖非常简单，甚至是没有用到模块化的概念</li><li>只需要进行简单的合并、压缩，就使用 grunt / gulp 即可</li><li>但是如果整个项目使用了模块化管理，而且相互依赖非常强，我们就可以使用更加强大的webpack了</li></ul><h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><p>安装webpack首先需要安装Node.js，Node.js自带了软件包管理工具npm</p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><ul><li>老师的版本是 10.13.0 ，我自身安装的是14.15.0版本，所以需要进行卸载</li><li>所有nodejs历史版本的链接： <a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a></li><li>找到10.13.0，里面是 nodejs V10.13.0所有类型安装文件<ul><li><code>.msi</code> 使用这个不用配置环境变量</li><li><code>.zip</code> 解压即可用，但是需要配置环境变量</li></ul></li><li>我这里下载 <code>.msi</code> 后缀文件</li><li>双击下载完成的 <code>node-v10.13.0-x64.msi</code> ,点击next</li></ul><p><img src="https://img-blog.csdnimg.cn/174458f8fec7402fb3f9f3648d708907.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>勾选同意</li></ul><p><img src="https://img-blog.csdnimg.cn/8964684e3f1b4d8fa3d8676bc89afa53.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>更改为你认为合适的安装路径</li></ul><p><img src="https://img-blog.csdnimg.cn/5b4e8b09353c4edd960a5fd7cdf20edc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>点击next<ul><li><code>npm package manage</code> 表示 npm包管理器</li><li><code>online documentation shortcuts</code> 在线文档快捷方式</li><li><code>Add to Path</code> 添加 node 安装路径到环境变量</li><li>这就是<code>.msi</code> 不需要手动添加环境变量的原因，node已经帮我们配置好了</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/34d85f06c34b485c92a7fc8abffe5d12.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>是否勾选工具去编译 native 模块，<strong>我们不勾选</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/1059ac0cfbd64b8cb47a26861d63a056.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>点击 install</li></ul><p><img src="https://img-blog.csdnimg.cn/bff8a07ad427405896afdbe2796822e7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>等待安装完毕</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用管理员方式打开dos窗口，输入 <code>node -v</code></p><p><img src="https://img-blog.csdnimg.cn/0d348d42927c44b2aafcd816f61d36e8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>显示如图样式，则安装成功</p><h3 id="更改淘宝镜像"><a href="#更改淘宝镜像" class="headerlink" title="更改淘宝镜像"></a>更改淘宝镜像</h3><p>管理员方式打开DOS窗口，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>点击回车就更换成功了，可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>上面命令去查看是否成功，如果返回是</p><p><img src="https://img-blog.csdnimg.cn/0358f194be694064ac4d72d6295352a3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>则更换成功</p><h3 id="全局安装webpack"><a href="#全局安装webpack" class="headerlink" title="全局安装webpack"></a>全局安装webpack</h3><ul><li>在DOS命令窗口中输入 <code>npm install webpack@3.6.0 -g</code> 安装webpack(这里指定版本号3.6.0，因为 vue cli2 依赖该版本)</li><li>其中的 -g 代表是全局安装，全局安装可以在电脑任何一个位置执行webpack指令</li><li>安装需要3~5分钟，之后出现可以让你输入的命令行就说明安装完成，如下图</li></ul><p><img src="https://img-blog.csdnimg.cn/8f082bcade81496db8975c12118287ce.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li><p>在DOS命令窗口输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --version</span><br></pre></td></tr></table></figure></li><li><p>注意是两个横线</p></li></ul><p><img src="https://img-blog.csdnimg.cn/e5b679476d784629aade0b172fed0853.png#pic_center" alt="在这里插入图片描述"></p><p>如果你看到3.6.0，说明你已经成功安装了webpack3.6.0</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先创建如下文件和文件夹</p><ul><li><p><code>dist</code>文件夹： 用于存放之后打包的文件</p></li><li><p>```<br>src</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  文件夹： 用于存放我们写的源文件</span><br><span class="line"></span><br><span class="line">  - `main.js` 项目的入口文件</span><br><span class="line">  - `mathUtils.js` 定义了一些数学工具函数，可以在其他地方引用，并且使用。</span><br><span class="line"></span><br><span class="line">- `index.html` 浏览器打开展示的首页html</span><br><span class="line"></span><br><span class="line">- `package.json` 通过 `npm init` 生成的，npm 包管理的文件</span><br><span class="line"></span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/22f9802338ca4cab862ae54020607e2c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_12,color_FFFFFF,t_70,g_se,x_16#pic_center)</span><br><span class="line"></span><br><span class="line">## js文件的打包</span><br><span class="line"></span><br><span class="line">现在的 js 文件中使用了模块化的方式进行开发，他们可以直接使用吗？不可以。</span><br><span class="line"></span><br><span class="line">- 因为如果直接在 index.html 引入这两个 js 文件，浏览器并不识别其中的模块化代码。</span><br><span class="line">- 另外，在真实项目当中有许多这样的 js 文件时，我们一个个引用非常麻烦，并且后期非常不方便对它们进行管理</span><br><span class="line"></span><br><span class="line">我们应该使用webpack工具，对多个 js 文件进行打包</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">webpack src/main.js dist/bundle.js</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用打包后的文件"><a href="#使用打包后的文件" class="headerlink" title="使用打包后的文件"></a>使用打包后的文件</h2><p>打包后会在 <code>dist</code> 文件夹下，生成一个 <code>bundle.js</code> 文件</p><ul><li>此文件是 webpack 处理了项目直接文件依赖后生成的一个 js 文件，我们只需要将这个 js 文件在 index.html 中引入即可</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>例如，我们使用模块化开发两个js文件</p><p><img src="https://img-blog.csdnimg.cn/47b37774941c487aa9fdf32f81738673.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>之后在 main.js 中进行引入两个js文件，在Termial终端使用 webpack 打包main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将src下的main.js 打包到dist目录下然后命名为bundle.js</span></span><br><span class="line">webpack src/main.<span class="property">js</span> dist/bundle.<span class="property">js</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/78d7b2793cb84144bf68e9f5bb364529.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e373a019da03469898a31b750b4735a1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>所以我们就知道了，我们以后在 src 下开发，之后让 webpack 打包main.js，然后我们引用打包后的js文件，这就是我们的开发模式。</p><h1 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h1><h2 id="mode节点的可选值"><a href="#mode节点的可选值" class="headerlink" title="mode节点的可选值"></a>mode节点的可选值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定构建模式,可选值有 development 和 production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mode 节点的可选值有两个，分别是：</p><ol><li>development<ul><li>开发环境</li><li>不会堆打包生成的文件进行代码压缩和性能优化</li><li>打包速度快，适合在开发阶段使用</li></ul></li><li>production<ul><li>生产环境</li><li>会对打包生成的文件进行代码压缩和性能优化</li><li>打包速度很慢，仅适合在项目发布阶段使用</li></ul></li></ol><h2 id="入口和出口"><a href="#入口和出口" class="headerlink" title="入口和出口"></a>入口和出口</h2><p>每次使用webpack的命令都需要写上入口和出口作为参数，非常麻烦，有没有一种方法可以将者两个参数写到配置中，在运行时，直接读取呢？</p><ul><li><p>当然可以，就是创建一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack.config.js</span><br></pre></td></tr></table></figure><p>文件</p><ul><li>通过 entry 节点指定打包的入口</li><li>通过 output 节点指定打包的出口</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口:可以是字符串/数组/对象，我们这里的入口只有一个，所以写一个字符串即可</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// entry: path.join(__dirname,&#x27;./src/index.js&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出口:通常是一个对象,里面至少包含两个重要属性,path 和 filename</span></span><br><span class="line">    output :&#123;</span><br><span class="line">        <span class="comment">// 注意: path通常是一个绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 输出文件目录</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置之后我们用 webpack 打包时，就可以直接在终端输入 <code>webpack</code> ，就相当于 <code>webpack src/main.js dist/bundle.js</code> ,虽然看起来简洁，但是这不是我们最终的方式，我们最好的方式在下方有记录</p><p>webpack.config.js是 webpack 的配置文件。 webpack 在真正开始打包构建之前，会先读取这个配置文件 ， 从而基于给定的配置，对项目进行打包。</p><p><strong>注意</strong>：由于 webpack 是基于 node.js 开发出来的打包工具，因此在它的配置文件中，支持使用 node.js 相关的语法和模块进行webpack 的</p><h2 id="局部安装webpack"><a href="#局部安装webpack" class="headerlink" title="局部安装webpack"></a>局部安装webpack</h2><p>既然已经全局安装了 webpack，为什么还要局部安装呢？这是因为我们需要的项目可能是从网上下载下来的，项目中使用的webpack和我们本地的webpack可能版本不同，这就需要在局部安装webpack了</p><p>目前，我们使用的webpack是全局的webpack，如果我们想使用局部来打包呢？</p><ul><li>因为一个项目往往依赖特定的webpack版本，全局的版本可能很这个项目的webpack版本不一致，导出打包出现问题。</li><li>所以通常一个项目，都有自己局部的webpack。</li></ul><p>第一步，项目中需要安装自己局部的webpack</p><ul><li>这里我们让局部安装安装 webpack3.6.0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@3.6.0 --save-dev</span><br></pre></td></tr></table></figure><h2 id="package-json中定义启动"><a href="#package-json中定义启动" class="headerlink" title="package.json中定义启动"></a>package.json中定义启动</h2><p>但是，每次执行都敲这么一长串有没有觉得不方便呢？OK，我们可以在package.json的scripts中定义自己的执行脚本。</p><ul><li>package.json中的scripts的脚本在执行时，会按照一定的顺序寻找命令对应的位置。</li><li>首先，会寻找本地的 node_modules/.bin 路径中对应的命令。</li><li>如果没有找到，会去全局的环境变量中寻找</li></ul><p>在 package.json 文件下有 scripts ，是脚本的意思，我们只需要在下方配置脚本</p><p><img src="https://img-blog.csdnimg.cn/5d72557f53334d0aa38fd1c140e2a664.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>这样配置完成之后，我们在终端输入 <code>npm run build</code> 也就相当于执行 <code>webpack</code> ，也就相当于执行 <code>webpack src/main.js dist/bundle.js</code></p><h1 id="webpack中的loader"><a href="#webpack中的loader" class="headerlink" title="webpack中的loader"></a>webpack中的loader</h1><p>在实际开发过程中， webpack 默认只能打包处理以 .js 后缀名结尾的模块。其他 非 .js 后缀名结尾的模块 ， webpack 默认处理不了， 需要调用 loader 加载器才可以正常打包 ，否则会报错</p><p>loader加载器的作用： 协助 webpack 打包处理特定的文件模块 。比如：</p><ul><li>css-loader 可以打包处理 .css 相关的文件</li><li>less-loader 可以打包处理 .less 相关的文件</li><li>babel-loader 可以打包处理 webpack 无法处理的高级 JS 语法</li></ul><h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h2><ul><li>loader是webpack中一个非常核心的概念。</li></ul><p>webpack用来做什么呢？</p><ul><li>在我们之前的实例中，我们主要是用webpack来处理我们写的js代码，并且webpack会自动处理js之间相关的依赖。</li><li>但是，在开发中我们不仅仅有基本的js代码处理，我们也需要加载css、图片，也包括一些高级的将ES6转成ES5代码，将TypeScript转成ES5代码，将scss、less转成css，将.jsx、.vue文件转成js文件等等。</li><li>对于webpack本身的能力来说，对于这些转化是不支持的。</li><li>那怎么办呢？给webpack扩展对应的 loader 就可以啦。</li></ul><p>loader使用过程：</p><ul><li><strong>步骤一：通过 npm 安装需要使用的 loader</strong></li><li><strong>步骤二：在 webpack.config.js 中的 modules 关键字下进行配置</strong></li></ul><h3 id="css文件处理准备工作"><a href="#css文件处理准备工作" class="headerlink" title="css文件处理准备工作"></a>css文件处理准备工作</h3><p>项目开发过程中，我们必然需要添加很多的样式，而样式我们往往写到一个单独的文件中。</p><ol><li>在src目录中，创建一个css文件，其中创建一个normal.css文件。</li><li>我们也可以重新组织文件的目录结构，将零散的js文件放在一个js文件夹中。</li><li>normal.css 中的代码非常简单，就是将body设置为red</li><li>在webpack中文网中有 loader的用法：<a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a></li></ol><p><img src="https://img-blog.csdnimg.cn/329ce7c1938144afb60988533651641c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>css 文件的打包需要用到 style-loader，css-loader</li></ul><p><img src="https://img-blog.csdnimg.cn/a090e7e0d2474b2fab6d8dc5318d4a79.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>先安装 style-loader，再安装 css-loader</li></ul><p><img src="https://img-blog.csdnimg.cn/c9ba14f902e54f948f5a7a767966d575.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>之后在 main.js 引用我们自己的 css 文件，再打包即可</li></ul><p><img src="https://img-blog.csdnimg.cn/32503821062b4e07b5d82368c952b684.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>总结步骤：</p><ol><li>首先安装 style-loader 和 css-loader</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br><span class="line">npm install style-loader --save-dev</span><br></pre></td></tr></table></figure><ol><li>在 webpack.config.js 的 module-&gt; rules 数组中，添加loader规则如下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;<span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">    <span class="attr">rules</span>: [<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [ <span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中， test 表示匹配的文件类型，use 表示对应要调用的 loader</p><p>注意：</p><ul><li>use 数组中指定的 loader <strong>顺序是固定的</strong></li><li>多个 loader 的调用顺序是：<strong>从后往前调用</strong></li></ul><h2 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h2><p>如果我们希望在项目中使用less、scss、stylus来写样式，webpack是否可以帮助我们处理呢？</p><p>我们这里以less为例，其他也是一样的。</p><p>我们还是先创建一个less文件，依然放在css文件夹中</p><ol><li>继续在中文文档里面查看 less-loader 的用法</li></ol><p><img src="https://img-blog.csdnimg.cn/d727b39414394d9f8db791981c19b1c9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ol><li>在 main.js 中进行引用即可</li><li>打包</li></ol><h2 id="图片文件处理"><a href="#图片文件处理" class="headerlink" title="图片文件处理"></a>图片文件处理</h2><p>首先，我们在项目中加入两张图片：</p><ul><li>一张较小的图片test01.jpg(小于8kb)，一张较大的图片test02.jpeg(大于8kb)</li><li>我们会针对这两张图片进行不同的处理</li><li>我们先考虑在css样式中引用图片的情况，所以更改 normal.css 中的样式，就是使用背景图片</li></ul><h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p>图片处理</p><ol><li>我们使用 url-loader 来处理，依然先安装 url-loader，然后在 webpack.config.js 中进行配置</li></ol><p><img src="https://img-blog.csdnimg.cn/c5db66ba509044018ae324e8c72cfc02.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>再次打包，运行 index.html，就会发现我们的就会发现我们的背景图片显示出来。而仔细观察，你会发现背景图是通过base64显示出来的，这也是limit属性的作用，当图片小于8kb时，对图片进行base64编码</p><ul><li>当加载的图片, 小于limit时, 会将图片编译成base64字符串形式.</li><li>当加载的图片, 大于limit时, 需要使用file-loader模块进行加载.</li></ul><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><p>大于 limit 的图片，会通过file-loader进行处理</p><p><img src="https://img-blog.csdnimg.cn/caf1d62448704e9c8227fab0cbc49e92.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="修改图片名称和路径"><a href="#修改图片名称和路径" class="headerlink" title="修改图片名称和路径"></a>修改图片名称和路径</h3><p>我们发现webpack自动帮助我们生成一个非常长的名字，这是一个32位hash值，目的是防止名字重复，但是，真实开发中，我们可能对打包的图片名字有一定的要求，比如，将所有的图片放在一个文件夹中，跟上图片原来的名称，同时也要防止重复。</p><p>所以，我们可以在options中添加上如下选项：</p><ul><li>img：文件要打包到的文件夹</li><li>name：获取图片原来的名字，放在该位置</li><li>hash:8：为了防止图片名称冲突，依然使用hash，但是我们只保留8位</li><li>ext：使用图片原来的扩展名</li></ul><p><img src="https://img-blog.csdnimg.cn/e1869a524a36461cbfaca77748038d41.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>另外，默认情况下，webpack 会将生成的路径直接返回给使用者，但是，我们整个程序是打包在 dist 文件夹下的，所以需要在路径下添加 dist/ （是在出口函数处使用<code>publicPath</code> 设置）</p><p><img src="https://img-blog.csdnimg.cn/d6332cfd6daf4fe7a782855a2d268436.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h2><p>webpack只能打包处理一部分 高级的 JavaScript 语法。对于那些 webpack 无法处理的高级 js 语法，需要借助于 babelbabel-loader 进行打包处理。</p><p>如果希望将ES6的语法转成ES5，那么就需要使用 babel-loader 进行打包处理</p><ol><li>安装 babel-loader</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D babel-loader @babel/core @babel/preset-env webpack</span><br></pre></td></tr></table></figure><ol><li>配置 webpack.config.js 文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [</span><br><span class="line">            [<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class="attr">targets</span>: <span class="string">&quot;defaults&quot;</span> &#125;]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>重新打包，查看bundle.js文件，发现其中的内容变成了ES5的语法</li></ol><h1 id="webpack中的插件"><a href="#webpack中的插件" class="headerlink" title="webpack中的插件"></a>webpack中的插件</h1><ul><li>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。</li><li>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等</li></ul><p>loader 和 plugin 区别？</p><ul><li>loader主要用于转换某些类型的模块，它是一个转换器。</li><li>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</li></ul><p>plugin 使用步骤：</p><ul><li>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)</li><li>步骤二：在webpack.config.js中的plugins中配置插件</li></ul><h2 id="添加版权的plugin"><a href="#添加版权的plugin" class="headerlink" title="添加版权的plugin"></a>添加版权的plugin</h2><ul><li>该插件的名字叫做 BannerPlugin，属于 webpack 自带的插件。</li></ul><p><img src="https://img-blog.csdnimg.cn/75d48ea97f3c4287ad40b8dad46469eb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>步骤如下：</p><ol><li>在 webpack.config.js 中导入 webpack</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li>配置在 plugins 中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line"><span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&#x27;最终版权归aaa所有&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打包html的plugin"><a href="#打包html的plugin" class="headerlink" title="打包html的plugin"></a>打包html的plugin</h2><p>目前，我们的index.html文件是存放在项目的根目录下的。我们知道，在真实发布项目时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义了。所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用<code>html-webpack-plugin</code>插件</p><p>html-webpack-plugin 插件可以为我们做这些事情：</p><ul><li>自动生成一个index.html文件(可以指定模板来生成)</li><li>将打包的js文件，自动通过script标签插入到body中</li></ul><ol><li>安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nom install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><ol><li>在 webpack.config.js 中导入 HTML 插件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>使用插件，修改webpack.config.js文件中plugins部分的内容如下<ul><li>这里的template表示根据什么模板来生成 index.html</li><li>另外，我们需要删除之前在output中添加的publicPath属性，否则插入的script标签中的src可能会有问题</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入HTML插件,得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建HTML插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,<span class="comment">// 指定原文件的存放路径</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;./index.html&#x27;</span>,<span class="comment">// 指定生成的文件的存放路径</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [htmlPlugin],<span class="comment">// 通过 plugins 节点,使 htmlPlugin 插件生效</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。</p><p>类似于 node.js 阶段用到的 nodemon 工具，每当修改了源代码， webpack 会自动进行项目的打包和构建</p><ol><li>它是一个单独的模块，在webpack中使用之前需要先安装它</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><ol><li><p>修改 package.json -&gt; scripts 中的 dev 命令</p><p>open参数表示直接打开浏览器，不加 <code>--open</code> 表示不自动打开服务器</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --open&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2700fe100bcf4ec8aa168d4f36596aa6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>之后我们就可以通过 <code>npm run dev</code> 来修改我们的代码，而不需要每次修改完代码都进行打包，修改测试完成再通过 <code>npm run build</code> 打包</p><ol><li>devserver 节点也是作为webpack中的一个选项，选项本身可以设置如下属性，可以对插件进行更多的配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,<span class="comment">// 为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写./dist</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,<span class="comment">// 自动打开浏览器</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">// 实时打包所使用的主机地址</span></span><br><span class="line">        <span class="attr">port</span>: <span class="string">&#x27;80&#x27;</span>,<span class="comment">// 实时打包所使用的端口号,默认是 8080</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f8af7da6a50447e2810013a9b3731736.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>注意：凡是修改了 webpack.config.js 配置文件，或修改了 package.json 配置文件，必须重启实时打包的服务器，否则最新的配置文件无法生效。</p><h2 id="js压缩的Plugin"><a href="#js压缩的Plugin" class="headerlink" title="js压缩的Plugin"></a>js压缩的Plugin</h2><p>我们使用一个第三方的插件 <code>uglifyjs-webpack-plugin</code>，并且版本号指定</p><ol><li>下载</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><ol><li>修改 webpack.config.js 文件，使用插件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UglifyjsWebpackPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>查看打包后的bunlde.js文件，是已经被压缩过了。</li></ol><h1 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h1><p>项目开发完成之后 ，需要使用 webpack 对项目进行打包发布 ，主要原因有以下两点：</p><ol><li>开发环境下，打包生成的文件存放于内存中 ，无法获取到最终打包生成的文件</li><li>开发环境下，打包生成的文件 不会进行代码压缩和性能优化</li></ol><p>为了让项目能够在生产环境中高性能的运行，因此需要对项目进行打包发布。</p><h2 id="配置webpack的打包发布"><a href="#配置webpack的打包发布" class="headerlink" title="配置webpack的打包发布"></a>配置webpack的打包发布</h2><p>在 package.json 文件的 scripts 节点下，新增 build 命令如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;script&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve&quot;</span>,<span class="comment">// 开发环境中,运行dev命令</span></span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --mode production&quot;</span><span class="comment">// 项目发布时,运行 build 命令 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>-- model</code> 是一个参数项，用来指定 webpack 的运行模式 。production 代表生产环境，会对打包生成的文件<br>进行<strong>代码压缩和性能优化</strong> 。</p><p>注意：通过 <code>-- model</code> 指定的参数项，会覆盖 webpack.config.js 中的 model 选项</p><h2 id="把JavaScript文件统一生成到js目录中"><a href="#把JavaScript文件统一生成到js目录中" class="headerlink" title="把JavaScript文件统一生成到js目录中"></a>把JavaScript文件统一生成到js目录中</h2><p>在 webpack.config.js 配置文件的 output 节点中，进行如下的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 入口:可以是字符串/数组/对象，我们这里的入口只有一个，所以写一个字符串即可</span></span><br><span class="line">    <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出口:通常是一个对象,里面至少包含两个重要属性,path 和 filename</span></span><br><span class="line">    output :&#123;</span><br><span class="line">        <span class="comment">// 注意: path通常是一个绝对路径</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 明确告诉 webpack 把生成的 bundle.js 文件存放到 dist 目录下的 js 子目录中</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;js/bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="把图片文件统一生成到-image-目录中"><a href="#把图片文件统一生成到-image-目录中" class="headerlink" title="把图片文件统一生成到 image 目录中"></a>把图片文件统一生成到 image 目录中</h2><p>修改 webpack.config.js 中的 url-loader 配置项，新增 <code>outputPath</code> 选项即可指定图片文件的输出路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.jpg|png|gif$/</span>,</span><br><span class="line">    <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">limit</span>: <span class="number">22228</span>,</span><br><span class="line">            <span class="comment">// 明确指定把打包生成的图片文件,存储到 dist 目录下的 image 文件夹中    </span></span><br><span class="line">            <span class="attr">outputPath</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动清理-dist-目录下的旧文件"><a href="#自动清理-dist-目录下的旧文件" class="headerlink" title="自动清理 dist 目录下的旧文件"></a>自动清理 dist 目录下的旧文件</h2><p>为了在每次打包发布时自动清理掉 dist 目录中的旧文件 ，可以安装并配置 <code>clean-webpack-plugin</code> 插件</p><ol><li>安装插件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><ol><li>按需导入插件，得到插件的构造函数后，创建插件的实例对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">CleanWebpackPlugin</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cleanPlugin = <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br></pre></td></tr></table></figure><ol><li>把创建的 cleanPlugin 插件实例对象挂载到 plugins 节点中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入清理插件插件,得到插件的构造函数后，创建插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">CleanWebpackPlugin</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建HTML插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> cleanPlugin = <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.把创建的 cleanPlugin 插件实例对象,挂载到 plugins 节点中,使插件生效</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [htmlPlugin,cleanPlugin],<span class="comment">// 挂载插件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h1><h2 id="生产环境遇到的问题"><a href="#生产环境遇到的问题" class="headerlink" title="生产环境遇到的问题"></a>生产环境遇到的问题</h2><p>前端项目在投入生产环境之前，都需要对JavaScript 源代码进行 压缩混淆 ，从而减小文件的体积，提高文件的加载效率。此时就不可避免的产生了另一个问题：</p><ul><li>对压缩混淆之后的代码除错（debug）是一件极其困难的事情</li><li>变量被替换成 没有任何语义 的名称</li><li>空行和注释被剔除</li></ul><h2 id="什么是SourceMap"><a href="#什么是SourceMap" class="headerlink" title="什么是SourceMap"></a>什么是SourceMap</h2><ul><li>Source Map就是一个信息文件，里面储存着位置信息</li><li>也就是说， Source Map 文件中存储着压缩混淆后的代码所对应的转换前的位置 。</li><li>有了它，出错的时候，除错工具将直接显示原始代码 ，而不是转换后的代码 ，能够极大的方便后期的调试。</li></ul><h3 id="webpack-开发环境下的-Source-Map"><a href="#webpack-开发环境下的-Source-Map" class="headerlink" title="webpack 开发环境下的 Source Map"></a>webpack 开发环境下的 Source Map</h3><p>在开发环境下，webpack 默认启用了 Source Map 功能。当程序运行出错时，可以直接在控制台提示错误行的位置，并定位到具体的源代码。</p><p><img src="https://img-blog.csdnimg.cn/5bf8098aecff4e44b4e64b29028ba98e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="默认Source-Map的问题"><a href="#默认Source-Map的问题" class="headerlink" title="默认Source Map的问题"></a>默认Source Map的问题</h3><p>开发环境下默认生成的 SourceMap ，记录的是 生成后的代码的位置 。会导致运行时报错的行数与源代码的行数不一致的问题。示意图如下：</p><p><img src="https://img-blog.csdnimg.cn/609e1e5913bf49cfa17b4e09ef6f004a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="解决默认Source-Map的问题"><a href="#解决默认Source-Map的问题" class="headerlink" title="解决默认Source Map的问题"></a>解决默认Source Map的问题</h3><p>开发环境下，推荐在 webpack.config.js 中添加如下的配置，即可保证运行时报错的行数与源代码的行数保持一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="comment">// eval-source-map 仅限在&#x27;开发模式&#x27;下使用,不建议在 &#x27;生产模式&#x27;下使用。</span></span><br><span class="line">    <span class="comment">// 此选项生产的 Source Map 能够保证运行时报错的行数与源代码的行数保持一致</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack生产环境下的SourceMap"><a href="#webpack生产环境下的SourceMap" class="headerlink" title="webpack生产环境下的SourceMap"></a>webpack生产环境下的SourceMap</h2><p>在生产环境下 ，如果省略了 devtool 选项 ，则最终生成的文件中不包含 Source Map 。这能够防止原始代码通过Source Map 的形式暴露给别有所图之人。</p><p><img src="https://img-blog.csdnimg.cn/e54a8f7c119c45b2865a360a97ed45e1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="只定位行数不暴露源码"><a href="#只定位行数不暴露源码" class="headerlink" title="只定位行数不暴露源码"></a>只定位行数不暴露源码</h3><p>在生产环境下，如果 只想定位报错的具体行数 ，且不想暴露源码 。此时可以将 devtool 的值设置为<code>nosources-source-map</code> 。实际效果如图所示：</p><p><img src="https://img-blog.csdnimg.cn/ad8eca4d223d43e68f59ad233ea382fb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="定位行数且暴露源码"><a href="#定位行数且暴露源码" class="headerlink" title="定位行数且暴露源码"></a>定位行数且暴露源码</h3><p>在生产环境下，如果想在定位报错行数的同时，展示具体报错的源码。此时可以将 devtool 的值设置为 <code>source-map</code>。实际效果如图所示：</p><p><img src="https://img-blog.csdnimg.cn/7208dcbe753145648ac288951da28fc8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="Source-Map最佳实践"><a href="#Source-Map最佳实践" class="headerlink" title="Source Map最佳实践"></a>Source Map最佳实践</h2><ol><li>开发环境下<ul><li>建议把 devtool 的值设置为 <code>eval-source-map</code></li><li>好处：可以精准定位到具体的错误行</li></ul></li><li>生产环境下<ul><li>建议关闭 Source Map 或将 devtool 的值设置为 <code>nosources-source-map</code></li><li>好处：放置源码泄露，提高网站的安全性</li></ul></li></ol><hr><p>总结：实际开发中不需要自己配置webpack</p><ul><li>实际开发中会使命令行工具（俗称 CLI）一键生成 带有 webpack 的项目</li><li>开箱即用，所有 webpack 配置项都是现成的</li><li>但是我们仍需要了解配置项的基本概念</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue2.0-webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2.0 </tag>
            
            <tag> Vue-router </tag>
            
            <tag> Vue Cli </tag>
            
            <tag> Vuex </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>①、jQuery，Hold on!</title>
      <link href="/myblog.github.io/2022/04/24/%E2%91%A0%E3%80%81jQuery%EF%BC%8CHold%20on!/"/>
      <url>/myblog.github.io/2022/04/24/%E2%91%A0%E3%80%81jQuery%EF%BC%8CHold%20on!/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="①、jQuery，Hold-on"><a href="#①、jQuery，Hold-on" class="headerlink" title="①、jQuery，Hold on!"></a>①、jQuery，Hold on!</h1><h1 id="✍、jQuery完结篇（一）"><a href="#✍、jQuery完结篇（一）" class="headerlink" title="✍、jQuery完结篇（一）"></a>✍、jQuery完结篇（一）</h1><p><img src="https://img-blog.csdnimg.cn/7b5a594dab4c4c9abcc42e1054e698e8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="jQuery🔥"><a href="#jQuery🔥" class="headerlink" title="jQuery🔥"></a>jQuery🔥</h1><h2 id="JavaScript库"><a href="#JavaScript库" class="headerlink" title="JavaScript库"></a>JavaScript库</h2><ul><li>JavaScript 库：即 library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。</li><li>简单理解： 就是一个JS 文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</li><li>比如 jQuery，就是为了快速方便的操作DOM，里面基本都是函数（方法）。</li><li>jQuery 是一个快速、简洁的 JavaScript 库，其设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</li><li>j 就是 JavaScript； Query 查询； 意思就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能。</li><li>jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。</li><li>学习jQuery本质： 就是学习调用这些函数（方法）。</li><li>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</li></ul><h2 id="jQuery下载🔥"><a href="#jQuery下载🔥" class="headerlink" title="jQuery下载🔥"></a>jQuery下载🔥</h2><ul><li>官网: <a href="https://jquery.com/">https://jquery.com/</a></li><li>其余版本的下载：<a href="https://code.jquery.com/">https://code.jquery.com/</a><ul><li>1x ：兼容 IE 678 等低版本浏览器， 官网不再更新</li><li>2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新</li><li>3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本</li></ul></li></ul><ol><li>我们在使用之前要先下载 ，步骤如下，首先打开官网</li></ol><p><img src="https://img-blog.csdnimg.cn/fb31d5f2ca914bbca3c19e0381a18564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>打开官网，选择压缩的版本使用即可</li></ol><p><img src="https://img-blog.csdnimg.cn/bf941edc7f914098816ac512fbadbcbe.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>点击压缩版本进入：<code>ctrl+A</code> 全选， <code>ctrl+c</code> 复制</li></ol><p><img src="https://img-blog.csdnimg.cn/ab8086b9809f40ae9aa859c8e6a05cbf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>在vs中新建<code>jquery.min.js</code> 文件（此处任何名称均可，只要是js文件即可）</li><li>在html 文件进行引入即可</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery的入口函数🔥"><a href="#jQuery的入口函数🔥" class="headerlink" title="jQuery的入口函数🔥"></a>jQuery的入口函数🔥</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方法 推荐</span></span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...   <span class="comment">// 此处是页面DOM加载完成的入口 </span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ... <span class="comment">//此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完毕，jQuery 帮我们完成了封装</li><li>相当于原生 js 中的 DOMContentLoaded</li><li>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css 文件、图片加载完毕才执行内部代码</li><li>更推荐使用第一种方式</li></ul><h2 id="jQuery的顶级对象-🔥"><a href="#jQuery的顶级对象-🔥" class="headerlink" title="jQuery的顶级对象$🔥"></a>jQuery的顶级对象$🔥</h2><ol><li>$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替$</li><li>$ 是 jQuery 的顶级对象，相当于原生 JavaScript 中的 window。</li><li><strong>把元素利用$包装成jQuery对象</strong>，就可以调用jQuery的方法。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. $ 是jQuery的别称（另外的名字）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// $(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     alert(11)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">jQuery</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// alert(11)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&#x27;div&#x27;).hide();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">jQuery</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hide</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. $同时也是jQuery的 顶级对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery对象和DOM对象🔥"><a href="#jQuery对象和DOM对象🔥" class="headerlink" title="jQuery对象和DOM对象🔥"></a>jQuery对象和DOM对象🔥</h2><ol><li><p><strong>DOM对象</strong>：用原生js获取过来的对象</p></li><li><p><strong>jQuery对象</strong>: 用jQuery方式获取过来的对象是jQuery对象。</p><p> 本质：通过$把DOM元素进行了包装(伪数组形式存储)</p></li><li><p>jQuery对象只能使用jQuery方法，DOM对象则使用原生的JavaScript的属性和方法</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. DOM 对象:  用原生js获取过来的对象就是DOM对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);   <span class="comment">// myDiv 是DOM对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> mySpan = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>); <span class="comment">// mySpan 是DOM对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(myDiv);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. jQuery对象:用jquery方式获取过来的对象是jQuery对象。 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//    本质:通过$把DOM元素进行了包装</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// $(&#x27;div&#x27;)是一个jQuery 对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;span&#x27;</span>); <span class="comment">// $(&#x27;span&#x27;)是一个jQuery 对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">dir</span>($(<span class="string">&#x27;div&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. jQuery 对象只能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 属性和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// myDiv.style.display = &#x27;none&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// myDiv.hide(); myDiv是一个dom对象不能使用 jquery里面的hide方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// $(&#x27;div&#x27;).style.display = &#x27;none&#x27;; 这个$(&#x27;div&#x27;)是一个jQuery对象不能使用原生js 的属性和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery对象和DOM对象转化🔥"><a href="#jQuery对象和DOM对象转化🔥" class="headerlink" title="jQuery对象和DOM对象转化🔥"></a>jQuery对象和DOM对象转化🔥</h2><ul><li>DOM 对象与 jQuery 对象之间是可以相互转换的。</li><li>因为原生js 比 jQuery 更大，原生的一些属性和方法 jQuery没有给我们封装. 要想使用这些属性和方法需要把jQuery对象转换为DOM对象才能使用。</li></ul><h3 id="DOM-对象转换为-jQuery-对象🔥"><a href="#DOM-对象转换为-jQuery-对象🔥" class="headerlink" title="DOM 对象转换为 jQuery 对象🔥"></a>DOM 对象转换为 jQuery 对象🔥</h3><ul><li>语法：<code>$(DOM对象)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="jQuery-对象转换为-DOM-对象🔥"><a href="#jQuery-对象转换为-DOM-对象🔥" class="headerlink" title="jQuery 对象转换为 DOM 对象🔥"></a>jQuery 对象转换为 DOM 对象🔥</h3><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>)[index]   index是索引号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">get</span>(index) index是索引号</span><br><span class="line"><span class="number">123456</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;mov.mp4&quot;</span> <span class="attr">muted</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. DOM对象转换为 jQuery对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// (1) 我们直接获取视频，得到就是jQuery对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// $(&#x27;video&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// (2) 我们已经使用原生js 获取过来就是DOM对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> myvideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// $(myvideo).play();  jquery里面没有play 这个方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.  jQuery对象转换为DOM对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// myvideo.play();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;video&#x27;</span>)[<span class="number">0</span>].<span class="title function_">play</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;video&#x27;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">play</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="jQuery常用API🔥"><a href="#jQuery常用API🔥" class="headerlink" title="jQuery常用API🔥"></a>jQuery常用API🔥</h1><h2 id="jQuery选择器🔥"><a href="#jQuery选择器🔥" class="headerlink" title="jQuery选择器🔥"></a>jQuery选择器🔥</h2><h3 id="jQuery基础选择器🔥"><a href="#jQuery基础选择器🔥" class="headerlink" title="jQuery基础选择器🔥"></a>jQuery基础选择器🔥</h3><p>原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p><p>语法：<code>$(&quot;选择器&quot;)</code> 里面选择器直接写CSS选择器即可，但是要加引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.nav&quot;</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td><code>$(&quot;#id&quot;)</code></td><td>获取指定ID的元素</td></tr><tr><td>全选选择器</td><td><code>$(&#39;*&#39;)</code></td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td><code>$(&quot;.class&quot;)</code></td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td><code>$(&quot;div&quot;)</code></td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td><code>$(&quot;div,p,li&quot;)</code></td><td>选取多个元素</td></tr><tr><td>交集选择器</td><td><code>$(&quot;li.current&quot;)</code></td><td>交集元素</td></tr></tbody></table><h3 id="jQuery层级选择器🔥"><a href="#jQuery层级选择器🔥" class="headerlink" title="jQuery层级选择器🔥"></a>jQuery层级选择器🔥</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td><code>$(&quot;ul&gt;li&quot;)</code></td><td>使用&gt;号，获取亲儿子层级的选择器；注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td><code>$(&quot;ul li&quot;)</code></td><td>使用空格，代表后代选择器，获取 ul 下的所有 li 元素，包括孙子等</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul li&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>我是nav div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul 的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.nav&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;ul li&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h3><p>jQuery 设置样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;属性&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="jQuery隐式迭代🔥"><a href="#jQuery隐式迭代🔥" class="headerlink" title="jQuery隐式迭代🔥"></a>jQuery隐式迭代🔥</h3><ul><li>遍历内部DOM元素(伪数组形式存储)的过程就叫做 <strong>隐式迭代</strong></li><li>简单理解: 给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>惊喜不，意外不<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>惊喜不，意外不<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>惊喜不，意外不<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>惊喜不，意外不<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相同的操作<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相同的操作<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相同的操作<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取四个div元素 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 给四个div设置背景颜色为粉色 jquery对象不能使用style</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 隐式迭代就是把匹配的所有元素内部进行遍历循环，给每一个元素添加css这个方法</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;ul li&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery筛选选择器🔥"><a href="#jQuery筛选选择器🔥" class="headerlink" title="jQuery筛选选择器🔥"></a>jQuery筛选选择器🔥</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选取 ul 里面的 第一个 li</span></span><br><span class="line">$(<span class="string">&quot;ul li:first&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>: first</td><td><code>$(&#39;li:first&#39;)</code></td><td>获取第一个li元素</td></tr><tr><td>: last</td><td><code>$(&#39;li:last&#39;)</code></td><td>获取最后一个li元素</td></tr><tr><td>: eq(index)</td><td><code>$(&quot;li:eq(2)&quot;)</code></td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始</td></tr><tr><td>: odd</td><td><code>$(&quot;li:odd&quot;)</code></td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>: even</td><td><code>$(&quot;li:even&quot;)</code></td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有序列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>多个里面筛选几个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取第一个li元素</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;ul li:first&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取索引号为2的li</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;ul li:eq(2)&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取索引号为奇数的li</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;ol li:odd&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;skyblue&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取索引号为偶数的li</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;ol li:even&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery筛选方法🔥"><a href="#jQuery筛选方法🔥" class="headerlink" title="jQuery筛选方法🔥"></a>jQuery筛选方法🔥</h3><table><thead><tr><th>语法</th><th>用法</th><th>说明</th></tr></thead><tbody><tr><td>🔥parent()</td><td><code>$(&quot;li&quot;).parent();</code></td><td>查找父级，最近一级的父元素</td></tr><tr><td>🔥children(selector)</td><td><code>$(&quot;ul&quot;).children(&quot;li&quot;)</code></td><td>相当于<code>$(&quot;ul&gt;li&quot;)</code>,最近一级(亲儿子)</td></tr><tr><td>🔥find(selector)</td><td><code>$(&quot;ul&quot;).find(&quot;li&quot;)</code></td><td>相当于<code>$(&quot;ul li&quot;)</code> 后代选择器</td></tr><tr><td>🔥siblings(selector)</td><td><code>$(&quot;.first&quot;).siblings(&quot;li&quot;)</code></td><td>查找兄弟节点，<strong>不包括自己本身</strong></td></tr><tr><td>nextAll([expr])</td><td><code>$(&quot;.first&quot;).nextAll()</code></td><td>查找当前元素<strong>之后</strong>所有的同辈元素</td></tr><tr><td>prevtAll([expr])</td><td><code>$(&quot;.last&quot;).prevAll()</code></td><td>查找当前元素<strong>之前</strong>所有的同辈元素</td></tr><tr><td>hasClass(class)</td><td><code>$(&#39;div&#39;).hasClass(&quot;protected&quot;)</code></td><td>检查当前的元素是否含有某个特定的类，如果有，则返回true</td></tr><tr><td>🔥eq(index)</td><td><code>$(&quot;li&quot;).eq(2);</code></td><td>相当于<code>$(&quot;li:eq(2),index&quot;)</code>index从0开始</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yeye&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是屁<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注意一下都是方法 带括号</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. 父  parent()  返回的是 最近一级的父级元素 亲爸爸</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">parent</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (1) 亲儿子 children()  类似子代选择器  ul&gt;li</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;.nav&quot;).children(&quot;p&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (2) 可以选里面所有的孩子 包括儿子和孙子  find() 类似于后代选择器</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;.nav&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery排他思想🔥"><a href="#jQuery排他思想🔥" class="headerlink" title="jQuery排他思想🔥"></a>jQuery排他思想🔥</h3><ul><li>想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. 隐式迭代 给所有的按钮都绑定了点击事件</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2. 当前的元素变化背景颜色</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3. 其余的兄弟去掉背景颜色 隐式迭代</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuerty链式编程🔥"><a href="#jQuerty链式编程🔥" class="headerlink" title="jQuerty链式编程🔥"></a>jQuerty链式编程🔥</h3><p>链式编程是为了节省代码量，看起来更优雅。使用链式编程一定注意是哪个对象执行样式.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>快速<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 隐式迭代 给所有的按钮都绑定了点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 2. 让当前元素颜色变为红色(点击哪个哪个就变为红色)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// $(this).css(&quot;color&quot;, &quot;red&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 3. 让其余的兄弟元素不变色 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// $(this).siblings().css(&quot;color&quot;, &quot;&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 链式编程完成上述功能</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery样式操作🔥"><a href="#jQuery样式操作🔥" class="headerlink" title="jQuery样式操作🔥"></a>jQuery样式操作🔥</h2><h3 id="jQuery修改样式css方法"><a href="#jQuery修改样式css方法" class="headerlink" title="jQuery修改样式css方法"></a>jQuery修改样式css方法</h3><p>jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式</p><ol><li>参数只写属性名,则返回属性值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>参数是属性名,属性值,逗号分隔,是设定一组样式。属性需要加引号,值是数字可不加单位和引号</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="number">300</span>);</span><br></pre></td></tr></table></figure><ol><li>参数可以是对象形式,方便设置多组样式。属性名和属性值用冒号隔开,属性可以不用加引号</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="string">&quot;width&quot;</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="comment">// 如果是复合属性则必须采取驼峰命名法，如果值不是数字，则需要加引号</span></span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;red&quot;</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery设置类样式方法"><a href="#jQuery设置类样式方法" class="headerlink" title="jQuery设置类样式方法"></a>jQuery设置类样式方法</h3><p>作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.添加类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.移除类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.切换类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"><span class="number">12345678</span></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            transition: all 0.5s;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .current &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">            transform: rotate(360deg);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;current&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function() &#123;</span><br><span class="line">            // 1. 添加类 addClass()</span><br><span class="line">            // $(&quot;div&quot;).click(function() &#123;</span><br><span class="line">            //     // $(this).addClass(&quot;current&quot;);</span><br><span class="line">            // &#125;);</span><br><span class="line">            // 2. 删除类 removeClass()</span><br><span class="line">            // $(&quot;div&quot;).click(function() &#123;</span><br><span class="line">            //     $(this).removeClass(&quot;current&quot;);</span><br><span class="line">            // &#125;);</span><br><span class="line">            // 3. 切换类 toggleClass()</span><br><span class="line">            $(&quot;div&quot;).click(function() &#123;</span><br><span class="line">                $(this).toggleClass(&quot;current&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="jQuery类操作和className区别"><a href="#jQuery类操作和className区别" class="headerlink" title="jQuery类操作和className区别"></a>jQuery类操作和className区别</h3><ul><li>原生 JS 中的 className 会覆盖元素原先里面的类名</li><li>jQuery里面类操作只是对指定类进行操作，不影响原先的类名</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var one = document.querySelector(&quot;.one&quot;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// one.className = &quot;two&quot;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// $(&quot;.one&quot;).addClass(&quot;two&quot;);  这个addClass相当于追加类名 不影响以前的类名</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;.one&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;two&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery效果🔥"><a href="#jQuery效果🔥" class="headerlink" title="jQuery效果🔥"></a>jQuery效果🔥</h2><h3 id="jQuery显示与隐藏效果"><a href="#jQuery显示与隐藏效果" class="headerlink" title="jQuery显示与隐藏效果"></a>jQuery显示与隐藏效果</h3><p>jQuery 给我们封装了很多动画效果，最为常见的如下：</p><p><img src="https://img-blog.csdnimg.cn/b357f95c4a3641139e56cae9212db87c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="①显示效果"><a href="#①显示效果" class="headerlink" title="①显示效果"></a>①显示效果</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示语法规范</span></span><br><span class="line"><span class="title function_">show</span>([speed,[easing],[fn]])       <span class="comment">//中括号表示参数都可以省略</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">show</span>();</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>参数都可以省略， 无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h4 id="②隐藏效果"><a href="#②隐藏效果" class="headerlink" title="②隐藏效果"></a>②隐藏效果</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐藏语法规范</span></span><br><span class="line"><span class="title function_">hide</span>([speed,[easing],[fn]])</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">hide</span>();</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>参数都可以省略， 无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h4 id="③切换效果"><a href="#③切换效果" class="headerlink" title="③切换效果"></a>③切换效果</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切换语法规范</span></span><br><span class="line"><span class="title function_">toggle</span>([speed,[easing],[fn]])</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggle</span>();</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>参数都可以省略， 无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><p>建议：平时一般不带参数，直接显示隐藏即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">show</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">hide</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggle</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 一般情况下，我们都不加参数直接显示隐藏就可以了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="jQuery滑动效果与事件切换"><a href="#jQuery滑动效果与事件切换" class="headerlink" title="jQuery滑动效果与事件切换"></a>jQuery滑动效果与事件切换</h3><h4 id="①下滑动"><a href="#①下滑动" class="headerlink" title="①下滑动"></a>①下滑动</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下滑动</span></span><br><span class="line"><span class="title function_">slideDown</span>([speed,[easing],[fn]]) </span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideDown</span>();</span><br></pre></td></tr></table></figure><h4 id="②上滑动"><a href="#②上滑动" class="headerlink" title="②上滑动"></a>②上滑动</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上滑动</span></span><br><span class="line"><span class="title function_">slideUp</span>([speed,[easing],[fn]]) </span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideUp</span>();</span><br></pre></td></tr></table></figure><h4 id="③滑动切换"><a href="#③滑动切换" class="headerlink" title="③滑动切换"></a>③滑动切换</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滑动切换效果</span></span><br><span class="line"><span class="title function_">slideToggle</span>([speed,[easing],[fn]]) </span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line"><span class="number">123</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>下拉滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上拉滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>切换滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 下滑动 slideDown()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideDown</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 上滑动 slideUp()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideUp</span>(<span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 滑动切换 slideToggle()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideToggle</span>(<span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="④事件切换"><a href="#④事件切换" class="headerlink" title="④事件切换"></a>④事件切换</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">hover</span>([over,]out)</span><br></pre></td></tr></table></figure><ul><li>over: 鼠标移到元素上要触发的函数(相当于mouseenter)</li><li>out: 鼠标移出元素要触发的函数(相当于mouseleave)</li><li>如果只写一个函数，则鼠标经过和离开都会触发它</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br><span class="line"><span class="comment">// 第一个function是鼠标经过的函数</span></span><br><span class="line"><span class="comment">// 第二个function是鼠标离开的函数</span></span><br><span class="line"><span class="comment">// 如果hover只写一个函数,那么鼠标经过和鼠标离开都会触发这个函数</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery动画队列及其停止排队方法"><a href="#jQuery动画队列及其停止排队方法" class="headerlink" title="jQuery动画队列及其停止排队方法"></a>jQuery动画队列及其停止排队方法</h3><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行</p><h4 id="①停止排队"><a href="#①停止排队" class="headerlink" title="①停止排队"></a>①停止排队</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">stop</span>()</span><br></pre></td></tr></table></figure><ul><li>stop()方法用于停止动画或者效果</li><li>注意: stop() 写到动画或者效果的前面，相当于停止结束上一次的动画</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// stop 方法必须写到动画的前面</span></span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">stop</span>().<span class="title function_">slideToggle</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery淡入淡出以及突出效果"><a href="#jQuery淡入淡出以及突出效果" class="headerlink" title="jQuery淡入淡出以及突出效果"></a>jQuery淡入淡出以及突出效果</h3><h4 id="①淡入淡出切换"><a href="#①淡入淡出切换" class="headerlink" title="①淡入淡出切换"></a>①淡入淡出切换</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 淡入</span></span><br><span class="line"><span class="title function_">fadeIn</span>([speed,[easing],[fn]])</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeIn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 淡出</span></span><br><span class="line"><span class="title function_">fadeOut</span>([speed,[easing],[fn]])</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="property">fadeOut</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 淡入淡出切换</span></span><br><span class="line"><span class="title function_">fadeToggle</span>([speed,[easing],[fn]])</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><h4 id="②渐进方式调整到指定的不透明度"><a href="#②渐进方式调整到指定的不透明度" class="headerlink" title="②渐进方式调整到指定的不透明度"></a>②渐进方式调整到指定的不透明度</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改透明度   这个速度和透明度必须写</span></span><br><span class="line"><span class="title function_">fadeTo</span>(speed,opacity,[easing],[fn])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>opacity ：透明度必须写，取值 0~1 之间</li><li>speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。必须写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeTo</span>(<span class="number">1000</span>,<span class="number">0.5</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>淡入效果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>淡出效果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>淡入淡出切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>修改透明度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 淡入 fadeIn()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeIn</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 淡出 fadeOut()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeOut</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 淡入淡出切换 fadeToggle()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">3</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//  修改透明度 fadeTo() 这个速度和透明度要必须写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeTo</span>(<span class="number">1000</span>, <span class="number">0.5</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="jQuery自定义动画animate方法"><a href="#jQuery自定义动画animate方法" class="headerlink" title="jQuery自定义动画animate方法"></a>jQuery自定义动画animate方法</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">animate</span>(params,[speed],[easing],[fn])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>params: 想要更改的样式属性，以对象形式传递，必须写。 属性名可以不用带引号， 如果是复合属性则需要采取驼峰命名法 borderLeft。其余参数都可以省略。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>动起来<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">left</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">top</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">opacity</span>: <span class="number">.4</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">width</span>: <span class="number">500</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery属性操作🔥"><a href="#jQuery属性操作🔥" class="headerlink" title="jQuery属性操作🔥"></a>jQuery属性操作🔥</h2><h3 id="获取元素固有属性值prop"><a href="#获取元素固有属性值prop" class="headerlink" title="获取元素固有属性值prop()"></a>获取元素固有属性值prop()</h3><p>所谓元素固有属性就是元素本身自带的属性，比如 <code>&lt;a&gt;</code> 元素里面的 href ，比如 <code>&lt;input&gt;</code> 元素里面的 type。</p><p>语法：<code>prop(&quot;属性&quot;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">prop</span>(<span class="string">&quot;属性&quot;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;href&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="设置元素固有属性值"><a href="#设置元素固有属性值" class="headerlink" title="设置元素固有属性值"></a>设置元素固有属性值</h3><p>语法：<code>prop(&quot;属性&quot;,&quot;属性值&quot;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">prop</span>(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;属性值&quot;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;我们都挺好~&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="获取元素自定义属性值"><a href="#获取元素自定义属性值" class="headerlink" title="获取元素自定义属性值"></a>获取元素自定义属性值</h3><p>用户自己给元素添加的属性，我们称为自定义属性。 比如给 div 添加 index =“1”。</p><p>语法：<code>attr(&quot;属性&quot;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">attr</span>(<span class="string">&quot;属性&quot;</span>)   <span class="comment">// 类似原生getAttribute()</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;index&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="设置元素自定义属性值"><a href="#设置元素自定义属性值" class="headerlink" title="设置元素自定义属性值"></a>设置元素自定义属性值</h3><p>语法：<code>attr(&quot;属性&quot;,&quot;属性值&quot;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">attr</span>(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;属性值&quot;</span>)  <span class="comment">//类似原生setAttribute()</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;index&quot;</span>,<span class="number">4</span>);</span><br><span class="line"><span class="number">123</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itcast.cn&quot;</span> <span class="attr">title</span>=<span class="string">&quot;都挺好&quot;</span>&gt;</span>都挺好<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">checked</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//1. element.prop(&quot;属性名&quot;) 获取元素固有的属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;href&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;我们都挺好&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;input&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">this</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// console.log($(&quot;div&quot;).prop(&quot;index&quot;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 元素的自定义属性 我们通过 attr()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;index&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;index&quot;</span>, <span class="number">4</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;data-index&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 数据缓存 data() 这个里面的数据是存放在元素的内存里面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>, <span class="string">&quot;andy&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;index&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="数据缓存data"><a href="#数据缓存data" class="headerlink" title="数据缓存data()"></a>数据缓存data()</h3><p>data() 方法可以在指定的元素上存取数据,并不会修改DOM元素结构，一旦页面刷新，之前存放的数据都将被移除。</p><h4 id="①附加数据语法"><a href="#①附加数据语法" class="headerlink" title="①附加数据语法"></a>①附加数据语法</h4><ul><li>语法：<code>data(&quot;name&quot;,&quot;value&quot;)</code> 向被选元素附加数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;andy&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="②获取数据语法"><a href="#②获取数据语法" class="headerlink" title="②获取数据语法"></a>②获取数据语法</h4><ul><li>语法：<code>date(&quot;name&quot;)</code> 向被选元素获取数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line"><span class="comment">// 这个方法获取data-index h5自定义属性，不用写 data- 返回的是数字型(2)</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;index&quot;</span>);</span><br></pre></td></tr></table></figure><p>同时，还可以读取H5自定义属性 data-index,得到的是数字型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. 数据缓存 data() 这个里面的数据是存放在元素的内存里面</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>, <span class="string">&quot;andy&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;index&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery内容文本值🔥"><a href="#jQuery内容文本值🔥" class="headerlink" title="jQuery内容文本值🔥"></a>jQuery内容文本值🔥</h2><p>主要针对元素的<strong>内容</strong>还有<strong>表单的值</strong>操作</p><h3 id="普通元素内容html"><a href="#普通元素内容html" class="headerlink" title="普通元素内容html()"></a>普通元素内容html()</h3><p>相当于原生<strong>innerHTML</strong></p><p>语法：</p><ul><li>获取元素的内容：<code>html()</code></li><li>设置元素的内容：<code>html(&quot;内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>();</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取过来的带的标签 &lt;span&gt;123&lt;/span&gt;</span></span><br></pre></td></tr></table></figure><h3 id="普通元素文本内容text"><a href="#普通元素文本内容text" class="headerlink" title="普通元素文本内容text()"></a>普通元素文本内容text()</h3><p>相当于原生<strong>innerText</strong></p><p>语法：</p><ul><li>获取元素的文本内容：<code>text()</code></li><li>设置元素的文本内容：<code>text(&quot;文本内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">// 123  </span></span><br><span class="line"><span class="comment">// 获取过来的不带标签 123</span></span><br></pre></td></tr></table></figure><h3 id="获取设置表单值-val"><a href="#获取设置表单值-val" class="headerlink" title="获取设置表单值 val()"></a>获取设置表单值 val()</h3><p>语法：</p><ul><li>获取表单的的值：<code>val()</code></li><li>设置表单的值：<code>val(&quot;内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;请输入内容~~~&quot;</span>);</span><br><span class="line"><span class="number">123</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 获取设置元素内容 html()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// $(&quot;div&quot;).html(&quot;123&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 获取设置元素文本内容 text()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;123&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 获取设置表单值 val()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;123&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="jQuery元素操作🔥"><a href="#jQuery元素操作🔥" class="headerlink" title="jQuery元素操作🔥"></a>jQuery元素操作🔥</h2><p>主要是<strong>遍历，创建，添加，删除元素</strong>操作</p><h3 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h3><p>jQuery隐式迭代是对同一类元素做了同样的操作，如果想要给同一类元素做不同操作，就需要用到遍历</p><h4 id="①语法一"><a href="#①语法一" class="headerlink" title="①语法一"></a>①语法一</h4><ul><li>语法一：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法一</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index,domEle</span>)&#123;xxx;&#125;)</span><br></pre></td></tr></table></figure><ul><li>each()方法遍历匹配的每一个元素。主要用DOM处理。each每一个</li><li>里面的回调函数有2个参数: index是每个元素的索引号,demEle是每个DOM元素，不是jQuery对象</li><li>所以想要使用jQuery方法，需要给这个dom元素转换为jquery对象 $(domEle)</li></ul><h4 id="②语法二"><a href="#②语法二" class="headerlink" title="②语法二"></a>②语法二</h4><ul><li>语法二：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法二</span></span><br><span class="line">$.<span class="title function_">each</span>(<span class="title class_">Object</span>,<span class="keyword">function</span>(<span class="params">index,element</span>)&#123;xxx;&#125;)</span><br></pre></td></tr></table></figure><ul><li>$.each() 方法可用于遍历任何对象，主要用于数据处理,比如数组,对象</li><li>里面的函数有2个参数: index 是每个元素的索引号,element遍历内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果针对于同一类元素做不同操作，需要用到遍历元素（类似for，但是比for强大）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. each() 方法遍历元素 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> arr = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i, domEle</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(index);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 回调函数第二个参数一定是 dom元素对象 也是自己命名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(domEle);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// domEle.css(&quot;color&quot;); dom对象没有css方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(domEle).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, arr[i]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                sum += <span class="built_in">parseInt</span>($(domEle).<span class="title function_">text</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $.each($(&quot;div&quot;), function(i, ele) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(ele);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $.each(arr, function(i, ele) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(ele);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">each</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>: <span class="string">&quot;andy&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">age</span>: <span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;, <span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出的是 name age 属性名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(ele); <span class="comment">// 输出的是 andy  18 属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);</span><br><span class="line"><span class="comment">// 动态创建一个li标签</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的li&lt;/li&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> div =$(<span class="string">&quot;&lt;div&gt;我是后来的div&lt;/div&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="①内部添加"><a href="#①内部添加" class="headerlink" title="①内部添加"></a>①内部添加</h4><p>语法：</p><ul><li>把内容放入匹配元素内部最后面：<code>element.append(&quot;内容&quot;)</code></li><li>把内容放入匹配元素内部最前面：<code>element.prepend(&quot;内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.内部添加</span></span><br><span class="line">element.<span class="title function_">append</span>(<span class="string">&quot;内容&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>(li);</span><br><span class="line"><span class="comment">// 把内容放入匹配元素内部最后面，类似原生appendChild</span></span><br><span class="line"></span><br><span class="line">element.<span class="title function_">prepend</span>(<span class="string">&quot;内容&quot;</span>)</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prepend</span>(li);</span><br><span class="line"><span class="comment">// 把内容放入匹配元素内部最前面</span></span><br></pre></td></tr></table></figure><h4 id="②外部添加"><a href="#②外部添加" class="headerlink" title="②外部添加"></a>②外部添加</h4><p>语法：</p><ul><li>外部添加把内容放到目标元素后面：<code>element.after(&quot;内容&quot;)</code></li><li>外部添加把内容放到目标元素前面：<code>element.before(&quot;内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.外部添加</span></span><br><span class="line">element.<span class="title function_">after</span>(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;.test&quot;</span>).<span class="title function_">after</span>(div);</span><br><span class="line"><span class="comment">// 把内容放入目标元素后面</span></span><br><span class="line"></span><br><span class="line">element.<span class="title function_">before</span>(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line"><span class="comment">// 把内容放入目标元素前面</span></span><br></pre></td></tr></table></figure><ul><li>内部添加元素，生成之后，它们是父子关系</li><li>外部添加元素，生成之后，它们是兄弟关系</li></ul><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>语法：</p><ul><li>删除匹配的元素(本身)：<code>element.remove()</code></li><li>删除匹配的元素集合中所有的子节点：<code>element.empty()</code></li><li>清空匹配的元素内容：<code>element.html(&quot;&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>element.<span class="title function_">remove</span>()      <span class="comment">//删除匹配的元素(本身)</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>element.<span class="title function_">empty</span>()       <span class="comment">//删除匹配元素里面的子结点(孩子)</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>element.<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>)      <span class="comment">//删除匹配元素里面的子结点(孩子)</span></span><br></pre></td></tr></table></figure><ul><li>remove 删除元素本身</li><li>empt() 和 html(“”) 作用等价，都可以删除元素黎曼的内容，只不过 html 还可以设置内容。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>原先的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>我是原先的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. 创建元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的li&lt;/li&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 添加元素</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (1) 内部添加</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;ul&quot;).append(li);  内部添加并且放到内容的最后面 </span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prepend</span>(li); <span class="comment">// 内部添加并且放到内容的最前面</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (2) 外部添加</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> div = $(<span class="string">&quot;&lt;div&gt;我是后妈生的&lt;/div&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;.test&quot;).after(div);</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;.test&quot;</span>).<span class="title function_">before</span>(div);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. 删除元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;ul&quot;).remove(); 可以删除匹配的元素 自杀</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;ul&quot;).empty(); // 可以删除匹配的元素里面的子节点 孩子</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 可以删除匹配的元素里面的子节点 孩子</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-尺寸🔥"><a href="#jQuery-尺寸🔥" class="headerlink" title="jQuery 尺寸🔥"></a>jQuery 尺寸🔥</h2><table><thead><tr><th>语法</th><th>用法</th></tr></thead><tbody><tr><td>width() / height()</td><td>取得匹配元素宽度和高度值，只算 width / height</td></tr><tr><td>innerWidth() / innerHeight()</td><td>取得匹配元素宽度和高度值，包含padding</td></tr><tr><td>outerWidth() / outerHeight()</td><td>取得匹配元素宽度和高度值，包含padding、border</td></tr><tr><td>outerWidth(true) / outerHeight(true)</td><td>取得匹配元素宽度和高度值，包含padding、border、margin</td></tr></tbody></table><ul><li>以上参数为空，则是获取相应值，返回的是数字型</li><li>如果参数为数字，则是修改相应值</li><li>参数可以不必写单位</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. width() / height() 获取设置元素 width和height大小 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">width</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).width(300);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. innerWidth() / innerHeight()  获取设置元素 width和height + padding 大小 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">innerWidth</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. outerWidth()  / outerHeight()  获取设置元素 width和height + padding + border 大小 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">outerWidth</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 4. outerWidth(true) / outerHeight(true) 获取设置 width和height + padding + border + margin</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery位置🔥"><a href="#jQuery位置🔥" class="headerlink" title="jQuery位置🔥"></a>jQuery位置🔥</h2><p>位置主要有三个： offset()、position()、scrollTop()/scrollLeft()</p><h3 id="offset-设置或获取元素偏移"><a href="#offset-设置或获取元素偏移" class="headerlink" title="offset() 设置或获取元素偏移"></a>offset() 设置或获取元素偏移</h3><p>1- offset() 方法设置或返回被选元素相对于<strong>文档</strong>的偏移坐标，<strong>跟父级没有关系</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>();</span><br><span class="line">$(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>(&#123;</span><br><span class="line">    <span class="attr">top</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="number">200</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>该方法有两个属性 left、top.<ul><li><code>offset().top</code>用于获取距离文档顶部的距离，</li><li><code>offset().left</code> 用于获取距离文档左侧的距离</li></ul></li><li>①可以设置元素的偏移：offset({ top: 10, left: 30 });</li></ul><h3 id="position-获取元素偏移"><a href="#position-获取元素偏移" class="headerlink" title="position()获取元素偏移"></a>position()获取元素偏移</h3><ul><li>position() 方法用于返回被选元素相对于<strong>带有定位的父级</strong>偏移坐标，如果父级都没有定位，则以文档为准</li><li>该方法有2个属性 left、top。<ul><li><code>position().top</code> 用于获取距离定位父级顶部的距离，</li><li><code>position().left</code> 用于获取距离定位父级左侧的距离。</li></ul></li><li>这个方法只能获取偏移，不能设置偏移</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.son&quot;</span>).<span class="title function_">position</span>();</span><br><span class="line"><span class="comment">// 这个方法只能获取偏移，不能设置偏移</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 获取设置距离文档的位置（偏移） offset</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;.son&quot;).offset(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     top: 200,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     left: 200</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 获取距离带有定位父级位置（偏移） position   如果没有带有定位的父级，则以文档为准</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 这个方法只能获取不能设置偏移</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">position</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;.son&quot;).position(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     top: 200,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     left: 200</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="scrollTop-scrollLeft-设置或获取元素被卷去的头部和左侧"><a href="#scrollTop-scrollLeft-设置或获取元素被卷去的头部和左侧" class="headerlink" title="scrollTop() / scrollLeft() 设置或获取元素被卷去的头部和左侧"></a>scrollTop() / scrollLeft() 设置或获取元素被卷去的头部和左侧</h3><ul><li><code>scrollTop()</code>方法设置或返回被选元素被卷去的头部。</li><li>不跟参数是获取，参数为不带单位的数字则是设置被卷去的头部。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面滚动事件</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">1234</span></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            height: 2000px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .back &#123;</span><br><span class="line">            position: fixed;</span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            right: 30px;</span><br><span class="line">            bottom: 100px;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .container &#123;</span><br><span class="line">            width: 900px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">            margin: 400px auto;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;back&quot;&gt;返回顶部&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function() &#123;</span><br><span class="line">            $(document).scrollTop(100);</span><br><span class="line">            // 被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()</span><br><span class="line">            // 页面滚动事件</span><br><span class="line">            var boxTop = $(&quot;.container&quot;).offset().top;</span><br><span class="line">            $(window).scroll(function() &#123;</span><br><span class="line">                // console.log(11);</span><br><span class="line">                console.log($(document).scrollTop());</span><br><span class="line">                if ($(document).scrollTop() &gt;= boxTop) &#123;</span><br><span class="line">                    $(&quot;.back&quot;).fadeIn();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $(&quot;.back&quot;).fadeOut();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            // 返回顶部</span><br><span class="line">            $(&quot;.back&quot;).click(function() &#123;</span><br><span class="line">                // $(document).scrollTop(0);</span><br><span class="line">                $(&quot;body, html&quot;).stop().animate(&#123;</span><br><span class="line">                    scrollTop: 0</span><br><span class="line">                &#125;);</span><br><span class="line">                // $(document).stop().animate(&#123;</span><br><span class="line">                //     scrollTop: 0</span><br><span class="line">                // &#125;); 不能是文档而是 html和body元素做动画</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap框架快速上手</title>
      <link href="/myblog.github.io/2022/04/24/Bootstrap%E6%A1%86%E6%9E%B6%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/myblog.github.io/2022/04/24/Bootstrap%E6%A1%86%E6%9E%B6%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Bootstrap框架快速上手"><a href="#Bootstrap框架快速上手" class="headerlink" title="Bootstrap框架快速上手"></a>Bootstrap框架快速上手</h1><p>（CDN引入）</p><ul><li>版本 Bootstrap v3.4.0</li><li>官方文档讲解较细致，但同时也较繁琐，本篇旨在记录常用样式的用法与注意点，同时参考菜鸟教程整理而成。</li><li>视频讲解地址：<a href="https://www.bilibili.com/video/BV1TU4y1p7zU?from=search&seid=4231100216030697466">乐字节念安老师B站直达</a></li></ul><h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><h2 id="下载与使用"><a href="#下载与使用" class="headerlink" title="下载与使用"></a>下载与使用</h2><ul><li>英文官网：<a href="http://getbootstrap.com/">http://getbootstrap.com/</a></li><li>中文网站：<a href="https://getbootstrap.net/">https://getbootstrap.net/</a></li></ul><ol><li>进入中文网站，选择版本 v3.4.0</li></ol><p><img src="https://img-blog.csdnimg.cn/b2158b0f0fd54adba8f009fa5def8b23.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>下载完成后<ul><li>拷贝 dist 文件夹到项目中</li><li>由于我们之后可能还会使用 LayUi 等其他插件，所以我们将 dist 改为 Bootstrap，方便辨认</li></ul></li><li>将 jQuery.js 放入我们的 js目录下<ul><li>因为 jQuery.js 并不属于 Bootstrap，所以我们放在 js 目录下</li></ul></li></ol><p><img src="https://img-blog.csdnimg.cn/01f10e9d359e414c8d9f0aa7cb647a37.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ol><li>在 html 中模板为</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使⽤X-UA-Compatible来设置IE浏览器兼容模式 最新的渲染模式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        viewport表示⽤户是否可以缩放⻚⾯；</span></span><br><span class="line"><span class="comment">        width指定视区的逻辑宽度；</span></span><br><span class="line"><span class="comment">        device-width指示视区宽度应为设备的屏幕宽度；</span></span><br><span class="line"><span class="comment">        initial-scale指令⽤于设置Web⻚⾯的初始缩放⽐例</span></span><br><span class="line"><span class="comment">        initial-scale=1则将显示未经缩放的Web⽂档</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap的HTML标准模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--载入 Bootstrap 的css--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 如果要使⽤Bootstrap的js插件，必须先调⼊jQuery --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 包括所有bootstrap的js插件或者可以根据需要使⽤的js插件调⽤　--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果要使⽤Bootstrap的js插件，必须先调用 jQuery.js</li></ul><p>说明：</p><ul><li>viewport 标记⽤于指定用户是否可以缩放Web页面</li><li>width 和 height 指令分别指定视区的逻辑宽度和⾼度。他们的值要么是以像素为单位的数字，要么是⼀个特殊的标记符号。</li><li>width 指令使用 device-width 标记可以指示视区宽度应为设备的屏幕宽度。</li><li>height 指令使用 device-height 标记指示视区⾼度为设备的屏幕⾼度。</li><li>initial-scale 指令用于设置Web页面的初始缩放比例。默认的初始缩放比例值因智能手机浏览器的不同而有所差异。通常情况下设备会在浏览器中呈现出整个Web页面，设为1.0则将显示未经缩放的Web⽂档。</li></ul><h1 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h1><h2 id="container"><a href="#container" class="headerlink" title=".container"></a>.container</h2><ul><li><code>.container</code> 类用于固定宽度并支持响应式布局的容器（网页两侧留白）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="container-fluid"><a href="#container-fluid" class="headerlink" title=".container-fluid"></a>.container-fluid</h2><ul><li><code>.container-fluid</code> 类用于 100% 宽度，占据全部视口 (viewport) 的容器（网页两侧不留白）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="栅格网格系统"><a href="#栅格网格系统" class="headerlink" title="栅格网格系统"></a>栅格网格系统</h1><ul><li>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</li><li>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</li><li>Bootstrap框架中的网格系统就是将容器平分成12份。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>4列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span>8列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>行（row）必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中</p></li><li><p>具体内容应该放置在列容器 (column) 之内</p></li><li><p>```<br>col-屏幕尺寸-列数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ，其中屏幕尺寸有</span><br><span class="line"></span><br><span class="line">  - `xs`(xsmall phones) 超小屏(自动)</span><br><span class="line">  - `sm`(small tablets) 小屏(750px)</span><br><span class="line">  - `md`(middle desktops) 中屏(970px)</span><br><span class="line">  - `lg`(larger desktops) 大屏(1170px)</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap-3.3.7-dist/css/bootstrap.min.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 布局容器 --&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;!-- 行元素 --&gt;</span><br><span class="line">        &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">            &lt;!-- 列元素 col-xs-数值 col-sm-数值 col-md-数值 col-lg-数值--&gt;</span><br><span class="line">            &lt;div class=&quot;col-md-4&quot; style=&quot;background-color: red;&quot;&gt;4列&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;col-md-8&quot; style=&quot;background-color: pink;&quot;&gt;8列&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/4e9b634425844f92851a8f52e53fcadf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="列组合"><a href="#列组合" class="headerlink" title="列组合"></a>列组合</h2><p>列组合简单理解就是更改数字来合并列(原则：列总和数不能超12，大于12则自动换到下一行)，有点类似于表格的 colspan 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>4列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span>8列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span>2列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-10&quot;</span>&gt;</span>10列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h2><ul><li>如果我们不希望相邻的两个列紧靠在一起，但又不想使用 margin 或者其他的技术手段来。这个时候就可以使用列偏移 (offset) 功能来实现。</li><li>使用列偏移也非常简单，只需要在列元素上添加类名 <code>&quot;col-md-offset-*&quot;</code> (星号代表要偏移的列组合数)，那么具有这个类名的列就会向右偏移。</li><li>例如，你在列元素上添加 <code>&quot;col-md-offset-8&quot;</code> ,表示该列向右移动8个列的宽度(要保证列与偏移列的总数不超过12，不然会导致列 断行|换行 显示)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 布局容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 行元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 列元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 &quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-md-offset-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: pink;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f9c673ea5b414d729521df2c6a3489bf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--向右浮动10列距离--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 col-md-push-10&quot;</span>&gt;</span> 1列 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--向右浮动1列距离--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 col-md-push-1&quot;</span>&gt;</span> 1列 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>列排序就是改变列的方向，就是改变左右浮动，并且设置浮动的距离。</li><li>在 Bootstrap 框架的网格系统中是通过 添加类名 <code>col-md-push-*</code> 和 <code>col-md-pull-*</code> (其中星号代表移动的列组合数)</li><li>左浮动往前 <code>pull</code> ,右浮动往后 <code>push</code></li></ul><p>我们让第二个盒子向右浮动1个列的距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 布局容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 行元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 列元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 &quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第二个盒子向右浮动1个列的距离 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 col-md-push-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: pink;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 &quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: greenyellow;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 &quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellow;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/abc74098be6c42afb18cb95284371702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>我们让第二个盒子向右浮动3个列的距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 布局容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 行元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 列元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 &quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第二个盒子向右浮动3个列的距离 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 col-md-push-3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: pink;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 &quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: greenyellow;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1 &quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellow;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8da8f9ca80d848f3a8e910cfd9d0d89c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h2><ul><li>列嵌套：你可以在一个列中添加一个或者多个行(row) 容器，然后在这个行容器中插入列。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 布局容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--先分一个8列--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: white ;&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--再分的8列里面再分3个4列--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: green;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellow;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--再分一个4列--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: blue ;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/86e84b5f49be456785e81af9cd82ad78.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul><li>Bootstrap 和普通的 HTML 页面一样，定义标题都是使用标签 <code>&lt;h1&gt; ~ &lt;h6&gt;</code> ，只不过 Bootstrap 覆盖了其默认的样式，使用其在所有浏览器下显示的效果一样，</li><li>为了让非标题元素和标题使用相同的样式，还特意定义了 <code>.h1 ~ .h6</code> 六个类名。同时后面可以紧跟着一行小的标题 <code>&lt;small&gt;&lt;/small&gt;</code> 或使用 <code>.small</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap Heading<span class="tag">&lt;<span class="name">small</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span></span><br><span class="line">    Bootstrap 标题1</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span> = <span class="string">&quot;small&quot;</span>&gt;</span> 副标题 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c219f3143f5c4d85a4a934ba4c683056.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><ul><li><p>段落是排版中的另一个重要元素之一。</p></li><li><p>通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.lead</span><br></pre></td></tr></table></figure><p>来突出强调内容(其作用就是增大文本字号，加粗文本，而且对行高和margin也做相应的处理)。可以使用以下标签给文本做突出样式处理。</p><ul><li><code>&lt;small&gt;</code> ：小号字</li><li><code>&lt;b&gt;&lt;strong&gt;</code>：加粗</li><li><code>&lt;i&gt;&lt;em&gt;</code>: 斜体</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>以后的你会感谢现在努力的你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lead&quot;</span>&gt;</span>以后的你会感谢现在努力的你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lead&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>以后的<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="comment">&lt;!-- 小号字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>你<span class="tag">&lt;/<span class="name">b</span>&gt;</span>会 <span class="comment">&lt;!-- 加粗 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>感谢<span class="tag">&lt;/<span class="name">i</span>&gt;</span>现在<span class="comment">&lt;!-- 斜体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>努力<span class="tag">&lt;/<span class="name">em</span>&gt;</span>的 <span class="comment">&lt;!-- 斜体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>你<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="comment">&lt;!-- 加粗 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="强调颜色"><a href="#强调颜色" class="headerlink" title="强调颜色"></a>强调颜色</h2><p>定义了一套类名，这里称其为强调类名，这些强调嘞都是通过颜色来表示强调，具体说明如下：</p><ul><li><code>.text-muted</code>： 提示，使用浅灰色(#999)</li><li><code>.text.primary</code> ：主要，使用蓝色(#428bca)</li><li><code>.text-success</code>：成功，使用浅绿色(#3c763d)</li><li><code>.text-info</code>：通知信息，使用浅蓝色(#31708f)</li><li><code>text-warning</code>：警告，使用黄色(#8a6d3n)</li><li><code>text-danger</code>：危险，使用褐色(#a94442)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>提示效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-primary&quot;</span>&gt;</span>主要效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-success&quot;</span>&gt;</span>成功效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-info&quot;</span>&gt;</span>信息效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-warning&quot;</span>&gt;</span>警告效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span>危险效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对齐效果"><a href="#对齐效果" class="headerlink" title="对齐效果"></a>对齐效果</h2><p>在CSS中常常使用<code>text-align</code> 来实现文本的对齐风格的设置。</p><p>其中主要有四种风格</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>左对齐</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr><tr><td>justify</td><td>两端对齐</td></tr></tbody></table><ul><li>Bootstrap 中通过定义四个类名来控制文本的对齐风格</li></ul><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td>text-left</td><td>左对齐</td></tr><tr><td>text-right</td><td>右对齐</td></tr><tr><td>text-center</td><td>居中对齐</td></tr><tr><td>text-justify</td><td>两端对齐</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-left&quot;</span>&gt;</span>我居左<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>我居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-right&quot;</span>&gt;</span>我居右<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-justify&quot;</span>&gt;</span>网格系统的实现原理非常简单，仅仅是通过定义容器大小，平分12份(也有平分成24份或32份，但12份是最常见的)，再调整内外边距，最后结合媒体查询，就制作出了强大的响应式网格系统。Bootstrap框架中的网格系统就是将容器平分成12份</span><br><span class="line">     <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>排列顺序无关紧要的一列元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>顺序至关重要的一组元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>超文本标记语言<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>层叠样式表是一种样式表语言<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="水平定义列表"><a href="#水平定义列表" class="headerlink" title="水平定义列表"></a>水平定义列表</h3><p>在原有的基础加入了一些样式，使用样式<code>class=&quot;dl-horizontal&quot;</code> 制作水平定义列表，当标题宽度超过 160px 时，将会显示三个省略号。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;dl-horizontal&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>HTML 超文本标记语言<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>HTML称为超文本标记语言，是一种标识性的语言。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>测试标题不能超过160px的宽度,否则2个点<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>我在写一个水平定义列表的效果，我在写一个水平定义列表的效果。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d73e9a11a111410db52830595cb330f7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="去点列表"><a href="#去点列表" class="headerlink" title="去点列表"></a>去点列表</h3><p>移除了默认的 <code>list-style</code> 样式，也就是去掉了原无序列表前面的点 (去掉项目符号(编号))</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-unstyled&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联列表"><a href="#内联列表" class="headerlink" title="内联列表"></a>内联列表</h3><p>给列表添加<code>class=&quot;list-inline&quot;</code>，把垂直列表换成水平列表，而且去掉项目符号(编号)，将所有元素放置于同一行。也可以说内联列表就是为了制作水平导航而生的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>java学院<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>在线课堂<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>一般在个人博客上使用的较为频繁，用于显示代码的风格。在 Bootstrap 主要提供了三种代码风格：</p><ul><li><p>使用<code>&lt;code&gt;&lt;/code&gt;</code> 来显示单行内联代码</p></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>来显示多行块代码</p><ul><li>样式<code>pre-scrollable</code>(height，max-height 高度固定为340px，超过则存在滚动条)</li></ul></li><li><p>使用<code>&lt;kbd&gt;&lt;/kbd&gt;</code> 来显示用户输入代码。如快捷键</p></li></ul><h3 id="单行内联代码"><a href="#单行内联代码" class="headerlink" title="单行内联代码"></a>单行内联代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>this is a simple code<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    使用<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ctrl+s<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>保存</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多行块代码"><a href="#多行块代码" class="headerlink" title="多行块代码"></a>多行块代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.显示代码原本格式,包括空格和换行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">        public class HelloWorld &#123;</span><br><span class="line">            public static void main(String[] args)&#123;</span><br><span class="line">                System.out.println(&quot;helloworld...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        2.显示html标签的代码需要适应字符实体  </span></span><br><span class="line"><span class="comment">        小于号（&lt;）要使用硬编码“&amp;lt;”来替代，大于号(&gt;)使用“&amp;gt;”来替代 </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;lt;</span>h2<span class="symbol">&amp;gt;</span>Hello World<span class="symbol">&amp;lt;</span>/h2<span class="symbol">&amp;gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 3.当高度超过，会存在滚动条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">&quot;pre-scrollable&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>...........<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e119a941fde04825b06337d7b2dcc6b2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Bootstrap 为表格提供了1种基础样式和4种附加样式以及1个支持响应式的表格。在使用Bootstrap得到表格过程种，只需要添加对应的类名就可以得到不同的表格风格。</p><h2 id="基础样式"><a href="#基础样式" class="headerlink" title="基础样式"></a>基础样式</h2><ul><li><code>class = &quot;table&quot;</code> ： 基础表格</li></ul><h3 id="附加样式"><a href="#附加样式" class="headerlink" title="附加样式"></a>附加样式</h3><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td>table-striped</td><td>斑马线表格</td></tr><tr><td>table-bordered</td><td>带边框的表格</td></tr><tr><td>table-hover</td><td>鼠标悬停高亮的表格</td></tr><tr><td>table-condensed</td><td>紧凑型表格，单元格没内距或者内距较其他表格的内距小</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-striped table-hover table-condensed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>面向对象<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>json<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数组<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>面向对象<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>json<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数组<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="tr、th、td样式"><a href="#tr、th、td样式" class="headerlink" title="tr、th、td样式"></a>tr、th、td样式</h3><p>提供了五种不同的类名，每种类名控制了行的不同背景颜色</p><table><thead><tr><th>类名</th><th>说明</th></tr></thead><tbody><tr><td>active</td><td>将悬停的颜色应用在行或者单元格上</td></tr><tr><td>success</td><td>表示成功的操作</td></tr><tr><td>info</td><td>表示信息变化的操作</td></tr><tr><td>warning</td><td>表示一个警告的操作</td></tr><tr><td>danger</td><td>表示一个危险的操作</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-striped table-hover table-condensed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>数据库<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>面向对象<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>json<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;danger&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数组<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;warning&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>面向对象<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>json<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数组<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2d21109d463a4a0884f56a1524df5b5b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>表单主要功能是用来和用户做交流的一个网页控件，良好的表单设计能够让网页与用户更好的沟通。表单中常见的元素主要包括：</p><ul><li>文本输入框</li><li>下拉选择框</li><li>单选按钮</li><li>复选按钮</li><li>文本域和按钮等</li></ul><h2 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h2><ul><li><code>class=&quot;form-control&quot;</code> 表单元素的样式</li><li><code>class=&quot;input-lg&quot;</code> ：表单控件较大</li><li><code>class=&quot;input-sm&quot;</code> ： 表单控件较小</li></ul><h3 id="输入框text"><a href="#输入框text" class="headerlink" title="输入框text"></a>输入框text</h3><ul><li>添加<code>class = &quot;form-controll&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  文本框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-3&quot;</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--原格式文本域--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>  /&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--表单样式文本域--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> /&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--较大文本域--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control input-lg&quot;</span> /&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--较小文本域--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control input-sm&quot;</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5c20ceb437404ba3be9eebd23573f9e1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="下拉选择框select"><a href="#下拉选择框select" class="headerlink" title="下拉选择框select"></a>下拉选择框select</h3><ul><li><p>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class = &quot;form-controll&quot;</span><br></pre></td></tr></table></figure><ul><li>多个选择设置<code>multiple=&quot;multuple&quot;</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 原格式下拉框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表单样式下拉框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表单样式下拉框提供多个选择 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multuple&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> &gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9f93b1e8f13c44ea9c03198136f64e52.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="文本域textarea"><a href="#文本域textarea" class="headerlink" title="文本域textarea"></a>文本域textarea</h3><ul><li>添加<code>class = &quot;form-controll&quot;</code></li><li>一般都是用栅格来控制文本域的大小</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 占3列的原格式文本域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 占6列的文本域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c8814c9eb5c9465883adf11c83c79fc3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="复选框checkbox"><a href="#复选框checkbox" class="headerlink" title="复选框checkbox"></a>复选框checkbox</h3><ul><li>垂直显示(给input标签加)：<code>class=&quot;checkbox&quot;</code></li><li>水平显示(给label标签加)：<code>class=&quot;checkbox-inline&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 垂直显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> &gt;</span>游戏<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> &gt;</span>学习<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 水平显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> &gt;</span>游戏</span><br><span class="line">         <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> &gt;</span>学习</span><br><span class="line">         <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/76a7dfad612f4fe59b99438825de29f6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="单选框radio"><a href="#单选框radio" class="headerlink" title="单选框radio"></a>单选框radio</h3><ul><li>垂直显示(给input标签加)：<code>class=&quot;radio&quot;</code></li><li>水平显示(给label标签加)：<code>class=&quot;radio-inline&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 垂直显示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> &gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> &gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 水平显示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> &gt;</span>男</span><br><span class="line">                 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> &gt;</span>女</span><br><span class="line">                 <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cdbf9ef0527548688b0948f7a48dd373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><h4 id="①基础样式"><a href="#①基础样式" class="headerlink" title="①基础样式"></a>①基础样式</h4><ul><li>基础样式(给button标签加)：<code>class=&quot;btn&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②附加样式"><a href="#②附加样式" class="headerlink" title="②附加样式"></a>②附加样式</h4><table><thead><tr><th>类名</th><th>样式</th></tr></thead><tbody><tr><td><code>class=&quot;btn btn-default&quot;</code></td><td>默认样式Default</td></tr><tr><td><code>class=&quot;btn btn-primary&quot;</code></td><td>首选项Primary</td></tr><tr><td><code>class=&quot;btn btn-success&quot;</code></td><td>成功Success</td></tr><tr><td><code>class=&quot;btn btn-info&quot;</code></td><td>一般信息Info</td></tr><tr><td><code>class=&quot;btn btn-warning&quot;</code></td><td>警告Warning</td></tr><tr><td><code>class=&quot;btn btn-danger&quot;</code></td><td>危险Danger</td></tr><tr><td><code>class=&quot;btn btn-link&quot;</code></td><td>链接Link</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Standard button --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>（默认样式）Default<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>（首选项）Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Indicates a successful or positive action --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>（成功）Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Contextual button for informational alert messages --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>（一般信息）Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Indicates caution should be taken with this action --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>（警告）Warning<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Indicates a dangerous or potentially negative action --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>（危险）Danger<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link&quot;</span>&gt;</span>（链接）Link<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0fe9ce4592524e3ca5e0d992775e62a5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="③多标签支持"><a href="#③多标签支持" class="headerlink" title="③多标签支持"></a>③多标签支持</h4><ul><li>多标签支持：使用 a div input 等制作按钮</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Input&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>虽然按钮类可以应用到 <code>&lt;a&gt;</code> 和 <code>&lt;button&gt;</code> 元素上，但是，导航和导航条组件只支持 <code>&lt;button&gt;</code> 元素。</li><li>如果 <code>&lt;a&gt;</code> 元素被作为按钮使用 – 并用于在当前页面触发某些功能 – 而不是用于链接其他页面或链接当前页面中的其他部分，那么，务必为其设置 <code>role=&quot;button&quot;</code> 属性。</li><li>我们总结的最佳实践是：<strong>强烈建议尽可能使用 <code>&lt;button&gt;</code> 元素</strong>来获得在各个浏览器上获得相匹配的绘制效果。</li></ul><h4 id="④设置按钮大小"><a href="#④设置按钮大小" class="headerlink" title="④设置按钮大小"></a>④设置按钮大小</h4><ul><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.btn-lg</span><br></pre></td></tr></table></figure><p>、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.btn-sm</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.btn-xs</span><br></pre></td></tr></table></figure><p>就可以获得不同尺寸的按钮</p><ul><li><code>class=&quot;btn-lg&quot;</code> 大按钮</li><li><code>class=&quot;btn-sm&quot;</code> 小按钮</li><li><code>class=&quot;btn-xs&quot;</code> 超小按钮</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span>（大按钮）Large button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span>（大按钮）Large button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>（默认尺寸）Default button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>（默认尺寸）Default button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-sm&quot;</span>&gt;</span>（小按钮）Small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-sm&quot;</span>&gt;</span>（小按钮）Small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>（超小尺寸）Extra small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-xs&quot;</span>&gt;</span>（超小尺寸）Extra small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1b77051226e849de966df87d7110a6db.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="⑤按钮禁用"><a href="#⑤按钮禁用" class="headerlink" title="⑤按钮禁用"></a>⑤按钮禁用</h4><ul><li>为 <code>&lt;button&gt;</code> 元素添加 <code>disabled=&quot;disabled&quot;</code> 属性，使其表现出禁用状态。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>Primary button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-lg&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单布局"><a href="#表单布局" class="headerlink" title="表单布局"></a>表单布局</h2><h3 id="垂直表单"><a href="#垂直表单" class="headerlink" title="垂直表单"></a>垂直表单</h3><p>基本的表单结构是 Bootstrap 自带的，个别的表单控件自动接收一些全局样式。下面列出了创建基本表单的步骤：</p><ul><li>向父元素<code>&lt;form&gt;</code> 元素 添加 <code>role=&quot;form&quot;</code></li><li>把标签和控件放在一个带有 <code>class=&quot;form-group&quot;</code> 的<code>&lt;div&gt;</code> 中。这是获取最佳间距所必需的</li><li>向所有的文本元素 <code>&lt;input&gt;</code> 、<code>&lt;textarea&gt;</code> 、<code>select</code> 添加 <code>class=&quot;form-control&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>用户信息表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表单中的表单元素组 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label col-md-2&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;upwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label col-md-2&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 多选框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label col-md-2&quot;</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>敲代码</span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span>跳舞</span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 下拉选择框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label col-md-2&quot;</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 文本框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label col-md-2&quot;</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-md-offset-5&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/45b65faabd3d4bc0a1be541b049ae5b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="内联表单"><a href="#内联表单" class="headerlink" title="内联表单"></a>内联表单</h3><ul><li>如果需要创建一个表单，它的所有元素是内联的，向左对齐的，标签是并排的，请向 <code>&lt;form&gt;</code> 标签添加 <code>class=&quot;form-inline&quot;</code>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内联表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userPwd&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userPwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/030c1d275b3d433b862c717e61f71b81.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h1><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><ul><li>在我们下载的 Bootstrap 加压文件中有 fonts 文件夹，里面就是我们的字体图标</li><li>只需将 fonts 文件夹复制到我们的项目红，我们就可以使用字体图标了</li><li>语法：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;字体图标类名&quot;</span>&gt;</span> 字体图标 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>字体图标类名地址查看，需要时去复制即可：<a href="https://www.runoob.com/try/demo_source/bootstrap3-glyph-icons.htm">https://www.runoob.com/try/demo_source/bootstrap3-glyph-icons.htm</a></li></ul><h2 id="缩略图使用"><a href="#缩略图使用" class="headerlink" title="缩略图使用"></a>缩略图使用</h2><ul><li>大多数站点都需要在网格中布局图像、视频、文本等。Bootstrap 通过缩略图为此提供了一种简便的方式</li><li>使用 Bootstrap 创建缩略图的步骤如下：<ul><li>在图像周围添加带有 <code>class=&quot;thumbnail&quot;</code> 的 <code>&lt;a&gt;</code> 标签。</li><li>这会添加四个像素的内边距（padding）和一个灰色的边框。</li><li>当鼠标悬停在图像上时，会动画显示出图像的轮廓。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6 col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/timg.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;通用的占位符缩略图&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a8bda38a7e5340118c119257137f2b25.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="自定义内容"><a href="#自定义内容" class="headerlink" title="自定义内容"></a>自定义内容</h2><p>现在我们有了一个基本的缩略图，我们可以向缩略图添加各种 HTML 内容，比如标题、段落或按钮。具体步骤如下：</p><ul><li>把带有 <code>class=&quot;thumbnail&quot;</code> 的 <code>&lt;a&gt;</code> 标签改为 <code>&lt;div&gt;</code>。</li><li>在该 <code>&lt;div&gt;</code>内，您可以添加任何您想要添加的东西。由于这是一个 <code>&lt;div&gt;</code>，我们可以使用默认的基于 span 的命名规则来调整大小。</li><li>如果您想要给多个图像进行分组，请把它们放置在一个无序列表中，且每个列表项向左浮动。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一个缩略图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/timg.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>高圆圆<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>出生于北京市，中国内地影视女演员、模特。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>喜欢</span><br><span class="line">       <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-pencil&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>评论</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第二个缩略图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/timg.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>高圆圆<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>出生于北京市，中国内地影视女演员、模特。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>喜欢</span><br><span class="line">       <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-pencil&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>评论</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第三个缩略图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/timg.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>高圆圆<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>出生于北京市，中国内地影视女演员、模特。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>喜欢</span><br><span class="line">       <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-pencil&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>评论</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/45b377211557450396b4ccea1eebd73f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h2><ul><li>面板组件用于把 DOM 组件插入到一个盒子中</li><li>创建一个基本的面板，只需要向 <code>&lt;div&gt;</code> 元素添加 <code>class=&quot;panel panel-default&quot;</code> 即可</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        这是一个基本的面板</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认的 <code>.panel</code> 组件所做的只是设置基本的边框 border 和 內补 padding 来包含内容</p><h3 id="面板-1"><a href="#面板-1" class="headerlink" title="面板"></a>面板</h3><ul><li>给盒子添加 <code>class=&quot;panel-heading&quot;</code> 可以很简单地向面板添加标题。</li><li>给盒子添加 <code>class=&quot;panel-body&quot;</code> 可以向面板添加主题内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-warning&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>明星合集<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/timg.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>高圆圆<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>出生于北京市，中国内地影视女演员、模特。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>喜欢<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-pencil&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>评论</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e76bc0cdc17f431a9ef071205d9a33b9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="导航元素"><a href="#导航元素" class="headerlink" title="导航元素"></a>导航元素</h1><h2 id="标签式的导航菜单"><a href="#标签式的导航菜单" class="headerlink" title="标签式的导航菜单"></a>标签式的导航菜单</h2><ul><li>给一个无序列表添加 <code>class=&quot;nav nav-tabs&quot;</code></li><li>给任意一个 li 添加 <code>class=&quot;active&quot;</code>（表示选中这个导航）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标签式的导航菜单<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>SVN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/98d1b9c1b1304045a32ff3d5751fd2e3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="胶囊式的导航菜单"><a href="#胶囊式的导航菜单" class="headerlink" title="胶囊式的导航菜单"></a>胶囊式的导航菜单</h2><ul><li>给一个无序列表添加 <code>class=&quot;nav nav-pills&quot;</code></li><li>给任意一个 li 添加 <code>class=&quot;active&quot;</code>（表示选中这个导航）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>基本的胶囊式导航菜单<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>SVN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/637ab52c9b94464fbfb09bdccaf4966f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="①垂直的胶囊式导航菜单"><a href="#①垂直的胶囊式导航菜单" class="headerlink" title="①垂直的胶囊式导航菜单"></a>①垂直的胶囊式导航菜单</h3><ul><li>给一个无序列表添加 <code>class=&quot;nav nav-pills&quot;</code> 的同时添加<code>class=&quot;nav-stacked&quot;</code></li><li>给任意一个 li 添加 <code>class=&quot;active&quot;</code>（表示选中这个导航）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>基本的垂直的胶囊式导航菜单<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills nav-stacked&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>SVN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/835a5412c53d45a99e68d39b4fb38c03.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="两端对齐导航"><a href="#两端对齐导航" class="headerlink" title="两端对齐导航"></a>两端对齐导航</h2><ul><li>让标签式导航两端对齐：给一个无序列表添加 <code>class=&quot;nav nav-tabs nav-justified&quot;</code></li><li>让胶囊式导航两端对齐：给一个无序列表添加 <code>class=&quot;nav nav-pills nav-justified&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>两端对齐的标签导航元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-pills nav-justified&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>SVN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>两端对齐的胶囊导航元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs nav-justified&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>SVN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>iOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>VB.Net<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/49b088f619c94cda8df345896565943c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td>.nav nav-tabs</td><td>标签页</td></tr><tr><td>.nav nav-pills</td><td>胶囊式标签页</td></tr><tr><td>.nav nav-pills nav-stacked</td><td>胶囊式标签页以垂直方向堆叠排列的</td></tr><tr><td>.nav-justified</td><td>两端对齐的标签页</td></tr></tbody></table><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><h2 id="默认的分页"><a href="#默认的分页" class="headerlink" title="默认的分页"></a>默认的分页</h2><ul><li>给一个无序列表添加<code>class=&quot;pagination&quot;</code></li><li>给任意一个 li 添加 <code>class=&quot;active&quot;</code>（表示选中这一页）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>分页导航<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h2><ul><li>给一个无序列表添加<code>class=&quot;pager&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>翻页导航<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f2ee8de05cbe4a4aa3a7b7854b97c8a0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>我们在使用 Bootstrap 插件时</p><ul><li>引入 Bootstrap 的核心 CSS 文件</li><li>引入 jquery 的核心 js 文件,需要在 bootstrap 的 js 之前引入</li><li>引入 Bootstrap 的核心 js 文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Bootstrap 的核心CSS文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bootstrap-3.3.7-dist/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入jquery的核心js文件,需要在bootstrap的js之前引入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.4.1.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Bootstrap 的核心js文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap-3.3.7-dist/js/bootstrap.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><ul><li>使用一个 <code>class=&quot;dropdown&quot;</code> 的<code>div</code> 包裹整个下拉框</li><li>使用一个 <code>class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;</code> 的按钮作为父菜单<ul><li>给父菜单后设置一个下拉箭头</li></ul></li><li>使用一个 <code>class=&quot;dropdown-menu&quot;</code> 的 ul 列表作为下拉菜单项<ul><li>使用 <code>class=&quot;dropdown-header&quot;</code> 的 li 作为分组的标题</li><li>使用 <code>class=&quot;driver&quot;</code> 的 li 作为下拉分割线</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.使用一个类名为dropdown 或 btn-group 的div包裹整个下拉框</span></span><br><span class="line"><span class="comment"> &lt;div class=&quot;dropdown&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> 默认下拉框向上为 dropup ,向下为 dropdown</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 使用 button 作为父菜单,使用类名: dropdown-toggle 和自定义 data-toggle属性</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">喜欢的频道</span><br><span class="line"><span class="comment">&lt;!-- 设置下拉箭头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 下拉菜单项使用一个 ul 列表,并且定义一个类名为 dropdown-menu --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 分组标题: li 添加类名 dropdown-header  来实现分组的功能--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-header&quot;</span>&gt;</span>科普<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>人与自然<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 分割线: li 添加类名 driver 来实现下拉分割线的功能 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-header&quot;</span>&gt;</span>影视<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>快乐大本营<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>暴走大事件<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>木鱼水心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/76ec21084f8e4a46a6dcee8954499bab.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h2><ul><li>使用方式一：<strong>通过 data 属性</strong>：在控制器元素（比如按钮或者链接）上设置属性<code>data-toggle=&quot;modal&quot;</code> ，同时设置 <code>data-target=&quot;#identifier&quot;</code> 或<code>href=&quot;#identifier&quot;</code> 来指定要切换的特定的模态框(带有 <code>id =&quot;identifier&quot;</code> )</li><li>使用方式二：<strong>通过 JavaScript</strong>：使用这种技术，可以通过简单的一行 JavaScript 来调用带有 <code>id=&quot;identifier&quot;</code> 的模态框：</li></ul><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 按钮触发模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myModal&quot;</span>&gt;</span>开始演示模态框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModalLabel&quot;</span>&gt;</span>模态框（Modal）标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span>在这里添加一些文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0910114b20a449edb038c4b93b9b72fd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>调用带有 <code>id=&quot;identifier&quot;</code> 的模态框：</p><ul><li>打开模态框：<code>$(&#39;#identifier&#39;).modal(&#39;show&#39;)</code></li><li>关闭模态框：<code>$(&#39;#identifier&#39;).modal(&#39;hide&#39;)</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>开始演示模态框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModalLabel&quot;</span>&gt;</span>模态框（Modal）标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span>在这里添加一些文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit_btn&quot;</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 绑定按钮的点击事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//手动打开模态框</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#myModal&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;show&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//关闭模态框</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#submit_btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//手动关闭模态框</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#myModal&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1e2895313cba47c3b2f1d83adeb29989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/8e7503bff3df4cea937f3b541ab93e2d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="模态框常用改法"><a href="#模态框常用改法" class="headerlink" title="模态框常用改法"></a>模态框常用改法</h2><p>提供一个模态框的常用改法模板：以添加用户为例(直接复制修改即可)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>开始演示模态框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模态框（Modal） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myModalLabel&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModalLabel&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label col-md-2&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;upwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label col-md-2&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upwd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit_btn&quot;</span>&gt;</span>提交更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 绑定按钮的点击事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//手动打开模态框</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#myModal&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;show&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//关闭模态框</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#submit_btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//手动关闭模态框</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#myModal&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5941439744ea4fef8101a83c2fdb5501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶班之DOM技术(四)</title>
      <link href="/myblog.github.io/2022/04/24/JavaScript%E8%BF%9B%E9%98%B6%E7%8F%AD%E4%B9%8BDOM%E6%8A%80%E6%9C%AF(%E5%9B%9B)/"/>
      <url>/myblog.github.io/2022/04/24/JavaScript%E8%BF%9B%E9%98%B6%E7%8F%AD%E4%B9%8BDOM%E6%8A%80%E6%9C%AF(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="目录总览"><a href="#目录总览" class="headerlink" title="目录总览"></a>目录总览</h1><p><img src="https://img-blog.csdnimg.cn/f073657f05c248ffa8056bf437e66edb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h1><h2 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h2><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口</p><p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p><p><img src="https://img-blog.csdnimg.cn/fc42557d25be4683881c2f0f231bc778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>文档：一个页面就是一个文档，DOM中使用doucument来表示</li><li>元素：页面中的所有标签都是元素，DOM中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签，属性，文本，注释等），DOM中使用node表示</li></ul><p>DOM 把以上内容都看做是对象</p><h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><h2 id="如何获取页面元素"><a href="#如何获取页面元素" class="headerlink" title="如何获取页面元素"></a>如何获取页面元素</h2><p>DOM在我们实际开发中主要用来操作元素。</p><p>我们如何来获取页面中的元素呢?</p><p>获取页面中的元素可以使用以下几种方式:</p><ul><li>根据 ID 获取</li><li>根据标签名获取</li><li>通过 HTML5 新增的方法获取</li><li>特殊元素获取</li></ul><h2 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h2><p>使用 <code>getElementByld()</code> 方法可以获取带ID的元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doucument.<span class="title function_">getElementByld</span>(<span class="string">&#x27;id名&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>console.dir()</code> 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;time&quot;</span>&gt;<span class="number">2019</span>-<span class="number">9</span>-<span class="number">9</span>&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.因为我们文档页面从上往下加载，所以得先有标签，所以script写在标签下面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.get 获得 element 元素 by 通过 驼峰命名法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.参数 id是大小写敏感的字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 4.返回的是一个元素对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> timer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 5. console.dir 打印我们的元素对象，更好的查看里面的属性和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h2><p>根据<strong>标签名</strong>获取，使用 <code>getElementByTagName()</code> 方法可以返回带有指定标签名的<strong>对象的集合</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doucument.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历</li><li>得到元素对象是动态的</li><li>返回的是获取过来元素对象的集合，以伪数组的形式存储</li><li>如果获取不到元素，则返回为空的伪数组(因为获取不到对象)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.返回的是获取过来元素对象的集合 以伪数组的形式存储</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.依次打印,遍历</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.如果页面中只有 1 个 li，返回的还是伪数组的形式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 4.如果页面中没有这个元素，返回的是空伪数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="根据标签名获取-1"><a href="#根据标签名获取-1" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h2><p>还可以根据标签名获取某个元素（父元素）内部所有指定标签名的子元素,获取的时候不包括父元素自己</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ol.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意：父元素必须是单个对象(必须指明是哪一个元素对象)，获取的时候不包括父元素自己</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//element.getElementsByTagName(&#x27;标签名&#x27;); 父元素必须是指定的单个元素</span></span><br><span class="line">    <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ol&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="通过H5新增方法获取"><a href="#通过H5新增方法获取" class="headerlink" title="通过H5新增方法获取"></a>通过H5新增方法获取</h2><h3 id="①getElementsByClassName"><a href="#①getElementsByClassName" class="headerlink" title="①getElementsByClassName"></a>①getElementsByClassName</h3><p>根据类名返回元素对象合集</p><ul><li><code>document.getElementsByClassName(&#39;类名&#39;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="②document-querySelector"><a href="#②document-querySelector" class="headerlink" title="②document.querySelector"></a>②document.querySelector</h3><p>根据指定选择器返回第一个元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;选择器&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切记里面的选择器需要加符号 </span></span><br><span class="line"><span class="comment">// 类选择器.box </span></span><br><span class="line"><span class="comment">// id选择器 #nav</span></span><br><span class="line"><span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="③document-querySelectorAll"><a href="#③document-querySelectorAll" class="headerlink" title="③document.querySelectorAll"></a>③document.querySelectorAll</h3><p>根据指定选择器返回所有元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;选择器&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">querySelector` 和 `querySelectorAll` 里面的选择器需要加符号,比如: `document.querySelector(&#x27;#nav&#x27;);</span><br></pre></td></tr></table></figure><h3 id="④例子"><a href="#④例子" class="headerlink" title="④例子"></a>④例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span></span><br><span class="line">    <span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxs);</span><br><span class="line">    <span class="comment">// 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav</span></span><br><span class="line">    <span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(firstBox);</span><br><span class="line">    <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(nav);</span><br><span class="line">    <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(li);</span><br><span class="line">    <span class="comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span><br><span class="line">    <span class="keyword">var</span> allBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(allBox);</span><br><span class="line">    <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="获取特殊元素"><a href="#获取特殊元素" class="headerlink" title="获取特殊元素"></a>获取特殊元素</h2><h3 id="①获取body元素"><a href="#①获取body元素" class="headerlink" title="①获取body元素"></a>①获取body元素</h3><p>返回body元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>;</span><br></pre></td></tr></table></figure><h3 id="②获取html元素"><a href="#②获取html元素" class="headerlink" title="②获取html元素"></a>②获取html元素</h3><p>返回html元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br></pre></td></tr></table></figure><h1 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h1><h2 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h2><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解： 触发— 响应机制。</p><p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p><h2 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h2><ol><li>事件源(谁)</li><li>事件类型(什么事件)</li><li>事件处理程序(做啥)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 点击一个按钮，弹出对话框</span></span><br><span class="line">    <span class="comment">// 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span></span><br><span class="line">    <span class="comment">//(1) 事件源 事件被触发的对象   谁  按钮</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">    <span class="comment">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span></span><br><span class="line">    <span class="comment">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span></span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;点秋香&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h2><ol><li>获取事件源</li><li>注册事件(绑定事件)</li><li>添加事件处理程序(采取函数赋值形式)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 执行事件步骤</span></span><br><span class="line">    <span class="comment">// 点击div 控制台输出 我被选中了</span></span><br><span class="line">    <span class="comment">// 1. 获取事件源</span></span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="comment">// 2.绑定事件 注册事件</span></span><br><span class="line">    <span class="comment">// div.onclick </span></span><br><span class="line">    <span class="comment">// 3.添加事件处理程序 </span></span><br><span class="line">    div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被选中了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h1 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h1><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。注意以下都是属性</p><h2 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h2><p>从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">innerText</span></span><br></pre></td></tr></table></figure><p>起始位置到终止位置的全部内容，包括HTML标签，同时保留空格和换行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">innerHTML</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是文字</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// innerText 和 innerHTML的区别 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. innerText 不识别html标签,去除空格和换行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerText</span> = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. innerHTML 识别html标签 保留空格和换行的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 这两个属性是可读写的  可以获取元素里面的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f3394f40561e45c299c09d7bbecdb513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="改变元素属性"><a href="#改变元素属性" class="headerlink" title="改变元素属性"></a>改变元素属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// img.属性</span></span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">input.<span class="property">value</span> = <span class="string">&quot;xxx&quot;</span>;<span class="comment">//表单里的值，文字通过value来修改的</span></span><br><span class="line">input.<span class="property">type</span> = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">input.<span class="property">checked</span> = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">input.<span class="property">selected</span> = <span class="literal">true</span> / <span class="literal">false</span>;</span><br><span class="line">input.<span class="property">disabled</span> = <span class="literal">true</span> / <span class="literal">false</span>; <span class="comment">//表单被禁用</span></span><br></pre></td></tr></table></figure><h2 id="改变样式属性"><a href="#改变样式属性" class="headerlink" title="改变样式属性"></a>改变样式属性</h2><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><ul><li>行内样式操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// element.style</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;250px&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>类名样式操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// element.className</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>JS里面的样式采取驼峰命名法，比如 fontSize ，backgroundColor</li><li>JS 修改 style 样式操作 ，产生的是行内样式，CSS权重比较高</li><li>如果样式修改较多，可以采取操作类名方式更改元素样式</li><li>class 因为是个保留字，因此使用<code>className</code>来操作元素类名属性</li><li>className 会直接更改元素的类名，会覆盖原先的类名</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> test = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        test.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.backgroundColor = &#x27;purple&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.color = &#x27;#fff&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.fontSize = &#x27;25px&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.style.marginTop = &#x27;100px&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 让我们当前元素的类名改为了 change</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.className = &#x27;change&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;first change&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://img-blog.csdnimg.cn/f6835ead437948e3804c4432ceb812ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h2><p>如果有同一组元素，我们相要某一个元素实现某种样式，需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式 （留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 获取所有按钮元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// btns得到的是伪数组  里面的每一个元素 btns[i]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    btns[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// (2) 然后才让当前的元素背景颜色为pink 留下我自己</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//2. 首先先排除其他人，然后才设置自己的样式 这种排除其他人的思想我们成为排他思想</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c4ab0beac7444b208441727a380b437e.gif#pic_center" alt="在这里插入图片描述"></p><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><ul><li>获取内置属性值(元素本身自带的属性)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.属性;</span><br></pre></td></tr></table></figure><ul><li>获取自定义的属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.getAttribute(&#x27;属性&#x27;);</span><br></pre></td></tr></table></figure><h3 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h3><ul><li>设置内置属性值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.属性 = &#x27;值&#x27;;</span><br></pre></td></tr></table></figure><ul><li>主要设置自定义的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;属性&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;属性&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 获取元素的属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// (1) element.属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">id</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//(2) element.getAttribute(&#x27;属性&#x27;)  get得到获取 attribute 属性的意思 我们程序员自己添加的属性我们称为自定义属性 index</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 设置元素属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// (1) element.属性= &#x27;值&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">id</span> = <span class="string">&#x27;test&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">className</span> = <span class="string">&#x27;navs&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// (2) element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);  主要针对于自定义属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>); <span class="comment">// class 特殊  这里面写的就是class 不是className</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3 移除属性 removeAttribute(属性)    </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h2><p>自定义属性目的：</p><ul><li>保存并保存数据，有些数据可以保存到页面中而不用保存到数据库中</li><li>有些自定义属性很容易引起歧义，不容易判断到底是内置属性还是自定义的，所以H5有了规定</li></ul><h3 id="设置H5自定义属性"><a href="#设置H5自定义属性" class="headerlink" title="设置H5自定义属性"></a>设置H5自定义属性</h3><p>H5规定自定义属性 <code>data-</code>开头作为属性名并赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-index = <span class="string">&quot;1&quot;</span>&gt;&lt;/&gt;</span><br><span class="line"><span class="comment">// 或者使用JavaScript设置</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="获取H5自定义属性"><a href="#获取H5自定义属性" class="headerlink" title="获取H5自定义属性"></a>获取H5自定义属性</h3><ul><li>兼容性获取 <code>element.getAttribute(&#39;data-index&#39;)</code></li><li>H5新增的：<code>element.dataset.index</code> 或<code>element.dataset[&#39;index&#39;]</code> IE11才开始支持</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">getTime</span>=<span class="string">&quot;20&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-list-name</span>=<span class="string">&quot;andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;getTime&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-time&#x27;</span>, <span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-list-name&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">index</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;index&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">listName</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;listName&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><p>获取元素通常使用两种方式：</p><table><thead><tr><th>1.利用DOM提供的方法获取元素</th><th>2.利用节点层级关系获取元素</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>利用父子兄节点关系获取元素</td></tr><tr><td>document.getElementsByTagName()</td><td>逻辑性强，但是兼容性较差</td></tr><tr><td>document.querySelector 等</td><td></td></tr><tr><td>逻辑性不强，繁琐</td><td></td></tr></tbody></table><p>这两种方式都可以获取元素节点，我们后面都会使用，但是节点操作更简单</p><p>一般的，节点至少拥有三个基本属性</p><h2 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h2><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p><p>HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p><p><img src="https://img-blog.csdnimg.cn/f176c025b5ff43468d53ed4d49259812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>一般的，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><ul><li>元素节点：nodeType 为1</li><li>属性节点：nodeType 为2</li><li>文本节点：nodeType 为3(文本节点包括文字、空格、换行等)</li></ul><p>我们在实际开发中，节点操作主要操作的是<strong>元素节点</strong></p><p>利用 DOM 树可以把节点划分为不同的层级关系，常见的是<strong>父子兄层级关系</strong>。</p><h2 id="父级节点"><a href="#父级节点" class="headerlink" title="父级节点"></a>父级节点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">parentNode</span></span><br></pre></td></tr></table></figure><ul><li><code>parentNode</code>属性可以返回某节点的父结点，注意是最近的一个父结点</li><li>如果指定的节点没有父结点则返回null</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 节点的优点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;erweima&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 父节点 parentNode</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> erweima = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.erweima&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var box = document.querySelector(&#x27;.box&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回为 null</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(erweima.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="子结点"><a href="#子结点" class="headerlink" title="子结点"></a>子结点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="title function_">childNodes</span>(标准)</span><br></pre></td></tr></table></figure><ul><li><code>parentNode.childNodes</code> 返回包含指定节点的子节点的集合，该集合为即时更新的集合</li><li>返回值包含了所有的子结点，包括元素节点，文本节点等</li><li>如果只想要获得里面的元素节点，则需要专门处理。所以我们一般不提倡使用<code>childNodes</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="title function_">children</span>(非标准)</span><br></pre></td></tr></table></figure><ul><li><code>parentNode.children</code> 是一个只读属性，返回所有的子元素节点</li><li>它只返回子元素节点，其余节点不返回 （<strong>这个是我们重点掌握的</strong>）</li><li>虽然 children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// DOM 提供的方法（API）获取</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> lis = ul.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeType</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">1</span>].<span class="property">nodeType</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="第一个子结点"><a href="#第一个子结点" class="headerlink" title="第一个子结点"></a>第一个子结点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="property">firstChild</span></span><br></pre></td></tr></table></figure><ul><li><code>firstChild</code> 返回第一个子节点，找不到则返回null</li><li>同样，也是包含所有的节   点</li></ul><h3 id="最后一个子结点"><a href="#最后一个子结点" class="headerlink" title="最后一个子结点"></a>最后一个子结点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="property">lastChild</span></span><br></pre></td></tr></table></figure><ul><li><code>lastChild</code> 返回最后一个子节点，找不到则返回null</li><li>同样，也是包含所有的节点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. firstChild 第一个子节点 不管是文本节点还是元素节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstChild</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">lastChild</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. firstElementChild 返回第一个子元素节点 ie9才支持</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstElementChild</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">lastElementChild</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 实际开发的写法  既没有兼容性问题又返回第一个子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[<span class="number">0</span>]);<span class="comment">//第一个子元素节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[ol.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>]);<span class="comment">//最后一个子元素节点</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dde9c5a059d34c8da3641043a4ecb7df.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="第一个子结点-兼容性"><a href="#第一个子结点-兼容性" class="headerlink" title="第一个子结点(兼容性)"></a>第一个子结点(兼容性)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="property">firstElementChild</span></span><br></pre></td></tr></table></figure><ul><li><code>firstElementChild</code> 返回第一个子节点，找不到则返回null</li><li>有兼容性问题，IE9以上才支持</li></ul><h3 id="最后一个子结点-兼容性"><a href="#最后一个子结点-兼容性" class="headerlink" title="最后一个子结点(兼容性)"></a>最后一个子结点(兼容性)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="property">lastElementChild</span></span><br></pre></td></tr></table></figure><ul><li><code>lastElementChild</code> 返回最后一个子节点，找不到则返回null</li><li>有兼容性问题，IE9以上才支持</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和 lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？</p><blockquote><p>解决方案</p></blockquote><ul><li><p>如果想要第一个子元素节点，可以使用 <code>parentNode.chilren[0]</code></p></li><li><p>如果想要最后一个子元素节点，可以使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组元素个数减1 就是最后一个元素的索引号</span></span><br><span class="line">parentNode.<span class="property">chilren</span>[parentNode.<span class="property">chilren</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>示例：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.firstChild 获取第一个子结点的，包含文本结点和元素结点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstChild</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 返回的是文本结点 #text(第一个换行结点)</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">lastChild</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 返回的是文本结点 #text(最后一个换行结点)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. firstElementChild 返回第一个子元素结点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstElementChild</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;li&gt;我是li1&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第2个方法有兼容性问题，需要IE9以上才支持</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.实际开发中，既没有兼容性问题，又返回第一个子元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;li&gt;我是li1&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[<span class="number">3</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;li&gt;我是li4&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当里面li个数不唯一时候，需要取到最后一个结点时这么写</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[ol.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h2><h3 id="下一个兄弟节点"><a href="#下一个兄弟节点" class="headerlink" title="下一个兄弟节点"></a>下一个兄弟节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">nextSibling</span></span><br></pre></td></tr></table></figure><ul><li><code>nextSibling</code> 返回当前元素的下一个兄弟元素节点，找不到则返回null</li><li>同样，也是包含所有的节点</li></ul><h3 id="上一个兄弟节点"><a href="#上一个兄弟节点" class="headerlink" title="上一个兄弟节点"></a>上一个兄弟节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">previousSibling</span></span><br></pre></td></tr></table></figure><ul><li><code>previousSibling</code> 返回当前元素上一个兄弟元素节点，找不到则返回null</li><li>同样，也是包含所有的节点</li></ul><h3 id="下一个兄弟节点-兼容性"><a href="#下一个兄弟节点-兼容性" class="headerlink" title="下一个兄弟节点(兼容性)"></a>下一个兄弟节点(兼容性)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">nextElementSibling</span></span><br></pre></td></tr></table></figure><ul><li><code>nextElementSibling</code> 返回当前元素下一个兄弟元素节点，找不到则返回null</li><li>有兼容性问题，IE9才支持</li></ul><h3 id="上一个兄弟节点-兼容性"><a href="#上一个兄弟节点-兼容性" class="headerlink" title="上一个兄弟节点(兼容性)"></a>上一个兄弟节点(兼容性)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">previousElementSibling</span></span><br></pre></td></tr></table></figure><ul><li><code>previousElementSibling</code> 返回当前元素上一个兄弟元素节点，找不到则返回null</li><li>有兼容性问题，IE9才支持</li></ul><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1.nextSibling 下一个兄弟节点 包含元素节点或者 文本节点等等</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextSibling</span>);<span class="comment">// #text</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousSibling</span>);<span class="comment">// #text</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. nextElementSibling 得到下一个兄弟元素节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextElementSibling</span>);<span class="comment">//&lt;span&gt;我是span&lt;/span&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousElementSibling</span>);<span class="comment">//null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>如何解决兼容性问题 ？</strong></p><p>答：自己封装一个兼容性的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNextElementSibling</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> el = element;</span><br><span class="line">    <span class="keyword">while</span>(el = el.<span class="property">nextSibling</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(el.<span class="property">nodeType</span> === <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> el;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tagName&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><code>document.createElement()</code> 方法创建由 tagName 指定的HTML 元素</li><li>因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为<strong>动态创建元素节点</strong></li></ul><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">appendChild</span>(child)</span><br></pre></td></tr></table></figure><ul><li><code>node.appendChild()</code> 方法将一个节点添加到指定父节点的子节点列表<strong>末尾</strong>。类似于 CSS 里面的 after 伪元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">insertBefore</span>(child,指定元素)</span><br></pre></td></tr></table></figure><ul><li><code>node.insertBefore()</code> 方法将一个节点添加到父节点的指定子节点<strong>前面</strong>。类似于 CSS 里面的 before 伪元素。</li></ul><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 创建节点元素节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素  类似于数组中的push</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 先获取父亲ul</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ul.<span class="title function_">appendChild</span>(li);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> lili = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ul.<span class="title function_">insertBefore</span>(lili, ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 4. 我们想要页面添加一个新的元素分两步: 1. 创建元素 2. 添加元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">removeChild</span>(child)</span><br></pre></td></tr></table></figure><ul><li><code>node.removeChild()</code>方法从 DOM 中删除一个子节点，返回删除的节点</li></ul><p>javascript:;//组织链接跳转</p><h3 id="复制节点-克隆节点"><a href="#复制节点-克隆节点" class="headerlink" title="复制节点(克隆节点)"></a>复制节点(克隆节点)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">cloneNode</span>()</span><br></pre></td></tr></table></figure><ul><li><code>node.cloneNode()</code>方法返回调用该方法的节点的一个副本。 也称为克隆节点/拷贝节点</li><li>如果括号参数为空或者为 false ，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点</li><li>如果括号参数为 true ，则是深度拷贝，会复制节点本身以及里面所有的子节点</li></ul><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> lili = ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ul.<span class="title function_">appendChild</span>(lili);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/78d882e140344b47b288cbf90fd79a50.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>三种动态创建元素的区别</p><ul><li>doucument.write()</li><li>element.innerHTML</li><li>document.createElement()</li></ul><p>区别：</p><ul><li><code>document.write()</code> 是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘</li><li><code>innerHTML</code> 是将内容写入某个 DOM 节点，不会导致页面全部重绘</li><li><code>innerHTML</code> 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;innner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;create&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. innerHTML 创建元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.1 innerHTML 用拼接字符串方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            inner.<span class="property">innerHTML</span> += <span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.2 innerHTML 用数组形式拼接</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            arr.<span class="title function_">push</span>(<span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        inner.<span class="property">innerHTML</span> = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3.document.createElement() 创建元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> create = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.create&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        create.<span class="title function_">appendChild</span>(a);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li><code>createElement()</code>创建多个元素效率稍低一点点，但是结构更清晰</li></ul><blockquote><p>总结：不同浏览器下， innerHTML 效率要比 createElement 高</p></blockquote><h1 id="DOM核心"><a href="#DOM核心" class="headerlink" title="DOM核心"></a>DOM核心</h1><p>对于DOM操作，我们主要针对子元素的操作，主要有</p><ul><li>创建</li><li>增</li><li>删</li><li>改</li><li>查</li><li>属性操作</li><li>时间操作</li></ul><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ol><li>document.write</li><li>innerHTML</li><li>createElement</li></ol><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><ol><li>appendChild</li><li>insertBefore</li></ol><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><ol><li>removeChild</li></ol><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><ul><li>主要修改dom的元素属性，dom元素的内容、属性、表单的值等</li></ul><ol><li>修改元素属性：src、href、title 等</li><li>修改普通元素内容：innerHTML、innerText</li><li>修改表单元素：value、type、disabled</li><li>修改元素样式：style、className</li></ol><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><ul><li>主要获取查询dom的元素</li></ul><ol><li><strong>DOM提供的API方法</strong>：getElementById、getElementsByTagName (古老用法，不推荐)</li><li><strong>H5提供的新方法</strong>：querySelector、querySelectorAll (提倡)</li><li>利用节点操作获取元素：父(parentNode)、子(children)、兄(previousElementSibling、nextElementSibling) 提倡</li></ol><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><ul><li>主要针对于自定义属性</li></ul><ol><li>setAttribute：设置dom的属性值</li><li>getAttribute：得到dom的属性值</li><li>removeAttribute：移除属性</li></ol><h1 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h1><h2 id="注册事件-绑定事件"><a href="#注册事件-绑定事件" class="headerlink" title="注册事件(绑定事件)"></a>注册事件(绑定事件)</h2><p>给元素添加事件，称为注册事件或者绑定事件。</p><p>注册事件有两种方式：传统方式和方法监听注册方式</p><table><thead><tr><th>传统注册方式</th><th>方法监听注册方式</th></tr></thead><tbody><tr><td>利用 on 开头的事件 onclick</td><td>w3c 标准推荐方式</td></tr><tr><td><code>&lt;button onclick = &quot;alert(&quot;hi&quot;)&quot;&gt;&lt;/button&gt;</code></td><td>addEventListener() 它是一个方法</td></tr><tr><td>btn.onclick = function() {}</td><td>IE9 之前的 IE 不支持此方法，可使用 attachEvent() 代替</td></tr><tr><td>特点：注册事件的唯一性</td><td>特点：同一个元素同一个事件可以注册多个监听器</td></tr><tr><td>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</td><td>按注册顺序依次执行</td></tr></tbody></table><h3 id="①addEventListener事件监听方式"><a href="#①addEventListener事件监听方式" class="headerlink" title="①addEventListener事件监听方式"></a>①addEventListener事件监听方式</h3><ul><li><code>eventTarget.addEventListener()</code>方法将指定的监听器注册到 eventTarget（目标对象）上</li><li>当该对象触发指定的事件时，就会执行事件处理函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">addEventListener</span>(type,listener[,useCapture])</span><br></pre></td></tr></table></figure><p>该方法接收三个参数：</p><ul><li><code>type</code>:事件类型字符串，比如click,mouseover,注意这里不要带on</li><li><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</li><li><code>useCapture</code>：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>传统注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>方法监听注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>ie9 attachEvent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 传统方式注册事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&#x27;hao a u&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 事件监听注册事件 addEventListener </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (1) 里面的事件类型是字符串 所以加引号 而且不带on</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">22</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="number">33</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. attachEvent ie9以前的版本支持</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="②attachEvent事件监听方式-兼容"><a href="#②attachEvent事件监听方式-兼容" class="headerlink" title="②attachEvent事件监听方式(兼容)"></a>②attachEvent事件监听方式(兼容)</h3><ul><li><code>eventTarget.attachEvent()</code>方法将指定的监听器注册到 eventTarget（目标对象） 上</li><li>当该对象触发指定的事件时，指定的回调函数就会被执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">attachEvent</span>(eventNameWithOn,callback)</span><br></pre></td></tr></table></figure><p>该方法接收两个参数：</p><ul><li><code>eventNameWithOn</code>：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li><li><code>callback</code>： 事件处理函数，当目标触发事件时回调函数被调用</li><li>ie9以前的版本支持</li></ul><h3 id="③注册事件兼容性解决方案"><a href="#③注册事件兼容性解决方案" class="headerlink" title="③注册事件兼容性解决方案"></a>③注册事件兼容性解决方案</h3><p>兼容性处理的原则：首先照顾大多数浏览器，再处理特殊浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addEventListener</span>(<span class="params">element, eventName, fn</span>) &#123;</span><br><span class="line">     <span class="comment">// 判断当前浏览器是否支持 addEventListener 方法</span></span><br><span class="line">     <span class="keyword">if</span> (element.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">       element.<span class="title function_">addEventListener</span>(eventName, fn);  <span class="comment">// 第三个参数 默认是false</span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">       element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 相当于 element.onclick = fn;</span></span><br><span class="line">       element[<span class="string">&#x27;on&#x27;</span> + eventName] = fn;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除事件-解绑事件"><a href="#删除事件-解绑事件" class="headerlink" title="删除事件(解绑事件)"></a>删除事件(解绑事件)</h2><h3 id="removeEventListener删除事件方式"><a href="#removeEventListener删除事件方式" class="headerlink" title="removeEventListener删除事件方式"></a>removeEventListener删除事件方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">removeEventListener</span>(type,listener[,useCapture]);</span><br></pre></td></tr></table></figure><p>该方法接收三个参数：</p><ul><li><code>type</code>:事件类型字符串，比如click,mouseover,注意这里不要带on</li><li><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</li><li><code>useCapture</code>：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li></ul><h3 id="detachEvent删除事件方式-兼容"><a href="#detachEvent删除事件方式-兼容" class="headerlink" title="detachEvent删除事件方式(兼容)"></a>detachEvent删除事件方式(兼容)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">detachEvent</span>(eventNameWithOn,callback);</span><br></pre></td></tr></table></figure><p>该方法接收两个参数：</p><ul><li><code>eventNameWithOn</code>：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li><li><code>callback</code>： 事件处理函数，当目标触发事件时回调函数被调用</li><li>ie9以前的版本支持</li></ul><h3 id="传统事件删除方式"><a href="#传统事件删除方式" class="headerlink" title="传统事件删除方式"></a>传统事件删除方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="property">onclick</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>事件删除示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 传统方式删除事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.removeEventListener 删除事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,fn);   <span class="comment">//里面的fn不需要调用加小括号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">22</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            divs[<span class="number">1</span>].<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,fn);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3.IE9 中的删除事件方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>,fn1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">33</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            divs[<span class="number">2</span>].<span class="title function_">detachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>,fn1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="删除事件兼容性解决方案"><a href="#删除事件兼容性解决方案" class="headerlink" title="删除事件兼容性解决方案"></a>删除事件兼容性解决方案</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeEventListener</span>(<span class="params">element, eventName, fn</span>) &#123;</span><br><span class="line">     <span class="comment">// 判断当前浏览器是否支持 removeEventListener 方法</span></span><br><span class="line">     <span class="keyword">if</span> (element.<span class="property">removeEventListener</span>) &#123;</span><br><span class="line">       element.<span class="title function_">removeEventListener</span>(eventName, fn);  <span class="comment">// 第三个参数 默认是false</span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">detachEvent</span>) &#123;</span><br><span class="line">       element.<span class="title function_">detachEvent</span>(<span class="string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       element[<span class="string">&#x27;on&#x27;</span> + eventName] = <span class="literal">null</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><ul><li>事件流描述的是从页面中接收事件的顺序</li><li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</li></ul><p><img src="https://img-blog.csdnimg.cn/063297f2336f43dfb246930ae877a9ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>事件冒泡： IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。</li><li>事件捕获： 网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。</li></ul><p><strong>加深理解</strong>：</p><p>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。</p><p><img src="https://img-blog.csdnimg.cn/51f0146f0e334813b35d9b7075382a33.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="捕获阶段"><a href="#捕获阶段" class="headerlink" title="捕获阶段"></a>捕获阶段</h3><ul><li>document -&gt; html -&gt; body -&gt; father -&gt; son</li></ul><p>两个盒子嵌套，一个父盒子一个子盒子，我们的需求是当点击父盒子时弹出 father ，当点击子盒子时弹出 son</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// dom 事件流 三个阶段</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. JS 代码中只能执行捕获或者冒泡其中的一个阶段。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. onclick 和 attachEvent（ie） 只能得到冒泡阶段。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段  document -&gt; html -&gt; body -&gt; father -&gt; son</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是因为DOM流的影响，我们点击子盒子，会先弹出 father，之后再弹出 son</p><p><img src="https://img-blog.csdnimg.cn/65d6a7c8038f414fbf03c3ac4d2ce293.gif#pic_center" alt="在这里插入图片描述"></p><p>这是因为捕获阶段由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收</p><ul><li>document -&gt; html -&gt; body -&gt; father -&gt; son</li><li>先看 document 的事件，没有；再看 html 的事件，没有；再看 body 的事件，没有；再看 father 的事件，有就先执行；再看 son 的事件，再执行。</li></ul><h3 id="冒泡阶段"><a href="#冒泡阶段" class="headerlink" title="冒泡阶段"></a>冒泡阶段</h3><ul><li>son -&gt; father -&gt;body -&gt; html -&gt; document</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 4. 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段  son -&gt; father -&gt;body -&gt; html -&gt; document</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们点击子盒子，会弹出 son、father、document</p><p><img src="https://img-blog.csdnimg.cn/9ab4190f50d14c7aa879789476a394e9.gif#pic_center" alt="在这里插入图片描述"></p><p>这是因为冒泡阶段开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点</p><ul><li>son -&gt; father -&gt;body -&gt; html -&gt; document</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>JS 代码中只能执行捕获或者冒泡其中的一个阶段</li><li><code>onclick</code> 和 <code>attachEvent</code>只能得到冒泡阶段</li><li><code>addEventListener(type,listener[,useCapture])</code>第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false (不写默认就是false),表示在事件冒泡阶段调用事件处理程序</li><li>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</li><li>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</li></ul><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">   <span class="comment">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span></span><br><span class="line">&#125; </span><br><span class="line">eventTarget.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">   <span class="comment">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt  </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态</li><li>简单理解：   <ul><li>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面</li><li>这个对象就是事件对象 event，它有很多属性和方法，比如“     <ul><li>谁绑定了这个事件</li><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键</li></ul></li></ul></li><li>这个 event 是个形参，系统帮我们设定为事件对象，不需要传递实参过去</li><li>当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 事件对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(e);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(window.event);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// e = e || window.event;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. event 就是一个事件对象 写到我们侦听函数的 小括号里面 当形参来看</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 事件对象 是 我们事件的一系列相关数据的集合 跟事件相关的 比如鼠标点击里面就包含了鼠标的相关信息，鼠标坐标啊，如果是键盘事件里面就包含的键盘事件的信息 比如 判断用户按下了那个键</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 4. 这个事件对象我们可以自己命名 比如 event 、 evt、 e</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 5. 事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件对象的兼容性方案"><a href="#事件对象的兼容性方案" class="headerlink" title="事件对象的兼容性方案"></a>事件对象的兼容性方案</h3><p>事件对象本身的获取存在兼容问题：</p><ol><li>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。</li><li>在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找</li></ol><p>解决：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br></pre></td></tr></table></figure><h3 id="事件对象的常见属性和方法"><a href="#事件对象的常见属性和方法" class="headerlink" title="事件对象的常见属性和方法"></a>事件对象的常见属性和方法</h3><table><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td>e.target</td><td>返回触发事件的对象 标准</td></tr><tr><td>e.srcElement</td><td>返回触发事件的对象 非标准 ie6-8使用</td></tr><tr><td>e.type</td><td>返回事件的类型 比如<code>click</code> <code>mouseover</code> 不带on</td></tr><tr><td>e.cancelBubble</td><td>该属性阻止冒泡，非标准，ie6-8使用</td></tr><tr><td>e.returnValue</td><td>该属性阻止默认行为 非标准，ie6-8使用</td></tr><tr><td>e.preventDefault()</td><td>该方法阻止默认行为 标准 比如不让链接跳转</td></tr><tr><td>e.stopPropagation()</td><td>阻止冒泡 标准</td></tr></tbody></table><p>e.target 和 this 的区别：</p><ul><li>this 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素）</li><li>e.target 是事件触发的元素。</li></ul><h2 id="事件对象阻止默认行为"><a href="#事件对象阻止默认行为" class="headerlink" title="事件对象阻止默认行为"></a>事件对象阻止默认行为</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sub&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 常见事件对象的属性和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 返回事件类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, fn);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, fn);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">type</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 阻止默认行为（事件） 让链接不跳转 或者让提交按钮不提交</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                e.<span class="title function_">preventDefault</span>(); <span class="comment">//  dom 标准写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 传统的注册方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        a.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 普通浏览器 e.preventDefault();  方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// e.preventDefault();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 低版本浏览器 ie678  returnValue  属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// e.returnValue;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题 特点： return 后面的代码不执行了， 而且只限于传统的注册方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h2><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点</p><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p><ul><li>标准写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">stopPropagation</span>();</span><br></pre></td></tr></table></figure><ul><li>非标准写法： IE6-8 利用对象事件 cancelBubble属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 常见事件对象的属性和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 阻止冒泡  dom 推荐的标准 stopPropagation() </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            e.<span class="title function_">stopPropagation</span>(); <span class="comment">// stop 停止  Propagation 传播</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            e.<span class="property">cancelBubble</span> = <span class="literal">true</span>; <span class="comment">// 非标准 cancel 取消 bubble 泡泡</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="阻止事件冒泡的兼容性解决方案"><a href="#阻止事件冒泡的兼容性解决方案" class="headerlink" title="阻止事件冒泡的兼容性解决方案"></a>阻止事件冒泡的兼容性解决方案</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e &amp;&amp; e.<span class="property">stopPropagation</span>)&#123;</span><br><span class="line">      e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="e-target-与-this"><a href="#e-target-与-this" class="headerlink" title="e.target 与 this"></a>e.target 与 this</h3><blockquote><p>e.target 与 this 的区别</p></blockquote><ul><li><code>this</code>是事件绑定的元素，这个函数的调用者(绑定这个事件的元素)</li><li><code>e.target</code>是事件触发的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 常见事件对象的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. e.target 返回的是触发事件的对象（元素）  this 返回的是绑定事件的对象（元素）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 区别 ： e.target 点击了那个元素，就返回那个元素 this 那个元素绑定了这个点击事件，那么就返回谁</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">currentTarget</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// e.target 指向我们点击的那个对象 谁触发了这个事件 我们点击的是li e.target 指向的就是li</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 了解兼容性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// div.onclick = function(e) &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     e = e || window.event;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     var target = e.target || e.srcElement;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     console.log(target);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 了解 跟 this 有个非常相似的属性 currentTarget  ie678不认识</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件对象的兼容性"><a href="#事件对象的兼容性" class="headerlink" title="事件对象的兼容性"></a>事件对象的兼容性</h3><p>事件对象本身的获取存在兼容问题：</p><ul><li>标准浏览器中浏览器是给方法传递的参数，只需定义形参e就可以获取到</li><li>在 IE6 -&gt; 8 中，浏览器不会给方法传递参数，如果需要的话，需要到<code>window.event</code>中获取查找</li></ul><blockquote><p>解决方案</p></blockquote><ul><li><code>e = e || window.event</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 事件对象</span></span><br><span class="line">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="comment">// e = e || window.event;</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line"><span class="comment">// 事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><ul><li>事件委托也称为事件代理，在 jQuery 里面称为事件委派</li><li>事件委托的原理<ul><li><strong>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// alert(&#x27;知否知否，点我应有弹框在手！&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// e.target 这个可以得到我们点击的对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 点了谁，就让谁的style里面的backgroundColor颜色变为pink</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上， ul 有注册事件，就会触发事件监听器。</p><h2 id="常见的鼠标事件"><a href="#常见的鼠标事件" class="headerlink" title="常见的鼠标事件"></a>常见的鼠标事件</h2><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h3 id="禁止鼠标右键与鼠标选中"><a href="#禁止鼠标右键与鼠标选中" class="headerlink" title="禁止鼠标右键与鼠标选中"></a>禁止鼠标右键与鼠标选中</h3><ul><li><code>contextmenu</code>主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</li><li><code>selectstart</code> 禁止鼠标选中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一段不愿意分享的文字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. contextmenu 我们可以禁用右键菜单</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                e.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止默认行为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 禁止选中文字 selectstart</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            e.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h3><ul><li><strong>event</strong>对象代表事件的状态，跟事件相关的一系列信息的集合</li><li>现阶段我们主要是用鼠标事件对象 <strong>MouseEvent</strong> 和键盘事件对象 <strong>KeyboardEvent。</strong></li></ul><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口<strong>可视区</strong>的X坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口<strong>可视区</strong>的Y坐标</td></tr><tr><td>e.pageX（重点）</td><td>返回鼠标相对于文档页面的X坐标 IE9+ 支持</td></tr><tr><td>e.pageY（重点）</td><td>返回鼠标相对于文档页面的Y坐标 IE9+ 支持</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 鼠标事件对象 MouseEvent</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. client 鼠标在可视区的x和y坐标</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientY</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. page 鼠标在页面文档的x和y坐标</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageY</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenX</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenY</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="常用的键盘事件"><a href="#常用的键盘事件" class="headerlink" title="常用的键盘事件"></a>常用的键盘事件</h2><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发，但是它不识别功能键，比如 ctrl shift 箭头等</td></tr></tbody></table><ul><li><strong>如果使用addEventListener 不需要加 on</strong></li><li><code>onkeypress</code> 和前面2个的区别是，它不识别功能键，比如左右箭头，shift 等</li><li>三个事件的执行顺序是： keydown – keypress — keyup</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 常用的键盘事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//1. keyup 按键弹起的时候触发 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// document.onkeyup = function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//         console.log(&#x27;我弹起了&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我弹起了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我按下了press&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我按下了down&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="键盘对象属性"><a href="#键盘对象属性" class="headerlink" title="键盘对象属性"></a>键盘对象属性</h3><table><thead><tr><th>键盘事件对象 <strong>属性</strong></th><th>说明</th></tr></thead><tbody><tr><td>keyCode</td><td>返回该<strong>键</strong>值的ASCII值</td></tr></tbody></table><ul><li><code>onkeydown</code>和 <code>onkeyup</code> 不区分字母大小写，<code>onkeypress</code> 区分字母大小写。</li><li>在我们实际开发中，我们更多的使用keydown和keyup， 它能识别所有的键（包括功能键）</li><li><code>Keypress</code> 不识别功能键，但是<code>keyCode</code>属性能区分大小写，返回不同的ASCII值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 我们的keyup 和keydown事件不区分字母大小写  a 和 A 得到的都是65</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 我们的keypress 事件 区分字母大小写  a  97 和 A 得到的是65</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;up:&#x27;</span> + e.<span class="property">keyCode</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">65</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&#x27;您按下的a键&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&#x27;您没有按下a键&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;press:&#x27;</span> + e.<span class="property">keyCode</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue全家桶之Vue基础指令(一)</title>
      <link href="/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4(%E4%B8%80)/"/>
      <url>/myblog.github.io/2022/04/24/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E4%B9%8BVue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="✍、目录总览"><a href="#✍、目录总览" class="headerlink" title="✍、目录总览"></a>✍、目录总览</h2><p><img src="https://img-blog.csdnimg.cn/d93739eb11e0449899c78f49b6194603.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>配套视频讲解: <a href="https://www.bilibili.com/video/BV15741177Eh?from=search&seid=12220650172270950947&spm_id_from=333.337.0.0">CoderWhy老师的Vuejs讲解</a></li></ul><h1 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h1><h2 id="什么是Vue"><a href="#什么是Vue" class="headerlink" title="什么是Vue"></a>什么是Vue</h2><p>官方给出的概念： Vue 是一套 用于构建用户界面的前端框架</p><h2 id="Vue的特性"><a href="#Vue的特性" class="headerlink" title="Vue的特性"></a>Vue的特性</h2><p>vue框架的特性，主要体现在如下两方面：</p><ul><li>数据驱动视图</li><li>双向数据绑定</li></ul><h3 id="数据驱动视图"><a href="#数据驱动视图" class="headerlink" title="数据驱动视图"></a>数据驱动视图</h3><p>在使用了 vue 的页面 中， vue 会监听数据的变化 ，从而 自动 重新渲染页面的结构。示意图如下：</p><p><img src="https://img-blog.csdnimg.cn/526b7c7452124b3ea2cd528ef2a9ff47.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>好处：当页面数据发生变化时，页面会自动重新渲染！</p><p>注意：数据驱动视图是 单向的数据绑定 。</p><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><p>在填写表单 时，双向数据绑定可以辅助开发者在不操作 DOM 的前提下 ，自动 把用户填写的内容 同步到 数据源<br>中。示意图如下：</p><p><img src="https://img-blog.csdnimg.cn/664236c4657846f2b85a4a85842b46fe.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>好处：开发者不再需要手动操作DOM 元素，来获取表单元素最新的值！</p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><ul><li>MVVM是 vue 实现 数据驱动视图 和双向数据绑定 的核心原理。</li><li>MVVM 指的是 Model 、View 和 ViewiewModelodel， 它把每个 HTML 页面都拆分成了这三个部分，如图所示：</li></ul><p><img src="https://img-blog.csdnimg.cn/a33c3d09169044839ffd36c3ea908151.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><strong>View 层</strong>：</p><ul><li>视图层</li><li>在我们前端开发中，通常就是DOM层</li><li>主要的作用是给用户展示各种信息</li></ul><p><strong>Model层</strong>：</p><ul><li>数据层</li><li>数据可能是我们固定的死数据，更多的是来自于我们服务器，从网络上请求下来的数据。</li></ul><p><strong>VueMode层</strong>：</p><ul><li>视图模型层</li><li>视图模型层是 View 和 Model 沟通的桥梁</li><li>一方面它实现了数据绑定，将 Model 的改变实时的反应到 View 中</li><li>另一方面它实现了 DOM监听，当DOM 发生一些事件(点击、滚动等)时，可以监听到，并在现需要的情况下改变对应的 Data</li></ul><h2 id="MVVM工作原理"><a href="#MVVM工作原理" class="headerlink" title="MVVM工作原理"></a>MVVM工作原理</h2><p>ViewModel作为 MVVM 的核心 ，是它把当前页面的 数据源 （ModelModel）和 页面的结构 （View ）连接在了一起。</p><p><img src="https://img-blog.csdnimg.cn/31bf7ff8d774419ab803b53bdc43ee00.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><ul><li>当数据源发生变化 时，会被 ViewModel 监听到， VM 会根据最新的数源 自动更新 页面的结构</li><li>当表单元素的值发生变化 时，也会被 VM 监听到， VM 会把变化过后最新的值 自动同步 到 Model 数</li></ul><h2 id="Vue的版本"><a href="#Vue的版本" class="headerlink" title="Vue的版本"></a>Vue的版本</h2><p>当前， vue 共有 3 个大版本，其中：</p><ul><li>2.x版本的 vue 是目前企业级项目开发中的主流版本</li><li>3.x版本的 vue 于 2020 -09 -19 发布，生态还不完善，尚未在企业级项目开发中普及和推广</li><li>1.x版本的 vue 几乎被淘汰，不再建议学习与使用</li></ul><p>总结：</p><ul><li>3.x版本的 vue 是未来企业级项目开发的趋势；</li><li>2.x版本的 vue 在未来（ 1 ~ 2 年内）会被逐渐淘汰；</li></ul><h1 id="Vue-js安装"><a href="#Vue-js安装" class="headerlink" title="Vue.js安装"></a>Vue.js安装</h1><p>安装Vue的方式有很多，主要有三种：</p><h2 id="方式一：直接CDN引入"><a href="#方式一：直接CDN引入" class="headerlink" title="方式一：直接CDN引入"></a>方式一：直接CDN引入</h2><p>方式一：直接CDN引入</p><ul><li>你可以选择引入开发环境版本还是生产环境版本</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开发环境版本,包含了有帮助的命令行警告 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 生产环境版本,优化了尺寸和速度 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h2 id="方式二：下载和引入"><a href="#方式二：下载和引入" class="headerlink" title="方式二：下载和引入"></a>方式二：下载和引入</h2><ul><li>开发环境下载：<a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></li><li>生产环境下载：<a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></li><li>下载完成后使用 script 标签的外部引用即可</li></ul><h2 id="方式三：NPM安装"><a href="#方式三：NPM安装" class="headerlink" title="方式三：NPM安装"></a>方式三：NPM安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最新稳定版</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install vue</span></span><br></pre></td></tr></table></figure><p>后续通过 webpack 和 CLI 的使用时我们使用该方式。</p><h1 id="Vue的基本使用"><a href="#Vue的基本使用" class="headerlink" title="Vue的基本使用"></a>Vue的基本使用</h1><ol><li>导入 vue.js 的script 的脚本文件</li><li>在页面中声明一个将要被 vue 所控制的 DOM 区域</li><li>创建 vue 实例对象</li></ol><h2 id="Hello-Vue"><a href="#Hello-Vue" class="headerlink" title="Hello Vue"></a>Hello Vue</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.在页面中声明一个将要被 vue 所控制的DOM区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  1.导入 vue.js 的script脚本文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.创建 vue 实例对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.1 指定当前 vue 实例将要控制页面的哪个区域</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.2 指定 Model 数据源</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;HelloVue！&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>时</span><br></pre></td></tr></table></figure><p>我们来阅读 JavaScript 代码，会发现创建了一个 Vue 对象。</p><ul><li><p>创建Vue对象的时候，传入了一些 options :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>&#123;&#125;</code>中包含了 el 属性：该属性决定了这个 Vue对象挂载到哪一个元素上，很明显，我们这里是挂载到了 <code>id 为 app</code> 的元素上。</li></ul></li><li><p>```<br>{}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  中包含了 data 属性：该属性中通常会存储一些数据</span><br><span class="line"></span><br><span class="line">  - 这些数据可以是我们直接定义出来的，比如像上面的 `HelloVue!`</span><br><span class="line">  - 也可能是来自网络，从服务器加载的</span><br><span class="line"></span><br><span class="line">- 浏览器执行代码的流程：</span><br><span class="line"></span><br><span class="line">  - 执行到 12~15行代码显示出对应的 HTML</span><br><span class="line">  - 执行第20行代码创建 Vue 实例，并且对原HTML进行解析和修改</span><br><span class="line"></span><br><span class="line">- 并且，目前我们的代码是可以做到响应式的。</span><br><span class="line"></span><br><span class="line">## 基本代码与MVVM的关系</span><br><span class="line"></span><br><span class="line">![在这里插入图片描述](https://img-blog.csdnimg.cn/70aac1faedf04d99996c19f3a27553d4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)</span><br><span class="line"></span><br><span class="line">## Vue列表显示</span><br><span class="line"></span><br><span class="line">现在，我们来展示一个更加复杂的数据：数据列表。比如我们现在从服务器请求过来一个列表，希望展示到HTML中。</span><br><span class="line"></span><br><span class="line">HTML代码中，使用 `v-for`指令。该指令后面会详细讲解，这里先学会使用。</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;item in movies&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#x27;你好啊&#x27;,</span><br><span class="line">            movies: [&#x27;星际穿越&#x27;, &#x27;大话西游&#x27;, &#x27;少年派&#x27;, &#x27;盗梦空间&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><p>这样我们就再也不需要在JavaScript 代码中完成DOM的拼接相关操作了。</p><p>而且，最重要的是，它还是响应式的，也就是说，当我们数组中的数据发生改变时，界面会自动改变。</p><p><img src="https://img-blog.csdnimg.cn/1a8a84ebac784b4f8c107207253de510.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h2 id="创建Vue实例传入的options"><a href="#创建Vue实例传入的options" class="headerlink" title="创建Vue实例传入的options"></a>创建Vue实例传入的options</h2><p>n我们在创建Vue实例的时候，传入了一个对象options，这个 options 可以包含这些选项：</p><ul><li><p>```<br>el</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 类型：string | HTMLElement</span><br><span class="line">  - 作用：决定之后 Vue实例会管理哪一个DOM</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  data</span><br></pre></td></tr></table></figure><ul><li>类型：Object | Function(组件当中 data 必须是一个函数)</li><li>作用：Vue 实例对应的数据对象</li></ul></li><li><p>```<br>methods</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 类型：&#123;[key：string]: Function&#125;</span><br><span class="line">  - 作用：定义属于 Vue 的一些方法，可以在其他地方调用，也可以在指令中使用。</span><br><span class="line"></span><br><span class="line"># Vue指令</span><br><span class="line"></span><br><span class="line">指令和 vue 为开发者提供的模板语法，用于辅助开发者渲染页面的基本结构。</span><br><span class="line"></span><br><span class="line">vue中的指令 按照不同的用途 可以分为如下6大类：</span><br><span class="line"></span><br><span class="line">- 内容渲染指令</span><br><span class="line">- 属性绑定指令</span><br><span class="line">- 事件绑定指令</span><br><span class="line">- 双向绑定指令</span><br><span class="line">- 条件渲染指令</span><br><span class="line">- 列表渲染指令</span><br><span class="line"></span><br><span class="line">## 内容渲染指令</span><br><span class="line"></span><br><span class="line">### v-text</span><br><span class="line"></span><br><span class="line">- `v-text` 作用和 `Mustache` 比较相似：都是用于将数据显示在界面中</span><br><span class="line">- v-text 通常情况下，接收一个string类型</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2 v-text = &quot;message&quot;&gt;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app = new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#x27;你好啊,李银河！&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/67ffc5f4947348c3915bf1bddec59e51.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="插值-语法"><a href="#插值-语法" class="headerlink" title="插值 语法"></a>插值 语法</h3><p><img src="https://img-blog.csdnimg.cn/0748e8bc3f6d4849b952cd72be47d6d0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>但是，在某些情况下，我们可能不希望界面随意的跟随改变，这个时候，我们就可以使用一个Vue的指令</p><p><strong>v-once</strong>：</p><ul><li>该指令后面不需要跟任何表达式(比如之前的 <code>v-for</code> 后面是有跟表达式的)</li><li>该指令表示元素和组件(组件后面才会学习)只渲染一次，不会随着数据的改变而改变</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;亲爱的,你好呀！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b45af248614b4028aa140cf272544982.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ul><li>可以使用<code>v-html</code>指令</li><li>该指令后面往往会跟上一个string类型</li><li>会将string的html解析出来并且进行性渲染</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span> = <span class="string">&quot;link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">link</span>: <span class="string">&#x27;&lt;a href = &quot;www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e57a21662a604c2cb2e05a63c990934e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p>该指令的作用是用于跳过这个元素和它子元素的编译过程，用于显示原本的 Mustache 语法</p><p>比如下面的代码：</p><ul><li>第一个 h2 元素中的内容会被编译解析出来对应的内容</li><li>第二个 h2 元素中会直接显示 </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;Hello World&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c5888c3ef89a4d1d8eaa2ce9d3b172be.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="v-cloak🎈"><a href="#v-cloak🎈" class="headerlink" title="v-cloak🎈"></a>v-cloak🎈</h3><ul><li>在某些情况下，我们浏览器可能会直接显示出未编译的Mustache标签。</li><li>cloak：斗篷</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;亲爱的&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1b560be9321b486691d06275a91c84f7.gif#pic_center" alt="在这里插入图片描述"></p><p>例如上述代码，当代码执行到第 2 行时，需要去解析我们的 message ，从而执行 8~15行代码。但是8 ~ 15行代码是一个定时器，需要1s后才执行，那么此时不会解析 message，从而网页中直接显示原格式 <code>&#123;&#123;message&#125;&#125;</code> ,之后1 s 之后再进行解析，从而显示<code>亲爱的</code></p><p>我们如何解决上述问题呢？</p><ul><li>加上<code>v-clock</code> 属性,并加上css。</li><li>Vue解析之前有 <code>v-clock</code> 属性时，让其不显示</li><li>Vue解析之后没有<code>v-clock</code> 属性，再让其显示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在vue解析之前, div中有一个属性v-cloak</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在vue解析之后, div中没有一个属性v-cloak</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h2><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>我们可以利用 <code>v-bind :class</code>来绑定一些 class 属性，<code>v-bind</code>为元素的属性动态绑定属性值。</p><p>前面的指令主要作用是将值插入到我们的模板的内容当中，但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定。</p><ul><li>比如动态绑定a元素的 href 属性</li><li>比如动态绑定img元素的 src 属性</li></ul><p>这个时候，我们可以使用 <code>v-bind</code> 指令：</p><ul><li>作用：动态绑定属性</li><li>缩写：<code>:</code></li></ul><p><code>v-bind</code> 用于绑定一个或多个属性值，或者向另一个组件传递 props 值(这个之后组件介绍)</p><ul><li>比如通过 Vue 实例中的 data 绑定元素的 src 和 href ，代码如下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 错误的做法：这里不可以使用mustache语法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;img src=&quot;&#123;&#123;logoURL&#125;&#125;&quot; alt=&quot;&quot;&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正确的做法，使用v-bind指令 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span> = <span class="string">&quot;link&quot;</span>&gt;</span>Vuejs官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imh</span> <span class="attr">v-bind:src</span> = <span class="string">&quot;logoURL&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">logoURL</span>: <span class="string">&#x27;https://cn.vuejs.org/images/logo.svg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">link</span>: <span class="string">&#x27;https://cn.vuejs.org/&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/deac373a81b744a3a2c72b3ecfc90737.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h4 id="①v-bind-语法糖"><a href="#①v-bind-语法糖" class="headerlink" title="①v-bind 语法糖"></a>①v-bind 语法糖</h4><p><code>v-bind</code> 有一个对应的语法糖，也就是简写方式。开发中就用这个，因为这样更简洁</p><p>简写方式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span> = <span class="string">&quot;link&quot;</span>&gt;</span>Vuejs官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简写形式如下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span> = <span class="string">&quot;link&quot;</span>&gt;</span>Vuejs官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">imh</span> <span class="attr">v-bind:src</span> = <span class="string">&quot;logoURL&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--简写形式如下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imh</span> <span class="attr">:src</span> = <span class="string">&quot;logoURL&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②v-bind绑定class"><a href="#②v-bind绑定class" class="headerlink" title="②v-bind绑定class"></a>②v-bind绑定class</h4><p>很多时候，我们希望动态的来切换 class，比如</p><ul><li>当数据为某个状态时，字体显示红色</li><li>当数据另一个状态时，字体显示黑色</li></ul><p>绑定 class 有两种方式：</p><ul><li>对象语法</li><li>数组语法</li></ul><blockquote><p>对象语法</p></blockquote><p>对象语法的含义是：class 后面跟的是一个对象</p><p>对象语法有下面这些用法</p><ol><li><strong>直接通过{}绑定一个类</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#x27;&#123;active&#x27;: isActive&#125;&quot;</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>也可以通过判断，传入多个值</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;: isActive, &#x27;line&#x27;: isLine&#125;&quot;</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>和普通类同时存在，并不冲突</strong></p><p>注：如果 isActive 和 isLine 都为true，那么会有 title/active/line 三个类</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active: isActive, line: isLine&#125;&quot;</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>如果过于复杂，可以放在一个methods或者computed中</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 class=&quot;title&quot; v-bind:class=&quot;getClasses()&quot;&gt;</span><br><span class="line">    Hello World</span><br><span class="line">&lt;/h2&gt;</span><br></pre></td></tr></table></figure><blockquote><p>数组语法</p></blockquote><p>数组语法的含义是：class 后面跟的是一个数组</p><p>数组语法有下面这些用法：</p><ol><li><strong>直接通过{}绑定一个类</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;]&quot;</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>也可以传入多个值</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;, &#x27;line&#x27;]&quot;</span>&gt;</span></span><br><span class="line">     Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>和普通的类同时存在，并不冲突,会有 title/active/line 三个类</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[active, line]&quot;</span>&gt;</span></span><br><span class="line">     Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>如果过于复杂，可以放在一个methods或者computed中</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;getClasses()&quot;</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③v-bind绑定style"><a href="#③v-bind绑定style" class="headerlink" title="③v-bind绑定style"></a>③v-bind绑定style</h4><p>我们可以利用 <code>v-bind: style</code> 来绑定一些CSS内联样式</p><p>在写CSS属性名的时候，比如 font-size</p><ul><li>我们可以使用驼峰式：<code>fontSize</code></li><li>或短横线分隔(记得用单引号括起来) <code>&#39;font-size&#39;</code></li></ul><p>绑定style有两种方式</p><ul><li>对象语法</li><li>数组语法</li></ul><blockquote><p>对象语法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: finalSize + &#x27;px&#x27;, backgroundColor: finalColor&#125;&quot;</span>&gt;</span></span><br><span class="line">    Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>style 后面跟的是一个对象类型</p><ul><li>后面的 key 是 css 属性名称</li><li>对象的 value 是具体赋的值，值可以来自于 data 中的属性</li></ul><blockquote><p>数组语法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyle, baseStyle1]&quot;</span>&gt;</span></span><br><span class="line">     &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>style 后面跟的是一个数组类型</p><ul><li>多个值以逗号分割即可</li></ul><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>计算属性指的是通过一系列运算之后，最终得到一个属性值。这个动态计算出来的属性值可以被模板结构或methods 方法使用。</p><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据。</p><p>但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示</p><ul><li>比如我们有firstName和lastName两个变量，我们需要显示完整的名称</li><li>但是如果多个地方都需要显示完整的名称，我们就需要写多个<code>&#123;&#123;firstName&#125;&#125;</code> <code>&#123;&#123;lastName&#125;&#125;</code></li><li>我们可以将上面的代码换成计算属性，计算属性是写在实例的<code>computed</code>选项中的</li></ul><p><img src="https://img-blog.csdnimg.cn/49d75c2ef2de41a78aa428ac0f924eb0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + &#x27; &#x27; + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">firstName</span>: <span class="string">&#x27;Lebron&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lastName</span>: <span class="string">&#x27;James&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// computed: 计算属性()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">getFullName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>虽然计算属性在声明的时候被定义为方法，但是计算属性的本质是一个属性</p><p>计算属性会缓存计算的结果，只有计算属性依赖的数据变化时，才会重新进行运算</p></blockquote><h4 id="①计算属性的复杂操作"><a href="#①计算属性的复杂操作" class="headerlink" title="①计算属性的复杂操作"></a>①计算属性的复杂操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">books</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&#x27;Unix编程艺术&#x27;</span>, <span class="attr">price</span>: <span class="number">119</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">id</span>: <span class="number">111</span>, <span class="attr">name</span>: <span class="string">&#x27;代码大全&#x27;</span>, <span class="attr">price</span>: <span class="number">105</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">id</span>: <span class="number">112</span>, <span class="attr">name</span>: <span class="string">&#x27;深入理解计算机原理&#x27;</span>, <span class="attr">price</span>: <span class="number">98</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">id</span>: <span class="number">113</span>, <span class="attr">name</span>: <span class="string">&#x27;现代操作系统&#x27;</span>, <span class="attr">price</span>: <span class="number">87</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">totalPrice</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> result = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">books</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">          result += <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">price</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> result</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (let i in this.books) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   this.books[i]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (let book of this.books) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②计算属性的setter和getter🎈"><a href="#②计算属性的setter和getter🎈" class="headerlink" title="②计算属性的setter和getter🎈"></a>②计算属性的setter和getter🎈</h4><p>每一个计算属性都包含一个getter和一个setter，只是我们一般基本不用 setter方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">firstName</span>: <span class="string">&#x27;Kobe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lastName</span>: <span class="string">&#x27;Bryant&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 之前的写法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// fullName: function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   return this.firstName + &#x27; &#x27; + this.lastName</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 计算属性一般是没有set方法, 只读属性.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 完整写法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③计算属性的缓存"><a href="#③计算属性的缓存" class="headerlink" title="③计算属性的缓存"></a>③计算属性的缓存</h4><p>我们可能会考虑这样的一个问题：</p><ul><li>methods 和 computed 看起来都可以实现我们的功能，那么为什么还要多一个计算属性这个东西呢？</li><li>原因：计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.直接拼接: 语法过于繁琐--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.通过定义methods--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--3.通过computed--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">firstName</span>: <span class="string">&#x27;Kobe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lastName</span>: <span class="string">&#x27;Bryant&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">getFullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getFullName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fullName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件监听指令"><a href="#事件监听指令" class="headerlink" title="事件监听指令"></a>事件监听指令</h2><p>在前端开发中，我们经常需要监听点击、拖拽、键盘事件等等，这个时候需要使用 <code>v-on</code></p><ul><li>作用：绑定事件监听器</li><li>缩写：<code>@</code></li></ul><table><thead><tr><th>DOM对象</th><th>vue事件绑定</th></tr></thead><tbody><tr><td>onclick</td><td>v-on:click</td></tr><tr><td>oninput</td><td>v-on:input</td></tr><tr><td>onkeyup</td><td>v-on:keyup</td></tr></tbody></table><blockquote><p>注意：通过 v-on 绑定的事件处理函数，需要 在 methods 节点 中进行声明</p></blockquote><h3 id="v-on基础"><a href="#v-on基础" class="headerlink" title="v-on基础"></a>v-on基础</h3><p>这里，我们用一个监听按钮的点击事件，来简单看看 v-on 的使用</p><ul><li>下面的代码中，我们使用了 <code>v-on:click=&quot;counter++&quot;</code></li><li>另外，我们可以将事件指向一个在 methods 中定义的函数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式一:直接绑定事件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counter--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--方式二:将事件指向在methods中定义的函数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 语法糖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;<span class="comment">// v-on绑定的事件处理函数,需要在 methods 中进行声明</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">increment</span>(<span class="params"></span>) &#123;<span class="comment">// 事件处理函数的名字</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">counter</span>++<span class="comment">// this表示当前new出来的 vue实例对象,通过this可以访问到data中的数据</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">counter</span>--</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><h3 id="①事件参数对象"><a href="#①事件参数对象" class="headerlink" title="①事件参数对象"></a>①事件参数对象</h3><p>当通过 methods 中定义方法，以供 @click 调用时，需要<strong>注意参数问题</strong></p><p>在原生的 DOM 事件绑定中，可以在事件处理函数的形参处，接收事件参数对象 event 。同理，在 v-on 指令 （简写为 @)所绑定的事件处理函数中，同样可以接收到事件参数对象 event ，示例代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>count 的值为 &#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span></span><br><span class="line">            +1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;<span class="comment">// v-on绑定的事件处理函数,需要在 methods 中进行声明</span></span></span><br><span class="line"><span class="language-javascript">               <span class="title function_">addCount</span>(<span class="params">e</span>)&#123;<span class="comment">// 接收事件参数对象 event,简写为e</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">const</span> nowBgColor = e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span></span></span><br><span class="line"><span class="language-javascript">                   e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = nowBgColor === <span class="string">&#x27;red&#x27;</span>?<span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">               &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②绑定事件并传参"><a href="#②绑定事件并传参" class="headerlink" title="②绑定事件并传参"></a>②绑定事件并传参</h4><p>在使用 v-on 指令绑定事件时，可以使用 ( 进行传参，示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>count 的值为 &#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNewCount(2)&quot;</span>&gt;</span></span><br><span class="line">            +2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;<span class="comment">// v-on绑定的事件处理函数,需要在 methods 中进行声明</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">addNewCount</span>(<span class="params">step</span>)&#123;<span class="comment">// 在形参处用 step 接收传递过来的参数值</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">count</span> += step</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③-event"><a href="#③-event" class="headerlink" title="③$event"></a>③$event</h4><p><code>$event</code> 是 vue 提供的 特殊变量 ，用来表示 原生的事件参数对象 event 。$event 可以解决事件参数对象 event 被覆盖的问题。示例用法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>count 的值为 &#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNewCount(2,$event)&quot;</span>&gt;</span></span><br><span class="line">            +2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;<span class="comment">// v-on绑定的事件处理函数,需要在 methods 中进行声明</span></span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">addNewCount</span>(<span class="params">step,e</span>)&#123;<span class="comment">// 在形参处用 e 接收传递过来的原生事件参数对象 $event</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">const</span> nowBgColor = e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span></span></span><br><span class="line"><span class="language-javascript">                   e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = nowBgColor === <span class="string">&#x27;red&#x27;</span>?<span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里借用 coderwhy老师的讲解记录：</p><ul><li><p>情况一：</p><p>如果该方法不需要额外参数，那么方法后的（）可以不添加</p><ul><li>注意：如果方法本身中有一个参数，那么会默认将原生事件 event 参数传递进去</li></ul></li><li><p>情况二：如果需要同时传入某个参数，同时需要 event 时，可以通过 <code>$event</code> 传入事件</p></li></ul><p><img src="https://img-blog.csdnimg.cn/eefd91b226414b59a0bbe7b63faa394f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.事件调用的方法没有参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn1Click()&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn1Click&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.在事件定义时, 写方法时省略了小括号, 但是方法本身是需要一个参数的, 这个时候, Vue会默认将浏览器生产的event事件对象作为参数传入到方法--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click(123)&quot;</span>&gt;</span>按钮2.1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click()&quot;</span>&gt;</span>按钮2.2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--3.方法定义时, 我们需要event对象, 同时又需要其他参数--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在调用方式, 如何手动的获取到浏览器参数的event对象: $event--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn3Click(abc, $event)&quot;</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">abc</span>: <span class="number">123</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">btn1Click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btn1Click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">btn2Click</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------&#x27;</span>, event);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">btn3Click</span>(<span class="params">abc, event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;++++++++&#x27;</span>, abc, event);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 如果函数需要参数,但是没有传入, 那么函数的形参为undefined</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// function abc(name) &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   console.log(name);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// abc()</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a>v-on修饰符</h3><p>在某些情况下，我们拿到 event 的目的可能是进行一些事件处理，Vue 提供了修饰符来帮助我们方便的处理一些事件</p><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code></li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code></li><li><code>.&#123;keyCode|keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调</li><li><code>.native</code> - 监听组件根元素的原生事件</li><li><code>.once</code> - 只触发一次回调</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 触发click点击事件,组织 a 链接的默认跳转行为--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;onLinkClick&quot;</span>&gt;</span>百度首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  按键修饰符  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  只有在 `key` 是 `Esc` 时调用 `vm.clearInput()`  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;clearInput&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b63c7366cc5e4ff992f073f55df9f423.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1. .stop修饰符的使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">            aaaaaaa</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--2. .prevent修饰符的使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;submitClick&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--3. .监听某个键盘的键帽,这里只监听了enter回车键--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;keyUp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--4. .once修饰符的使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;btn2Click&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btnClick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">divClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divClick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">submitClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;submitClick&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">keyUp</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;keyUp&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">btn2Click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;btn2Click&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><p>条件渲染指令用来辅助开发者按需控制 DOM 的显示与隐藏 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v - if`、`v-else-if`、`v-else</span><br></pre></td></tr></table></figure><ul><li>这三个指令与JavaScript的条件语句 if、else、else if 类似</li><li>Vue 的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</li></ul><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            &#123;&#123;message&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f15b4be3d86c43b8bb1e3a67728410b2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><code>v-if</code>的原理：</p><ul><li><code>v-if</code> 后面的条件为 false时，对应的元素以及子元素不会渲染</li><li>也就是根本没有对应的标签出现在DOM中</li></ul><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>isShow为false时, 显示我<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8856a28185544ccf8a2fd3791edb39aa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="v-if和v-else-if和v-else"><a href="#v-if和v-else-if和v-else" class="headerlink" title="v-if和v-else-if和v-else"></a>v-if和v-else-if和v-else</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;score&gt;=90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">score</span>: <span class="number">99</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">result</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> showMessage = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">score</span> &gt;= <span class="number">90</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          showMessage = <span class="string">&#x27;优秀&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">score</span> &gt;= <span class="number">80</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          showMessage = <span class="string">&#x27;良好&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> showMessage</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件渲染案例"><a href="#条件渲染案例" class="headerlink" title="条件渲染案例"></a>条件渲染案例</h3><p>我们来做一个简单的小案例：</p><ul><li>用户再登录时，可以切换使用用户账号登录还是邮箱地址登录</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;isUser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户账号&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户邮箱&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isUser = !isUser&quot;</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isUser</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例小问题"><a href="#案例小问题" class="headerlink" title="案例小问题"></a>案例小问题</h3><p><img src="https://img-blog.csdnimg.cn/f249af1a1b714be0895dd065055b2592.gif#pic_center" alt="在这里插入图片描述"></p><p><strong>上述案例有一个小问题</strong>：</p><ul><li>如果我们在输入内容的情况下，切换了类型，我们会发现文字依然显示之前输入的内容，但是按到道理讲，我们应该切换到另一个 input 元素中了，在另一个 input元素中，我们并没有输入内容，为什么会出现这个问题呢？</li></ul><p><strong>问题解答</strong>：</p><ul><li>这是因为 Vue 在进行DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素</li><li>在上面的案例中，Vue内部会发现原来的input元素不再使用，直接作为else中的input来使用了。</li></ul><p><strong>解决方案</strong>：</p><ul><li>如果我们不希望 Vue 出现类似重复利用的问题，可以给对应的 input 添加 key</li><li>并且我们需要保证 key 的不同</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;isUser&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户账号&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户邮箱&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isUser = !isUser&quot;</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isUser</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><code>v-show</code>的用法和<code>v-if</code>非常相似，也用于决定一个元素是否渲染：</p><ul><li><code>v-if</code> 指令会 动态地创建或移除 DOM 元素 ，从而控制元素在页面上的显示与隐藏</li><li><code>v-show</code> 指令会动态为元素 添加或移除 style=“display: none;” 样式 ，从而控制元素的显示与隐藏</li></ul><blockquote><p>开发中如何选择呢？</p></blockquote><ul><li>当需要在显示与隐藏之间切片很频繁时，使用 <code>v-show</code></li><li>当只有一次切换时，通过 <code>v-if</code></li></ul><h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><ul><li>vue提供了 <code>v-for</code> 列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构</li><li>v-for 指令需要使 用 item in items 形式的特殊语法，其中：<ul><li>items 是待循环的数组</li><li>item 是被循环的每一项</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span>姓名是: &#123;&#123;tiem.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [     <span class="comment">//列表数据</span></span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>:<span class="number">1</span> ,<span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">id</span>:<span class="number">2</span> ,<span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>当我们有一组数据需要进行渲染时，就可以使用<code>v-for</code>来完成</p><ul><li><code>v-for</code>的语法类似于 JavaScript 中的 for 循环,v-for 指令还支持一个 可选的 第二个参数，即 当前项的索引</li><li>格式：<ul><li><code>item in items</code></li><li><code>(item,index) in items</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span>索引是:&#123;&#123;index&#125;&#125;,姓名是: &#123;&#123;tiem.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [     <span class="comment">//列表数据</span></span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>:<span class="number">1</span> ,<span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">id</span>:<span class="number">2</span> ,<span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7ceb5ab4dcd1433da2b8072e79b5bc6b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.在遍历的过程中,没有使用索引值(下标值)--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in names&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.在遍历的过程中, 获取索引值--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in names&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;index+1&#125;&#125;.&#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">names</span>: [<span class="string">&#x27;why&#x27;</span>, <span class="string">&#x27;kobe&#x27;</span>, <span class="string">&#x27;james&#x27;</span>, <span class="string">&#x27;curry&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： v-for 指令中的 item 项和 index 索引 都是形参，可以根据需要进行 重命名 。例如 (user ,i)in userlist</p></blockquote><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><p>比如某个对象中存储着你的个人信息，我们希望以列表的形式显示出来</p><p><img src="https://img-blog.csdnimg.cn/341075e4ebfb4c2bbea176fc58b54f38.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.在遍历对象的过程中, 如果只是获取一个值, 那么获取到的是value--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in info&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.获取key和value 格式: (value, key) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in info&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--3.获取key和value和index 格式: (value, key, index) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in info&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">1.88</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件的Key属性"><a href="#组件的Key属性" class="headerlink" title="组件的Key属性"></a>组件的Key属性</h3><p>当<strong>列表的数据变化</strong>时，默认情况下， vue 会<strong>尽可能的复用</strong>已存在的 DOM 元素，从而<strong>提升渲染的性能</strong> 。但这种默认的性能优化策略，会导致<strong>有状态的列表无法被正确更新</strong> 。<br>为了给 vue 一个提示，以便它能跟踪每个节点的身份， 从而在保证<strong>有状态的列表被正确更新</strong>的前提下， <strong>提升渲染的性能</strong> 。此时，需要为每项提供一个唯一的 key 属性 ：</p><p>官方推荐我们在使用 <code>v-for</code>时，给对应的元素或组件加上一个 <code>:key</code>属性，<strong>key的作用主要是为了高效的更新虚拟DOM</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in letters&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">letters</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>key的注意事项</p></blockquote><ul><li>key 的值只能是字符串或数字类型</li><li>key 的值必须具有唯一性(即：key 的值不能重复)</li><li>建议把 数据项 id 属性的值 作为 key 的值（因为 id 属性的值具有唯一性)</li><li>使用 index 的值当作 key 的值没有任何意义(因为 index 的值不具有唯一性)</li><li>建议使用 v-for 指令时一定要指定 key 的值(既提升性能、又防止列表状态紊乱)</li></ul><h3 id="检测数组更新"><a href="#检测数组更新" class="headerlink" title="检测数组更新"></a>检测数组更新</h3><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新。</p><p>Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。</p><ul><li>push()：在数组后新增一个元素</li><li>pop()：删除数组中的最后一个元素</li><li>shift()：删除数组中的第一个元素</li><li>unshift()：在数组最前面添加元素</li><li>splice()：删除元素/插入元素/替换元素</li><li>sort()：按升序排序数组元素</li><li>reverse()：反转数组元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in letters&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">letters</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 1.push方法</span></span><br><span class="line">        <span class="comment">// this.letters.push(&#x27;aaa&#x27;)</span></span><br><span class="line">        <span class="comment">// this.letters.push(&#x27;aaaa&#x27;, &#x27;bbbb&#x27;, &#x27;cccc&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.pop(): 删除数组中的最后一个元素</span></span><br><span class="line">        <span class="comment">// this.letters.pop();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.shift(): 删除数组中的第一个元素</span></span><br><span class="line">        <span class="comment">// this.letters.shift();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.unshift(): 在数组最前面添加元素</span></span><br><span class="line">        <span class="comment">// this.letters.unshift()</span></span><br><span class="line">        <span class="comment">// this.letters.unshift(&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.splice作用: 删除元素/插入元素/替换元素</span></span><br><span class="line">        <span class="comment">// 删除元素: 第二个参数传入你要删除几个元素(如果没有传,就删除后面所有的元素)</span></span><br><span class="line">        <span class="comment">// 替换元素: 第二个参数, 表示我们要替换几个元素, 后面是用于替换前面的元素</span></span><br><span class="line">        <span class="comment">// 插入元素: 第二个参数, 传入0, 并且后面跟上要插入的元素</span></span><br><span class="line">        <span class="comment">// splice(start)</span></span><br><span class="line">        <span class="comment">// splice(start):</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">letters</span>.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        <span class="comment">// this.letters.splice(1, 0, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.sort()</span></span><br><span class="line">        <span class="comment">// this.letters.sort()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.reverse(): 反转数组</span></span><br><span class="line">        <span class="comment">// this.letters.reverse()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意: 通过索引值修改数组中的元素</span></span><br><span class="line">        <span class="comment">// this.letters[0] = &#x27;bbbbbb&#x27;;</span></span><br><span class="line">        <span class="comment">// this.letters.splice(0, 1, &#x27;bbbbbb&#x27;)</span></span><br><span class="line">        <span class="comment">// set(要修改的对象, 索引值, 修改后的值)</span></span><br><span class="line">        <span class="comment">// Vue.set(this.letters, 0, &#x27;bbbbbb&#x27;)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h2><p>双向绑定指令也叫表单元素绑定，vue提供了 <code>v-model</code> 双向数据绑定 指令，用来辅助开发者在 不操作 DOM 的前提下， 快速获取表单的数据。</p><p>vue中使用 <code>v-model</code> 指令来实现表单元素和数据的双向绑定，经常用于表单 input 和 textarea 元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>理解双向绑定：</p><ul><li>我们来看上述代码，当我们在输入框输入内容时</li><li>因为 input 中的 v-model 绑定了message，所以会实时的将输入的内容传递给 message，message发生改变。</li><li>当message 发生改变时，因为上面我们使用 Mustache 语法，将 message 的值插入到 DOM 中，所以 DOM 会发生响应的改变。</li><li>所以，通过 v-model 实现了 双向的绑定</li></ul><h3 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h3><p><code>v-model</code> 其实是一个语法糖，它的背后本质上是包含两个操作：</p><ul><li><code>v-bind</code> 绑定一个 value 属性</li><li><code>v-on</code> 指令给当前元素绑定 input 事件</li></ul><p>也就是说下面的代码，等同于下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">&lt;!-- 等同于 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;message&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;message = $event.target.value&quot;</span></span></span></span><br></pre></td></tr></table></figure><h3 id="v-moduel：radio"><a href="#v-moduel：radio" class="headerlink" title="v-moduel：radio"></a>v-moduel：radio</h3><p>当存在多个单选框时：</p><p><img src="https://img-blog.csdnimg.cn/10c539987736402c9f85b38a477779e6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的性别是: &#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-moduel：checkbox"><a href="#v-moduel：checkbox" class="headerlink" title="v-moduel：checkbox"></a>v-moduel：checkbox</h3><p>复选框分为两种情况：单个勾选框和多个勾选框</p><blockquote><p>单个勾选框</p></blockquote><ul><li><code>v-moduel</code> 即为布尔值</li><li>此时 input 的 value 并不影响<code>v-model</code>的值</li></ul><blockquote><p>多个复选框</p></blockquote><ul><li>当是多个复选框时，因为可以选中多个，所以对应的 data 中属性是一个数组</li><li>当选中某一个时，就会将 input 的 value 添加到数组中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">&lt;!--  <span class="number">1.</span>checkbox单选框--&gt;</span><br><span class="line">  &lt;label for=&quot;agree&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;agree&quot; v-model=&quot;isAgree&quot;&gt;同意协议</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;h2&gt;您选择的是: &#123;&#123;isAgree&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button :disabled=&quot;!isAgree&quot;&gt;下一步&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--2.checkbox多选框--&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;篮球&quot; v-model=&quot;hobbies&quot;&gt;篮球</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;足球&quot; v-model=&quot;hobbies&quot;&gt;足球</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;乒乓球&quot; v-model=&quot;hobbies&quot;&gt;乒乓球</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;羽毛球&quot; v-model=&quot;hobbies&quot;&gt;羽毛球</span><br><span class="line">  &lt;h2&gt;您的爱好是: &#123;&#123;hobbies&#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">  &lt;label v-for=&quot;item in originHobbies&quot; :for=&quot;item&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; :value=&quot;item&quot; :id=&quot;item&quot; v-model=&quot;hobbies&quot;&gt;&#123;&#123;item&#125;&#125;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const app = new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: &#x27;你好啊&#x27;,</span><br><span class="line">      isAgree: false, // 单选框</span><br><span class="line">      hobbies: [], // 多选框,</span><br><span class="line">      originHobbies: [&#x27;篮球&#x27;, &#x27;足球&#x27;, &#x27;乒乓球&#x27;, &#x27;羽毛球&#x27;, &#x27;台球&#x27;, &#x27;高尔夫球&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-moduel：select"><a href="#v-moduel：select" class="headerlink" title="v-moduel：select"></a>v-moduel：select</h3><p>和 checkbox 一样，select 也分单选和多选两种情况</p><blockquote><p>单选：只能选中一个值</p></blockquote><ul><li><code>v-model</code> 绑定的是一个值</li><li>当我们选中 option 中的一个时，会将它对应的 vaule 赋值到 mySelect 中</li></ul><blockquote><p>多选：可以选中多个值</p></blockquote><ul><li><code>v-model</code> 绑定的是一个数组</li><li>当选中多个值时，就会将选中的 option 对应的 value 添加到数组 mySelects中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!--<span class="number">1.</span>选择一个--&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &lt;!--<span class="number">2.</span>选择多个--&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">multiple</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fruit</span>: <span class="string">&#x27;香蕉&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fruits</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>为了方便对用户输入的内容进行处理，vue 为 v-model 指令提供了 3 个修饰符</p><table><thead><tr><th>修饰符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>.number</td><td>自动将用户的输入值转化为数值类型</td><td><code>&lt;input v-model.number = &quot;age&quot; /&gt;</code></td></tr><tr><td>.trim</td><td>自动过滤用户输入的首尾空白字符</td><td><code>&lt;input v-module.trim = &quot;msg&quot; /&gt;</code></td></tr><tr><td>.lazy</td><td>在 <code>change</code> 时而非 <code>input</code> 时更新</td><td><code>&lt;input v-model.lazy = &quot;msg&quot; /&gt;</code></td></tr></tbody></table><blockquote><p>lazy修饰符</p></blockquote><ul><li>默认情况下， v-model 默认是在 input 事件中同步输入框的数据的。</li><li>也就是说，一旦有数据发生改变对应的 data 中的数据就会自动发生改变</li><li><code>lazy</code> 修饰符可以让数据在<strong>失去焦点或者回车时</strong>才会更新</li></ul><blockquote><p>number修饰符</p></blockquote><ul><li>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当作字符串类型进行处理</li><li>但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理</li><li><code>number</code> 修饰符可以让在输入框中输入的内容自动转换成数字类型</li></ul><blockquote><p>trim 修饰符</p></blockquote><ul><li>如果输入的内容首尾有很多空格，通常我们希望将其去除</li><li>trim 修饰符可以过滤内容左右两边的空格</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!--<span class="number">1.</span>修饰符: lazy--&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model.lazy=&quot;message&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!--2.修饰符: number--&gt;</span><br><span class="line">  &lt;input type=&quot;number&quot; v-model.number=&quot;age&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123;age&#125;&#125;-&#123;&#123;typeof age&#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--3.修饰符: trim--&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model.trim=&quot;name&quot;&gt;</span><br><span class="line">  &lt;h2&gt;您输入的名字:&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const app = new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: &#x27;你好啊&#x27;,</span><br><span class="line">      age: 0,</span><br><span class="line">      name: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2.0 </tag>
            
            <tag> Vue-router </tag>
            
            <tag> Vue Cli </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs基础</title>
      <link href="/myblog.github.io/2022/04/24/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/myblog.github.io/2022/04/24/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h1><h2 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js"></a>为什么要学习Node.js</h2><ul><li>企业需求<ul><li>具有服务端开发经验更改</li><li>front-end</li><li>back-end</li><li>全栈开发工程师</li><li>基本的网站开发能力<ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li><li>多人社区</li></ul></li></ul><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200317114503403.png" alt="image-20200317114503403"></p><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><ul><li>Node.js是JavaScript 运行时</li><li>通俗易懂的讲，Node.js是JavaScript的运行平台</li><li>Node.js既不是语言，也不是框架，它是一个平台</li><li>浏览器中的JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js中的JavaScript<ul><li>没有Bom，Dom</li><li>EcmaScript</li><li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http服务器</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li> envent-driven    事件驱动</li><li>non-blocking I/O mode   非阻塞I/O模型（异步）</li><li>ightweight and efficent.   轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>npm install jquery</li></ul></li></ul><h2 id="Node能做什么"><a href="#Node能做什么" class="headerlink" title="Node能做什么"></a>Node能做什么</h2><ul><li><p>web服务器后台</p></li><li><p>命令行工具</p><ul><li>npm(node)</li><li>git(c语言)</li><li>hexo（node）</li></ul></li><li><p>对于前端工程师来讲，接触最多的是它的命令行工具</p><ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h2><ul><li>查看Node环境的版本号</li><li>下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>安装：<ul><li>傻瓜式安装，一路<code>next</code></li><li>安装过再次安装会升级</li></ul></li><li>确认Node环境是否安装成功<ul><li>查看node的版本号：<code>node --version</code></li><li>或者<code>node -v</code></li></ul></li><li>配置环境变量</li></ul><h2 id="解析执行JavaScript"><a href="#解析执行JavaScript" class="headerlink" title="解析执行JavaScript"></a>解析执行JavaScript</h2><ol><li>创建编写JavaScript脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node  文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p><h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><p>文件读取:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浏览器中的JavaScript是没有文件操作能力的</span></span><br><span class="line"><span class="comment">//但是Node中的JavaScript具有文件操作能力</span></span><br><span class="line"><span class="comment">//fs是file-system的简写，就是文件系统的意思</span></span><br><span class="line"><span class="comment">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span></span><br><span class="line"><span class="comment">//在fs这个和兴模块中，就提供了人所有文件操作相关的API</span></span><br><span class="line"><span class="comment">//例如 fs.readFile就是用来读取文件的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./data/a.txt&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取失败&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文件写入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将数据写入文件</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./data/a.txt&#x27;</span>,<span class="string">&#x27;我是文件写入的信息&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入失败&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.加载http核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用http.createServer()创建一个web服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.服务器要做的事儿</span></span><br><span class="line"><span class="comment">// 提供服务：对数据服务</span></span><br><span class="line"><span class="comment">// 发请求</span></span><br><span class="line"><span class="comment">//接收请求</span></span><br><span class="line"><span class="comment">//处理请求</span></span><br><span class="line"><span class="comment">//反馈（发送响应）</span></span><br><span class="line"><span class="comment">//当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到客户的请求了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.绑定端口号，启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;runing...&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Node中的模块系统"><a href="#Node中的模块系统" class="headerlink" title="Node中的模块系统"></a>Node中的模块系统</h1><p>使用Node编写应用程序主要就是在使用：</p><ul><li><p>EcmaScript语言</p><ul><li>和浏览器一样，在Node中没有Bom和Dom</li></ul></li><li><p>核心模块</p><ul><li>文件操作的fs</li><li>http服务操作的http</li><li>url路径操作模块</li><li>path路径处理模块</li><li>os操作系统信息</li></ul></li><li><p>第三方模块</p><ul><li>art-template</li><li>必须通过npm来下载才可以使用</li></ul></li><li><p>自己写的模块</p><ul><li>自己创建的文件</li></ul></li></ul><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><ul><li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</li><li>通信规则<ul><li>加载require</li><li>导出exports</li></ul></li></ul><h2 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h2><p>在Node中的JavaScript还有一个重要的概念，模块系统。</p><ul><li><p>模块作用域</p></li><li><p>使用require方法来加载模块</p></li><li><p>使用exports接口对象来导出模板中的成员</p><h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 自定义变量名 = require(<span class="string">&#x27;模块&#x27;</span>)</span><br></pre></td></tr></table></figure><p>作用：</p><ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的<code>exports</code>导出接口对象</li></ul><h3 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h3><ul><li><p>Node中是模块作用域，默认文件中所有的成员只在当前模块有效</p></li><li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p><p>导出多个成员（必须在对象中）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">b</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">c</span> = &#123;</span><br><span class="line">    <span class="attr">foo</span>:<span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">d</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure><p>导出单个成员（拿到的就是函数，字符串）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以下情况会覆盖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//后者会覆盖前者</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过以下方法来导出多个成员：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    foo = <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="模块原理"><a href="#模块原理" class="headerlink" title="模块原理"></a>模块原理</h2><p>exports和<code>module.exports</code>的一个引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span> === <span class="variable language_">module</span>.<span class="property">exports</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>当给exports重新赋值后，exports！= module.exports.</code></p><p><code>最终return的是module.exports,无论exports中的成员是什么都没用。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">真正去使用的时候：</span><br><span class="line">导出单个成员：<span class="built_in">exports</span>.<span class="property">xxx</span> = xxx;</span><br><span class="line">导出多个成员：<span class="variable language_">module</span>.<span class="property">exports</span> 或者 modeule.<span class="property">exports</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用服务</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 引用模板</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="comment">// 公共路径</span></span><br><span class="line"><span class="keyword">var</span> wwwDir = <span class="string">&#x27;D:/app/www&#x27;</span>;</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> url = req.<span class="property">url</span>;</span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./template-apche.html&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;404 Not Found&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fs.<span class="title function_">readdir</span>(wwwDir, <span class="keyword">function</span> (<span class="params">err, files</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;Can not find www Dir.&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使用模板引擎解析替换data中的模板字符串</span></span><br><span class="line">            <span class="comment">// 去xmpTempleteList.html中编写模板语法</span></span><br><span class="line">            <span class="keyword">var</span> htmlStr = template.<span class="title function_">render</span>(data.<span class="title function_">toString</span>(), &#123; </span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;D:/app/www/ 的索引&#x27;</span>,</span><br><span class="line">                <span class="attr">files</span>:files </span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 发送响应数据</span></span><br><span class="line">            res.<span class="title function_">end</span>(htmlStr);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running....&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>jQuery中的each 和 原生<span class="title class_">JavaScript</span>方法forEach的区别：</span><br><span class="line">提供源头：</span><br><span class="line">    原生js是es5提供的（不兼容<span class="title class_">IE8</span>）,</span><br><span class="line">        jQuery的each是jQuery第三方库提供的（如果要使用需要用<span class="number">2</span>以下的版本也就是<span class="number">1.</span>版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].<span class="property">slice</span>.<span class="title function_">call</span>(jQuery实例对象)）才能使用</span><br><span class="line"><span class="number">2.</span>模块中导出多个成员和导出单个成员</span><br><span class="line"><span class="number">3.301</span>和<span class="number">302</span>的区别：</span><br><span class="line"><span class="number">301</span>永久重定向,浏览器会记住</span><br><span class="line">    <span class="number">302</span>临时重定向</span><br><span class="line"><span class="number">4.</span><span class="built_in">exports</span>和<span class="variable language_">module</span>.<span class="property">exports</span>的区别:</span><br><span class="line">每个模块中都有一个<span class="variable language_">module</span>对象</span><br><span class="line">    <span class="variable language_">module</span>对象中有一个<span class="built_in">exports</span>对象</span><br><span class="line">    我们可以把需要导出的成员都挂载到<span class="variable language_">module</span>.<span class="property">exports</span>接口对象中</span><br><span class="line">也就是<span class="string">`module.exports.xxx = xxx`</span>的方式</span><br><span class="line">    但是每次写太多了就很麻烦，所以<span class="title class_">Node</span>为了简化代码，就在每一个模块中都提供了一个成员叫<span class="string">`exports`</span></span><br><span class="line">    <span class="string">`exports === module.exports`</span>结果为<span class="literal">true</span>,所以完全可以<span class="string">`exports.xxx = xxx`</span></span><br><span class="line">    当一个模块需要导出单个成员的时候必须使用<span class="string">`module.exports = xxx`</span>的方式，=,使用<span class="string">`exports = xxx`</span>不管用,因为每个模块最终<span class="keyword">return</span>的是<span class="variable language_">module</span>.<span class="property">exports</span>,而<span class="built_in">exports</span>只是<span class="variable language_">module</span>.<span class="property">exports</span>的一个引用,所以<span class="string">`exports`</span>即使重新赋值,也不会影响<span class="string">`module.exports`</span>。</span><br><span class="line">    有一种赋值方式比较特殊：<span class="string">`exports = module.exports`</span>这个用来新建立引用关系的。</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="require的加载规则"><a href="#require的加载规则" class="headerlink" title="require的加载规则"></a>require的加载规则</h1><ul><li><p>核心模块</p><ul><li>模块名</li></ul></li><li><p>第三方模块</p><ul><li>模块名</li></ul></li><li><p>用户自己写的</p><ul><li>路径</li></ul></li></ul><h2 id="require的加载规则："><a href="#require的加载规则：" class="headerlink" title="require的加载规则："></a>require的加载规则：</h2><ul><li><p>优先从缓存加载</p></li><li><p>判断模块标识符</p><ul><li>核心模块</li><li>自己写的模块（路径形式的模块）</li><li>第三方模块（node_modules）<ul><li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li><li>npm<ul><li>开发人员可以把写好的框架库发布到npm上</li><li>使用者通过npm命令来下载</li></ul></li><li>使用方式：<code>var 名称 = require(&#39;npm install【下载包】 的包名&#39;)</code><ul><li>node_modules/express/package.json main</li><li>如果package.json或者main不成立，则查找被选择项：index.js</li><li>如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li></ul></li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果非路径形式的标识</span></span><br><span class="line"><span class="comment">// 路径形式的标识：</span></span><br><span class="line">    <span class="comment">// ./  当前目录 不可省略</span></span><br><span class="line">    <span class="comment">// ../  上一级目录  不可省略</span></span><br><span class="line">    <span class="comment">//  /xxx也就是D:/xxx</span></span><br><span class="line">    <span class="comment">// 带有绝对路径几乎不用（D:/a/foo.js）</span></span><br><span class="line"><span class="comment">// 首位表示的是当前文件模块所属磁盘根目录</span></span><br><span class="line"><span class="comment">// require(&#x27;./a&#x27;); </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心模块</span></span><br><span class="line"><span class="comment">// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方模块</span></span><br><span class="line"><span class="comment">// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require(&#x27;包名&#x27;)来加载才可以使用</span></span><br><span class="line"><span class="comment">// 第三方包的名字不可能和核心模块的名字是一样的</span></span><br><span class="line"><span class="comment">// 既不是核心模块，也不是路径形式的模块</span></span><br><span class="line"><span class="comment">//      先找到当前文所述目录的node_modules</span></span><br><span class="line"><span class="comment">//      然后找node_modules/art-template目录</span></span><br><span class="line"><span class="comment">//      node_modules/art-template/package.json</span></span><br><span class="line"><span class="comment">//      node_modules/art-template/package.json中的main属性</span></span><br><span class="line"><span class="comment">//      main属性记录了art-template的入口模块</span></span><br><span class="line"><span class="comment">//      然后加载使用这个第三方包</span></span><br><span class="line"><span class="comment">//      实际上最终加载的还是文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      如果package.json不存在或者mian指定的入口模块不存在</span></span><br><span class="line"><span class="comment">//      则node会自动找该目录下的index.js</span></span><br><span class="line"><span class="comment">//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span></span><br><span class="line"><span class="comment">//      </span></span><br><span class="line">        <span class="comment">// 如果条件都不满足则会进入上一级目录进行查找</span></span><br><span class="line"><span class="comment">// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span></span><br><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块标识符中的-和文件操作路径中的"><a href="#模块标识符中的-和文件操作路径中的" class="headerlink" title="模块标识符中的/和文件操作路径中的/"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 咱们所使用的所有文件操作的API都是异步的</span></span><br><span class="line"><span class="comment">// 就像ajax请求一样</span></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="comment">// 文件操作中 ./ 相当于当前模块所处磁盘根目录</span></span><br><span class="line"><span class="comment">// ./index.txt    相对于当前目录</span></span><br><span class="line"><span class="comment">// /index.txt    相对于当前目录</span></span><br><span class="line"><span class="comment">// /index.txt   绝对路径,当前文件模块所处根目录</span></span><br><span class="line"><span class="comment">// d:express/index.txt   绝对路径</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./index.txt&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>模块操作路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在模块加载中，相对路径中的./不能省略</span></span><br><span class="line"><span class="comment">// 这里省略了.也是磁盘根目录</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>)(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul><li>node package manage(node包管理器)</li><li>通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）</li></ul><h3 id="npm网站"><a href="#npm网站" class="headerlink" title="npm网站"></a>npm网站</h3><blockquote><p>​    npmjs.com    网站   是用来搜索npm包的</p></blockquote><h3 id="npm命令行工具"><a href="#npm命令行工具" class="headerlink" title="npm命令行工具"></a>npm命令行工具</h3><p>npm是一个命令行工具，只要安装了node就已经安装了npm。</p><p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p><p>升级npm(自己升级自己)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="variable language_">global</span> npm</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>npm init(生成package.json说明书文件)<ul><li>npm init -y(可以跳过向导，快速生成)</li></ul></li><li>npm install<ul><li>一次性把dependencies选项中的依赖项全部安装</li><li>简写（npm i）</li></ul></li><li>npm install 包名<ul><li>只下载</li><li>简写（npm i 包名）</li></ul></li><li>npm install –save 包名<ul><li>下载并且保存依赖项（package.json文件中的dependencies选项）</li><li>简写（npm i  包名）</li></ul></li><li>npm uninstall 包名<ul><li>只删除，如果有依赖项会依然保存</li><li>简写（npm un 包名）</li></ul></li><li>npm uninstall –save 包名<ul><li>删除的同时也会把依赖信息全部删除</li><li>简写（npm un 包名）</li></ul></li><li>npm help<ul><li>查看使用帮助</li></ul></li><li>npm 命令 –help<ul><li>查看具体命令的使用帮助（npm uninstall –help）</li></ul></li></ul><h3 id="解决npm被墙问题"><a href="#解决npm被墙问题" class="headerlink" title="解决npm被墙问题"></a>解决npm被墙问题</h3><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p><blockquote><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm%E6%B7%98%E5%AE%9D%E7%9A%84%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E6%8A%8Anpm%E5%9C%A8%E5%9B%BD%E5%86%85%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F%EF%BC%88%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%87%E4%BB%BD%EF%BC%89%E3%80%82">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p></blockquote><p>安装淘宝的cnpm：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在任意目录执行都可以</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--global表示安装到全局，而非当前目录</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--global不能省略，否则不管用</span></span><br><span class="line">npm install --global cnpm</span><br></pre></td></tr></table></figure><p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">走国外的npm服务器下载jQuery包，速度比较慢</span></span><br><span class="line">npm install jQuery;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用cnpm就会通过淘宝的服务器来下载jQuery</span></span><br><span class="line">cnpm install jQuery;</span><br></pre></td></tr></table></figure><p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery --registry=https://npm.taobao.org;</span><br></pre></td></tr></table></figure><p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://npm.taobao.org;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看npm配置信息</span></span><br><span class="line">npm config list;</span><br></pre></td></tr></table></figure><p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p><p>这个文件可以通过<code>npm init</code>自动初始化出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">D</span>:\code\node中的模块系统&gt;npm init</span><br><span class="line"><span class="title class_">This</span> utility will walk you through creating a package.<span class="property">json</span> file.</span><br><span class="line"><span class="title class_">It</span> only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line"><span class="title class_">See</span> <span class="string">`npm help json`</span> <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line"><span class="title class_">Use</span> <span class="string">`npm install &lt;pkg&gt;`</span> afterwards to install a package and</span><br><span class="line">save it <span class="keyword">as</span> a dependency <span class="keyword">in</span> the package.<span class="property">json</span> file.</span><br><span class="line"></span><br><span class="line"><span class="title class_">Press</span> ^C at any time to quit.</span><br><span class="line">package <span class="attr">name</span>: (node中的模块系统)</span><br><span class="line"><span class="title class_">Sorry</span>, name can only contain <span class="variable constant_">URL</span>-friendly characters.</span><br><span class="line">package <span class="attr">name</span>: (node中的模块系统) cls</span><br><span class="line"><span class="attr">version</span>: (<span class="number">1.0</span><span class="number">.0</span>)</span><br><span class="line"><span class="attr">description</span>: 这是一个测试项目</span><br><span class="line">entry <span class="attr">point</span>: (main.<span class="property">js</span>)</span><br><span class="line">test <span class="attr">command</span>:</span><br><span class="line">git <span class="attr">repository</span>:</span><br><span class="line"><span class="attr">keywords</span>:</span><br><span class="line"><span class="attr">author</span>: xiaochen</span><br><span class="line"><span class="attr">license</span>: (<span class="variable constant_">ISC</span>)</span><br><span class="line"><span class="title class_">About</span> to write to <span class="attr">D</span>:\code\node中的模块系统\package.<span class="property">json</span>:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;cls&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;这是一个测试项目&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;xiaochen&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Is</span> <span class="variable language_">this</span> <span class="variable constant_">OK</span>? (yes) yes</span><br></pre></td></tr></table></figure><p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p><p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p><ul><li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li><li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li></ul><h2 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h2><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p><p>npm5以后才加入这个文件</p><p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p><ul><li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li><li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</li><li><code>package-lock.json</code>这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址。。。）<ul><li>这样的话重新<code>npm install</code>的时候速度就可以提升</li></ul></li><li>从文件来看，有一个<code>lock</code>称之为锁<ul><li>这个<code>lock</code>使用来锁版本的</li><li>如果项目依赖了<code>1.1.1</code>版本</li><li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li><li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li></ul></li></ul><h2 id="path路径操作模块"><a href="#path路径操作模块" class="headerlink" title="path路径操作模块"></a>path路径操作模块</h2><blockquote><p>参考文档：<a href="https://nodejs.org/docs/latest-v13.x/api/path.html">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p></blockquote><ul><li>path.basename：获取路径的文件名，默认包含扩展名</li><li>path.dirname：获取路径中的目录部分</li><li>path.extname：获取一个路径中的扩展名部分</li><li>path.parse：把路径转换为对象<ul><li>root：根路径</li><li>dir：目录</li><li>base：包含后缀名的文件名</li><li>ext：后缀名</li><li>name：不包含后缀名的文件名</li></ul></li><li>path.join：拼接路径</li><li>path.isAbsolute：判断一个路径是否为绝对路径<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200315150610001.png" alt="image-20200315150610001"></li></ul><h1 id="Node中的其它成员-dirname-filename"><a href="#Node中的其它成员-dirname-filename" class="headerlink" title="Node中的其它成员(__dirname,__filename)"></a>Node中的其它成员(__dirname,__filename)</h1><p>在每个模块中，除了<code>require</code>,<code>exports</code>等模块相关的API之外，还有两个特殊的成员：</p><ul><li><p><code>__dirname</code>，是一个成员，可以用来<strong>动态</strong>获取当前文件模块所属目录的绝对路径</p></li><li><p><code>__filename</code>，可以用来<strong>动态</strong>获取当前文件的绝对路径（包含文件名）</p></li><li><p><code>__dirname</code>和<code>filename</code>是不受执行node命令所属路径影响的</p><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200315151551873.png" alt="image-20200315151551873"></p></li></ul><p>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。</p><p>所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。</p><p>就可以使用<code>__dirname</code>或者<code>__filename</code>来帮助我们解决这个问题</p><p>在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用<code>path.join()</code>来辅助拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(__dirname + &#x27;a.txt&#x27;);</span></span><br><span class="line"><span class="comment">// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname + <span class="string">&#x27;/a.txt&#x27;</span>),<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="keyword">throw</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</p></blockquote><blockquote><p><strong>注意：</strong></p><p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p><p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p></blockquote><h1 id="Express（快速的）"><a href="#Express（快速的）" class="headerlink" title="Express（快速的）"></a>Express（快速的）</h1><p>作者：Tj</p><p>原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</p><p>在node中有很多web开发框架。主要学习express</p><ul><li><p><code>http://expressjs.com/</code>,其中主要封装的是http。</p></li><li><p>```javascript<br>// 1 安装<br>// 2 引包<br>var express = require(‘express’);<br>// 3 创建服务器应用程序<br>//      也就是原来的http.createServer();<br>var app = express();</p><p>// 公开指定目录<br>// 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源<br>// 在Express中开放资源就是一个API的事<br>app.use(‘/public/‘,express.static(‘/public/‘));</p><p>//模板引擎在Express中开放模板也是一个API的事</p><p>// 当服务器收到get请求 / 的时候，执行回调处理函数<br>app.get(‘/‘,function(req,res){</p><pre><code>res.send(&#39;hello express&#39;);</code></pre><p>})</p><p>// 相当于server.listen<br>app.listen(3000,function(){</p><pre><code>console.log(&#39;app is runing at port 3000&#39;);</code></pre><p>})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 学习Express</span><br><span class="line"></span><br><span class="line">#### 起步安装</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">cnpm install express</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建app</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2. </span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// res.write(&#x27;Hello&#x27;);</span></span><br><span class="line">    <span class="comment">// res.write(&#x27;World&#x27;);</span></span><br><span class="line">    <span class="comment">// res.end()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// res.end(&#x27;hello world&#x27;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express app is runing...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h2><p>路由：</p><ul><li><p>请求方法</p></li><li><p>请求路径</p></li><li><p>请求处理函数</p></li></ul><p>get:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当你以get方法请求/的时候，执行对应的处理函数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当你以post方法请求/的时候，执行对应的处理函数</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Express静态服务API"><a href="#Express静态服务API" class="headerlink" title="Express静态服务API"></a>Express静态服务API</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;files&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/stataic&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建app</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放静态资源</span></span><br><span class="line"><span class="comment">// 1.当以/public/开头的时候，去./public/目录中找对应资源</span></span><br><span class="line"><span class="comment">// 访问：http://127.0.0.1:3000/public/login.html</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public/&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;./public/&#x27;</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问</span></span><br><span class="line"><span class="comment">// 访问：http://127.0.0.1:3000/login.html</span></span><br><span class="line"><span class="comment">// app.use(express.static(&#x27;./public/&#x27;));   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.访问：http://127.0.0.1:3000/a/login.html</span></span><br><span class="line"><span class="comment">// a相当于public的别名</span></span><br><span class="line"><span class="comment">// app.use(&#x27;/a/&#x27;,express.static(&#x27;./public/&#x27;)); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express app is runing...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="在Express中配置使用art-templete模板引擎"><a href="#在Express中配置使用art-templete模板引擎" class="headerlink" title="在Express中配置使用art-templete模板引擎"></a>在Express中配置使用<code>art-templete</code>模板引擎</h2><ul><li><a href="https://aui.github.io/art-template/">art-template官方文档</a></li><li>在node中，有很多第三方模板引擎都可以使用，不是只有<code>art-template</code><ul><li>还有ejs，jade（pug），handlebars，nunjucks</li></ul></li></ul><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save art-template</span><br><span class="line">npm install --save express-art-template</span><br><span class="line"></span><br><span class="line">//两个一起安装</span><br><span class="line">npm i --save art-template express-art-template</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="comment">// express默认会去views目录找index.html</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index.html&#x27;</span>,&#123;</span><br><span class="line">           <span class="attr">title</span>:<span class="string">&#x27;hello world&#x27;</span>     </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数views千万不要写错</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>,目录路径);</span><br></pre></td></tr></table></figure><h2 id="在Express中获取表单请求数据"><a href="#在Express中获取表单请求数据" class="headerlink" title="在Express中获取表单请求数据"></a>在Express中获取表单请求数据</h2><h4 id="获取get请求数据："><a href="#获取get请求数据：" class="headerlink" title="获取get请求数据："></a>获取get请求数据：</h4><p>Express内置了一个api，可以直接通过<code>req.query</code>来获取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过requery方法获取用户输入的数据</span></span><br><span class="line"><span class="comment">// req.query只能拿到get请求的数据</span></span><br><span class="line"> <span class="keyword">var</span> comment = req.<span class="property">query</span>;</span><br></pre></td></tr></table></figure><h4 id="获取post请求数据："><a href="#获取post请求数据：" class="headerlink" title="获取post请求数据："></a>获取post请求数据：</h4><p>在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p><p>安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save body-parser;</span><br></pre></td></tr></table></figure><p>配置：</p><p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置body-parser</span></span><br><span class="line"><span class="comment">// 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span></span><br><span class="line"><span class="comment">// 也就是说可以直接通过req.body来获取表单post请求数据</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">write</span>(<span class="string">&#x27;you posted:\n&#x27;</span>)</span><br><span class="line">  <span class="comment">// 可以通过req.body来获取表单请求数据</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在Express中配置使用express-session插件操作"><a href="#在Express中配置使用express-session插件操作" class="headerlink" title="在Express中配置使用express-session插件操作"></a>在Express中配置使用<code>express-session</code>插件操作</h3><blockquote><p>参考文档：<a href="https://github.com/expressjs/session">https://github.com/expressjs/session</a></p></blockquote><p>安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该插件会为req请求对象添加一个成员:req.session默认是一个对象</span></span><br><span class="line"><span class="comment">//这是最简单的配置方式</span></span><br><span class="line"><span class="comment">//Session是基于Cookie实现的</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="comment">//配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span></span><br><span class="line">  <span class="comment">//目的是为了增加安全性，防止客户端恶意伪造</span></span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>,</span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,<span class="comment">//无论是否适用Session，都默认直接分配一把钥匙</span></span><br><span class="line">  <span class="attr">cookie</span>: &#123; <span class="attr">secure</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读</span></span><br><span class="line"><span class="comment">//添加Session数据</span></span><br><span class="line"><span class="comment">//session就是一个对象</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写</span></span><br><span class="line"><span class="comment">//获取session数据</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">foo</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">delete</span> req.<span class="property">session</span>.<span class="property">foo</span></span><br></pre></td></tr></table></figure><p>提示：</p><p>默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。</p><h3 id="利用Express实现ADUS项目"><a href="#利用Express实现ADUS项目" class="headerlink" title="利用Express实现ADUS项目"></a>利用Express实现ADUS项目</h3><h4 id="模块化思想"><a href="#模块化思想" class="headerlink" title="模块化思想"></a>模块化思想</h4><p>模块如何划分:</p><ul><li>模块职责要单一</li></ul><p>javascript模块化：</p><ul><li>Node 中的 CommonJS</li><li>浏览器中的：<ul><li>AMD    require.js</li><li>CMD     sea.js</li></ul></li><li>es6中增加了官方支持</li></ul><h4 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h4><ul><li>初始化</li><li>模板处理</li></ul><h4 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h4><table><thead><tr><th>请求方法</th><th align="left">请求路径</th><th align="left">get参数</th><th>post参数</th><th align="left">备注</th></tr></thead><tbody><tr><td>GET</td><td align="left">/students</td><td align="left"></td><td></td><td align="left">渲染首页</td></tr><tr><td>GET</td><td align="left">/students/new</td><td align="left"></td><td></td><td align="left">渲染添加学生页面</td></tr><tr><td>POST</td><td align="left">/students/new</td><td align="left"></td><td>name,age,gender,hobbies</td><td align="left">处理添加学生请求</td></tr><tr><td>GET</td><td align="left">/students/edit</td><td align="left">id</td><td></td><td align="left">渲染编辑页面</td></tr><tr><td>POST</td><td align="left">/students/edit</td><td align="left"></td><td>id,name,age,gender,hobbies</td><td align="left">处理编辑请求</td></tr><tr><td>GET</td><td align="left">/students/delete</td><td align="left">id</td><td></td><td align="left">处理删除请求</td></tr></tbody></table><h4 id="提取路由模块"><a href="#提取路由模块" class="headerlink" title="提取路由模块"></a>提取路由模块</h4><p>router.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * router.js路由模块</span></span><br><span class="line"><span class="comment"> * 职责：</span></span><br><span class="line"><span class="comment"> *      处理路由</span></span><br><span class="line"><span class="comment"> *      根据不同的请求方法+请求路径设置具体的请求函数</span></span><br><span class="line"><span class="comment"> * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Express专门提供了一种更好的方式</span></span><br><span class="line"><span class="comment">// 专门用来提供路由的</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 1 创建一个路由容器</span></span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="comment">// 2 把路由都挂载到路由容器中</span></span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/students&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// res.send(&#x27;hello world&#x27;);</span></span><br><span class="line">    <span class="comment">// readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span></span><br><span class="line">    <span class="comment">// 除了这样来转换，也可以通过data.toString（）来转换</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./db.json&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Server error.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取到的文件数据是string类型的数据</span></span><br><span class="line">        <span class="comment">// console.log(data);</span></span><br><span class="line">        <span class="comment">// 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span></span><br><span class="line">        <span class="keyword">var</span> students = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data).<span class="property">students</span>;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;index.html&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// 读取文件数据</span></span><br><span class="line">            <span class="attr">students</span>:students</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/students/new&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;new.html&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/students/edit&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/students/edit&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/students/delete&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 把router导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// router(app);</span></span><br><span class="line"><span class="comment">// 把路由容器挂载到app服务中</span></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br></pre></td></tr></table></figure><h4 id="设计操作数据的API文件模块"><a href="#设计操作数据的API文件模块" class="headerlink" title="设计操作数据的API文件模块"></a>设计操作数据的API文件模块</h4><p>es6中的find和findIndex：</p><p>find接受一个方法作为参数，方法内部返回一个条件</p><p>find会便利所有的元素，执行你给定的带有条件返回值的函数</p><p>符合该条件的元素会作为find方法的返回值</p><p>如果遍历结束还没有符合该条件的元素，则返回undefined<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200313103810731.png" alt="image-20200313103810731"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * student.js</span></span><br><span class="line"><span class="comment"> * 数据操作文件模块</span></span><br><span class="line"><span class="comment"> * 职责：操作文件中的数据，只处理数据，不关心业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取所有学生列表</span></span><br><span class="line"><span class="comment">  * return []</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">find</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取添加保存学生</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">save</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新学生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">update</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除学生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">delete</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li><p>处理模板</p></li><li><p>配置静态开放资源</p></li><li><p>配置模板引擎</p></li><li><p>简单的路由，/studens渲染静态页出来</p></li><li><p>路由设计</p></li><li><p>提取路由模块</p></li><li><p>由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js’</p></li><li><p>先写好student.js文件结构</p><ul><li>查询所有学生列别哦的API</li><li>findById</li><li>save</li><li>updateById</li><li>deleteById</li></ul></li><li><p>实现具体功能</p><ul><li>通过路由收到请求</li><li>接受请求中的参数（get，post）<ul><li>req.query</li><li>req.body</li></ul></li><li>调用数据操作API处理数据</li><li>根据操作结果给客户端发送请求</li></ul></li><li><p>业务功能顺序</p><ul><li>列表</li><li>添加</li><li>编辑</li><li>删除</li></ul></li></ul><h4 id="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"><a href="#子模板和模板的继承（模板引擎高级语法）【include，extend，block】" class="headerlink" title="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p><p>模板页：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;zh&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;模板页&lt;/title&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/node_modules/bootstrap/dist/css/bootstrap.css&quot;/&gt;</span><br><span class="line">&#123;&#123; block &#x27;head&#x27; &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 通过include导入公共部分 --&gt;</span><br><span class="line">&#123;&#123;include &#x27;./header.html&#x27;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 留一个位置 让别的内容去填充 --&gt;</span><br><span class="line">&#123;&#123; block  &#x27;content&#x27; &#125;&#125;</span><br><span class="line">&lt;h1&gt;默认内容&lt;/h1&gt;</span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过include导入公共部分 --&gt;</span><br><span class="line">&#123;&#123;include &#x27;./footer.html&#x27;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 公共样式 --&gt;</span><br><span class="line">&lt;script src=&quot;/node_modules/jquery/dist/jquery.js&quot; &gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/node_modules/bootstrap/dist/js/bootstrap.js&quot; &gt;&lt;/script&gt;</span><br><span class="line">&#123;&#123; block &#x27;script&#x27; &#125;&#125;&#123;&#123; /block &#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>模板的继承：</p><p>​    header页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>公共的头部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>​    footer页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>公共的底部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>模板页的使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 继承(<span class="attr">extend</span>:延伸，扩展)模板也layout.<span class="property">html</span> --&gt;</span><br><span class="line">&lt;!-- 把layout.<span class="property">html</span>页面的内容都拿进来作为index.<span class="property">html</span>页面的内容 --&gt;</span><br><span class="line">&#123;&#123;extend <span class="string">&#x27;./layout.html&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 向模板页面填充新的数据 --&gt;</span><br><span class="line">&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;</span><br><span class="line">&lt;!-- style样式方面的内容 --&gt;</span><br><span class="line">&#123;&#123; block <span class="string">&#x27;head&#x27;</span> &#125;&#125;</span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">body&#123;</span><br><span class="line">background-<span class="attr">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br><span class="line">&#123;&#123; block <span class="string">&#x27;content&#x27;</span> &#125;&#125;</span><br><span class="line">&lt;div id=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index页面的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br><span class="line">&lt;!-- js部分的内容 --&gt;</span><br><span class="line">&#123;&#123; block <span class="string">&#x27;script&#x27;</span> &#125;&#125;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;&#123; /block &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h2><h3 id="关系型数据库（表就是关系，或者说表与表之间存在关系）。"><a href="#关系型数据库（表就是关系，或者说表与表之间存在关系）。" class="headerlink" title="关系型数据库（表就是关系，或者说表与表之间存在关系）。"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h3><ul><li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>而且数据表还支持约束<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ul><li>非关系型数据库非常的灵活</li><li>有的关系型数据库就是key-value对儿</li><li>但MongDB是长得最像关系型数据库的非关系型数据库<ul><li>数据库 -》 数据库</li><li>数据表 -》 集合（数组）</li><li>表记录 -》文档对象</li></ul></li></ul><p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">qq</span>:&#123;</span><br><span class="line">       <span class="attr">user</span>:[</span><br><span class="line">           &#123;&#125;,&#123;&#125;,&#123;&#125;...</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>下载</p><ul><li>下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></li></ul></li><li><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p></li><li><p>最后输入<code>mongod --version</code>测试是否安装成功</p></li></ul><h2 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h2><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所以在第一次执行该命令之前先自己手动新建一个 /data/db</span></span><br><span class="line">mongod</span><br></pre></td></tr></table></figure><p>如果想要修改默认的数据存储目录，可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath = 数据存储目录路径</span><br></pre></td></tr></table></figure><p>停止：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在开启服务的控制台，直接<span class="title class_">Ctrl</span>+C;</span><br><span class="line">或者直接关闭开启服务的控制台。</span><br></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 该命令默认连接本机的 <span class="title class_">MongoDB</span> 服务</span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><p>退出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在连接状态输入 exit 退出连接</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><code>show dbs</code><ul><li>查看数据库列表(数据库中的所有数据库)</li></ul></li><li><code>db</code><ul><li>查看当前连接的数据库</li></ul></li><li><code>use 数据库名称</code><ul><li>切换到指定的数据库，（如果没有会新建）</li></ul></li><li><code>show collections</code><ul><li>查看当前目录下的所有数据表</li></ul></li><li><code>db.表名.find()</code><ul><li>查看表中的详细信息</li></ul></li></ul><h2 id="在Node中如何操作MongoDB数据库"><a href="#在Node中如何操作MongoDB数据库" class="headerlink" title="在Node中如何操作MongoDB数据库"></a>在Node中如何操作MongoDB数据库</h2><h3 id="使用官方的MongoDB包来操作"><a href="#使用官方的MongoDB包来操作" class="headerlink" title="使用官方的MongoDB包来操作"></a>使用官方的<code>MongoDB</code>包来操作</h3><blockquote><p>​    <a href="http://mongodb.github.io/node-mongodb-native/">http://mongodb.github.io/node-mongodb-native/</a></p></blockquote><h3 id="使用第三方包mongoose来操作MongoDB数据库"><a href="#使用第三方包mongoose来操作MongoDB数据库" class="headerlink" title="使用第三方包mongoose来操作MongoDB数据库"></a>使用第三方包<code>mongoose</code>来操作MongoDB数据库</h3><p>​    第三方包：<code>mongoose</code>基于MongoDB官方的<code>mongodb</code>包再一次做了封装，名字叫<code>mongoose</code>，是WordPress项目团队开发的。</p><h2 id="学习指南（步骤）"><a href="#学习指南（步骤）" class="headerlink" title="学习指南（步骤）"></a>学习指南（步骤）</h2><p>官方学习文档：<a href="https://mongoosejs.com/docs/index.html">https://mongoosejs.com/docs/index.html</a></p><h3 id="设计Scheme-发布Model-创建表"><a href="#设计Scheme-发布Model-创建表" class="headerlink" title="设计Scheme 发布Model (创建表)"></a>设计Scheme 发布Model (创建表)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引包</span></span><br><span class="line"><span class="comment">// 注意：按照后才能require使用</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿到schema图表</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.连接数据库</span></span><br><span class="line"><span class="comment">// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost/test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.设计集合结构（表结构）</span></span><br><span class="line"><span class="comment">// 用户表</span></span><br><span class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line"><span class="attr">username</span>: &#123; <span class="comment">//姓名</span></span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">require</span>: <span class="literal">true</span> <span class="comment">//添加约束，保证数据的完整性，让数据按规矩统一</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">password</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">require</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">email</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.将文档结构发布为模型</span></span><br><span class="line"><span class="comment">// mongoose.model方法就是用来将一个架构发布为 model</span></span><br><span class="line"><span class="comment">// 第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称</span></span><br><span class="line"><span class="comment">// mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span></span><br><span class="line"><span class="comment">// 例如 这里会变成users集合名称</span></span><br><span class="line"><span class="comment">// 第二个参数：架构</span></span><br><span class="line"><span class="comment">// 返回值：模型构造函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>, userSchema);</span><br></pre></td></tr></table></figure><h3 id="添加数据（增）"><a href="#添加数据（增）" class="headerlink" title="添加数据（增）"></a>添加数据（增）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.通过模型构造函数对User中的数据进行操作</span></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line"><span class="attr">email</span>: <span class="string">&#x27;xiaochen@qq.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">user.<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, ret</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;保存失败&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;保存成功&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删除（删）"><a href="#删除（删）" class="headerlink" title="删除（删）"></a>删除（删）</h3><p>根据条件删除所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">remove</span>(&#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;xiaoxiao&#x27;</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, ret</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除失败&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>根据条件删除一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">findOneAndRemove</span>(conditions,[options],[callback]);</span><br></pre></td></tr></table></figure><p>根据id删除一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findByIdAndRemove</span>(id,[options],[callback]);</span><br></pre></td></tr></table></figure><h3 id="更新（改）"><a href="#更新（改）" class="headerlink" title="更新（改）"></a>更新（改）</h3><p>更新所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">remove</span>(conditions,doc,[options],[callback]);</span><br></pre></td></tr></table></figure><p>根据指定条件更新一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title class_">FindOneAndUpdate</span>([conditions],[update],[options],[callback]);</span><br></pre></td></tr></table></figure><p>根据id更新一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新根据id来修改表数据</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(<span class="string">&#x27;5e6c5264fada77438c45dfcd&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;junjun&#x27;</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, ret</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新失败&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新成功&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="查询（查）"><a href="#查询（查）" class="headerlink" title="查询（查）"></a>查询（查）</h3><p>查询所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">err,ret</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询失败&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>条件查询所有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据条件查询</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>(&#123; <span class="attr">username</span>:<span class="string">&#x27;xiaoxiao&#x27;</span> &#125;,<span class="keyword">function</span>(<span class="params">err,ret</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询失败&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>条件查询单个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照条件查询单个，查询出来的数据是一个对象（&#123;&#125;）</span></span><br><span class="line"><span class="comment">// 没有条件查询使用findOne方法，查询的是表中的第一条数据</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;xiaoxiao&#x27;</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, ret</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询失败&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="使用Node操作MySQL数据库"><a href="#使用Node操作MySQL数据库" class="headerlink" title="使用Node操作MySQL数据库"></a>使用Node操作MySQL数据库</h1><p>文档：<a href="https://www.npmjs.com/package/mysql">https://www.npmjs.com/package/mysql</a></p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save  mysql</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mysql包</span></span><br><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  host     : <span class="string">&#x27;localhost&#x27;</span>,<span class="comment">//本机</span></span><br><span class="line">  user     : <span class="string">&#x27;me&#x27;</span>,<span class="comment">//账号root</span></span><br><span class="line">  password : <span class="string">&#x27;secret&#x27;</span>,<span class="comment">//密码12345</span></span><br><span class="line">  database : <span class="string">&#x27;my_db&#x27;</span><span class="comment">//数据库名</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 连接数据库（打开冰箱门）</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//执行数据操作（把大象放到冰箱）</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;SELECT * FROM `users` &#x27;</span>, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;<span class="comment">//抛出异常阻止代码往下执行</span></span><br><span class="line">  <span class="comment">// 没有异常打印输出结果</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is: &#x27;</span>,results);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接（关闭冰箱门）</span></span><br><span class="line">connection.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>不成立的情况下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> ret = x + y;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 结果是 1 3 undefined 4</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200313085008929.png" alt="image-20200313085008929"></p><p>使用回调函数解决：</p><p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y,callback</span>)&#123;</span><br><span class="line">    <span class="comment">// callback就是回调函数</span></span><br><span class="line">    <span class="comment">// var x = 10;</span></span><br><span class="line">    <span class="comment">// var y = 20;</span></span><br><span class="line">    <span class="comment">// var callback = function(ret)&#123;console.log(ret);&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = x + y;</span><br><span class="line">        <span class="title function_">callback</span>(ret);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：</p><p>​    凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p><p>​    这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)</p><p>ajax:</p><p>基于原生XMLHttpRequest封装get方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 当请求加载成功要调用指定的函数</span></span><br><span class="line">oReq.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(oReq.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br><span class="line">oReq.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;请求路径&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">oReq.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url,callback</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> oReq = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 当请求加载成功要调用指定的函数</span></span><br><span class="line">    oReq.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//console.log(oReq.responseText);</span></span><br><span class="line">        <span class="title function_">callback</span>(oReq.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    oReq.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url,<span class="literal">true</span>);</span><br><span class="line">    oReq.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">get</span>(<span class="string">&#x27;data.json&#x27;</span>,<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>callback  hell（回调地狱）:</p><p>文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./data/a.text&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./data/b.text&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过回调嵌套的方式来保证顺序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./data/a.text&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./data/b.text&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./data/a.text&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="comment">// 1 读取失败直接打印输出读取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line"><span class="comment">// 2 抛出异常</span></span><br><span class="line"><span class="comment">// 阻止程序的执行</span></span><br><span class="line"><span class="comment">// 把错误信息打印到控制台</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Promise：承诺，保证</li><li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li></ul><p>基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在EcmaScript 6中新增了一个API Promise</span></span><br><span class="line"><span class="comment">// Promise 是一个构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 1 创建Promise容器resolve:解决   reject：失败</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./a.text&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="comment">// console.log(err);</span></span><br><span class="line"><span class="comment">// 把容器的Pending状态变为rejected</span></span><br><span class="line"><span class="title function_">reject</span>(err);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// console.log(data);</span></span><br><span class="line"><span class="comment">// 把容器的Pending状态变为resolve</span></span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1234</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当p1成功了，然后就（then）做指定的操作</span></span><br><span class="line"><span class="comment">// then方法接收的function就是容器中的resolve函数</span></span><br><span class="line">p1</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件失败了&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>封装Promise的<code>readFile</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pReadFile</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">fs.<span class="title function_">readFile</span>(filePath, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="title function_">reject</span>(err);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">pReadFile</span>(<span class="string">&#x27;./a.txt&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">pReadFile</span>(<span class="string">&#x27;./b.txt&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">pReadFile</span>(<span class="string">&#x27;./a.txt&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mongoose所有的API都支持Promise：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>注册：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span>&#125;,<span class="keyword">function</span>(<span class="params">user</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(user)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户已存在&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line">             <span class="attr">username</span>:<span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">             <span class="attr">password</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">             <span class="attr">email</span>:<span class="string">&#x27;fffff&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;注册成功&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">user</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(user)&#123;</span><br><span class="line">            <span class="comment">// 用户已经存在不能注册</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户已存在&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 用户不存在可以注册</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(&#123;</span><br><span class="line">                <span class="attr">username</span>:<span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">                <span class="attr">password</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">                <span class="attr">email</span>:<span class="string">&#x27;fffff&#x27;</span></span><br><span class="line">            &#125;).<span class="title function_">save</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">funciton</span>(<span class="params">ret</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;注册成功&#x27;</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>async函数</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="修改完代码自动重启"><a href="#修改完代码自动重启" class="headerlink" title="修改完代码自动重启"></a>修改完代码自动重启</h2><p>我们在这里可以使用一个第三方命名行工具：<code>nodemon</code>来帮助我们解决频繁修改代码重启服务器的问题。</p><p><code>nodemon</code>是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#在任意目录执行该命令都可以</span><br><span class="line">#也就是说，所有需要 --<span class="variable language_">global</span>安装的包都可以在任意目录执行</span><br><span class="line">npm install --<span class="variable language_">global</span> nodemon</span><br><span class="line">npm install -g nodemon</span><br><span class="line"></span><br><span class="line">#如果安装不成功的话，可以使用cnpm安装</span><br><span class="line">cnpm install -g nodemon</span><br></pre></td></tr></table></figure><p>安装完毕之后使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node app.<span class="property">js</span></span><br><span class="line"></span><br><span class="line">#使用nodemon</span><br><span class="line">nodemon app.<span class="property">js</span></span><br></pre></td></tr></table></figure><p>只要是通过<code>nodemon</code>启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。</p><h2 id="封装异步API"><a href="#封装异步API" class="headerlink" title="封装异步API"></a>封装异步API</h2><p>回调函数：获取异步操作的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="comment">// var callback = funtion(data)&#123; console.log(data); &#125;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">        <span class="title function_">callback</span>(data);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数组的遍历方法，都是对函数作为一种参数"><a href="#数组的遍历方法，都是对函数作为一种参数" class="headerlink" title="数组的遍历方法，都是对函数作为一种参数"></a>数组的遍历方法，都是对函数作为一种参数</h2><h2 id="EcmaScript-6"><a href="#EcmaScript-6" class="headerlink" title="EcmaScript 6"></a>EcmaScript 6</h2><blockquote><p>参考文档：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p></blockquote><h1 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">app.<span class="property">js</span>项目的入口文件</span><br><span class="line">controllers</span><br><span class="line">models存储使用mongoose设计的数据模型</span><br><span class="line">node_modules第三方包</span><br><span class="line">package.<span class="property">json</span>包描述文件</span><br><span class="line">package-lock.<span class="property">json</span>第三方包版本锁定文件（npm5之后才有）</span><br><span class="line">public公共静态资源</span><br><span class="line">routes</span><br><span class="line">views存储视图目录</span><br></pre></td></tr></table></figure><h2 id="模板页"><a href="#模板页" class="headerlink" title="模板页"></a>模板页</h2><ul><li>子模板</li><li>模板继承</li></ul><h2 id="路由设计-1"><a href="#路由设计-1" class="headerlink" title="路由设计"></a>路由设计</h2><table><thead><tr><th>路由</th><th>方法</th><th>get参数</th><th>post参数</th><th>是否需要登录</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>get</td><td></td><td></td><td></td><td>渲染首页</td></tr><tr><td>/register(登录)</td><td>get</td><td></td><td></td><td></td><td>渲染注册页面</td></tr><tr><td>/register</td><td>post</td><td></td><td>email,nickname,password</td><td></td><td>处理注册请求</td></tr><tr><td>/login</td><td>get</td><td></td><td></td><td></td><td>渲染登陆界面</td></tr><tr><td>/login</td><td>post</td><td></td><td>email,password</td><td></td><td>处理登录请求</td></tr><tr><td>/loginout</td><td>get</td><td></td><td></td><td></td><td>处理退出请求</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h2><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ul><li>创建目录结构</li><li>整合静态也-模板页<ul><li>include</li><li>block</li><li>extend</li></ul></li><li>设计用户登陆，退出，注册的路由</li><li>用户注册<ul><li>先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）</li><li>服务端<ul><li>获取从客户端收到的数据</li><li>操作数据库<ul><li>如果有错，发送500告诉客户端服务器错了‘</li><li>其他的根据业务发送不同的响应数据</li></ul></li></ul></li></ul></li><li>登录</li><li>退出</li></ul><h1 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h1><h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/guide/using-middleware.html">http://expressjs.com/en/guide/using-middleware.html</a></p></blockquote><p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p><p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p><p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cookie = <span class="built_in">require</span>(<span class="string">&#x27;./expressPtoject/cookie&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> query = <span class="built_in">require</span>(<span class="string">&#x27;./expressPtoject/query&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> postBody = <span class="built_in">require</span>(<span class="string">&#x27;./expressPtoject/post-body&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 解析请求地址中的get参数</span></span><br><span class="line"><span class="comment">// var obj = url.parse(req.url,true);</span></span><br><span class="line"><span class="comment">// req.query = obj.query;</span></span><br><span class="line"><span class="title function_">query</span>(req,res);<span class="comment">//中间件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析请求地址中的post参数</span></span><br><span class="line">req.<span class="property">body</span> = &#123;</span><br><span class="line"><span class="attr">foo</span>:<span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(req.<span class="property">url</span> === <span class="string">&#x27;xxx&#x27;</span>)&#123;</span><br><span class="line"><span class="comment">// 处理请求</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000 runing...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/abc&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"><span class="comment">// 同一个请求的req和res是一样的，</span></span><br><span class="line"><span class="comment">// 可以前面存储下面调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/abc&#x27;</span>);</span><br><span class="line"><span class="comment">// req.foo = &#x27;bar&#x27;;</span></span><br><span class="line">req.<span class="property">body</span> = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiaoxiao&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/abc&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(req.foo);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/abc&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app is running at port 3000.&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类:"></a>中间件的分类:</h2><h3 id="应用程序级别的中间件"><a href="#应用程序级别的中间件" class="headerlink" title="应用程序级别的中间件"></a>应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Time&#x27;</span>,<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关心请求路径和请求方法的中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/a&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Time&#x27;</span>,<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p><p>get:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;get&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>post：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/a&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;post&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>put:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;put&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>delete:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/delete&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="总"><a href="#总" class="headerlink" title="总"></a>总</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件：处理请求，本质就是个函数</span></span><br><span class="line"><span class="comment">// 在express中，对中间件有几种分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 不关心任何请求路径和请求方法的中间件</span></span><br><span class="line"><span class="comment">// 也就是说任何请求都会进入这个中间件</span></span><br><span class="line"><span class="comment">// 中间件本身是一个方法，该方法接收三个参数</span></span><br><span class="line"><span class="comment">// Request 请求对象</span></span><br><span class="line"><span class="comment">// Response 响应对象</span></span><br><span class="line"><span class="comment">// next 下一个中间件</span></span><br><span class="line"><span class="comment">// // 全局匹配中间件</span></span><br><span class="line"><span class="comment">// app.use(function(req, res, next) &#123;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;1&#x27;);</span></span><br><span class="line"><span class="comment">// // 当一个请求进入中间件后</span></span><br><span class="line"><span class="comment">// // 如果需要请求另外一个方法则需要使用next（）方法</span></span><br><span class="line"><span class="comment">// next();</span></span><br><span class="line"><span class="comment">// // next是一个方法，用来调用下一个中间件</span></span><br><span class="line"><span class="comment">//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// app.use(function(req, res, next) &#123;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;2&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 2 关心请求路径的中间件</span></span><br><span class="line"><span class="comment">// // 以/xxx开头的中间件</span></span><br><span class="line"><span class="comment">// app.use(&#x27;/a&#x27;,function(req, res, next) &#123;</span></span><br><span class="line"><span class="comment">// console.log(req.url);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 严格匹配请求方法和请求路径的中间件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/a&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/a&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app is running at port 3000.&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err,req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err,stack);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something broke&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置使用404中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;404.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置全局错误处理中间件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;.a/bc&#x27;</span>, <span class="title function_">funtion</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span></span><br><span class="line">        <span class="comment">// 当发生全局错误的时候，我们可以调用next传递错误对象</span></span><br><span class="line">        <span class="comment">// 然后被全局错误处理中间件匹配到并进行处理</span></span><br><span class="line"><span class="title function_">next</span>(err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//全局错误处理中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">err,req,res,next</span>)&#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">err_code</span>:<span class="number">500</span>,</span><br><span class="line">        <span class="attr">message</span>:err.<span class="property">message</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h2><ul><li>express.static(提供静态文件)<ul><li><a href="http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li></ul></li></ul><h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/resources/middleware.html">http://expressjs.com/en/resources/middleware.html</a></p></blockquote><ul><li>body-parser</li><li>compression</li><li>cookie-parser</li><li>mogran</li><li>response-time</li><li>server-static</li><li>session</li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> 模块化开发 </tag>
            
            <tag> Express框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础知识汇总</title>
      <link href="/myblog.github.io/2022/04/24/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
      <url>/myblog.github.io/2022/04/24/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CSS构造块"><a href="#CSS构造块" class="headerlink" title="CSS构造块"></a>CSS构造块</h2><p><strong>1. HTML的局限性</strong></p><ul><li>HTML满足不了设计者的需求，可以将网页结构与样式相分离，这样就可以在不更改网页结构的前提下，更换网站的样式。</li><li>操作html属性不方便</li><li>HTML里面添加样式带来的是无尽的臃肿和繁琐</li></ul><p><strong>2. CSS网页的美容师</strong></p><ul><li>让我们的网页更加丰富多彩，布局更加灵活自如。</li><li>CSS最大的贡献：让HTML从样式中脱离，实现了HTML专注去做结构呈现，样式交给CSS</li></ul><p><strong>3. CSS</strong></p><p>CSS(Cascading Style Sheets)通常称为CSS样式表或层叠样式表(级联样式表)。</p><ul><li><p><strong>作用</strong></p></li><li><ul><li>主要用于设置HTML页面中的文本内容(字体、大小、对齐方式等)\图片的外形(宽高、边框样式、边距等)以及版面的布局和外观显示样式。</li><li>CSS以HTML为基础，提供了丰富的功能，如字体、样式、背景的控制及整体排版等，而且可以针对不同的浏览器设置不同的样式。</li></ul></li></ul><p><strong>4. CSS注释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* 这是注释 */</span><br></pre></td></tr></table></figure><h3 id="引入CSS样式表"><a href="#引入CSS样式表" class="headerlink" title="引入CSS样式表"></a>引入CSS样式表</h3><p><strong>1.行内式(内联样式)</strong></p><p>通过标签的style属性来设置元素的样式</p><ul><li>style其实就是标签的属性</li><li>样式属性和值中间是:</li><li>多组属性值直接用;隔开</li><li>只能控制当前的标签和以及嵌套在其中的字标签，造成代码冗余。</li><li>**缺点:**没有实现样式和结构相分离。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 style=&quot;属性1:属性值1; 属性2:属性值2; 属性3:属性值3;&quot;&gt; 内容 &lt;/标签名&gt;</span><br><span class="line">例如：</span><br><span class="line">&lt;div style=&quot;color: red; font-size: 12px;&quot;&gt;青春不常在，抓紧谈恋爱&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>「2.内部样式表(内嵌样式表)」</strong></p><p>也称为内嵌式，将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义。</p><ul><li>style标签一般位于head标签中，当然理论上他可以放在HTML文档的任何地方。</li><li>type=”text/css”  在html5中可以省略。</li><li>只能控制当前的页面</li><li>**缺点:**没有彻底分离结构与样式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style type=&quot;text/CSS&quot;&gt;</span><br><span class="line">    选择器（选择的标签） &#123; </span><br><span class="line">      属性1: 属性值1;</span><br><span class="line">      属性2: 属性值2; </span><br><span class="line">      属性3: 属性值3;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p><strong>「3.外部样式表(外链式)」</strong></p><p>也称链入式，是将所有的样式放在一个或多个以.css为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中。</p><ul><li><code>rel</code>:定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</li><li><code>href</code>:定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>「4.团队约定-代码风格」</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*1.紧凑格式 (Compact)*/</span><br><span class="line">h3 &#123; color: deeppink;font-size: 20px;&#125;</span><br><span class="line">// 2.一种是展开格式（推荐）</span><br><span class="line">h3 &#123;</span><br><span class="line"> color: deeppink;</span><br><span class="line">    font-size: 20px;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 团队约定-代码大小写*/</span><br><span class="line">/* 样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。*/</span><br><span class="line">/* 推荐 */</span><br><span class="line">h3&#123;</span><br><span class="line"> color: pink;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/* 不推荐 */</span><br><span class="line">H3&#123;</span><br><span class="line"> COLOR: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><h3 id="CSS选择器作用"><a href="#CSS选择器作用" class="headerlink" title="CSS选择器作用"></a>CSS选择器作用</h3><p>找到指定的HTML页面元素，选择标签。</p><h3 id="CSS基础选择器-1"><a href="#CSS基础选择器-1" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h3><p><strong>「1. 标签选择器」</strong></p><ul><li>标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</li><li>作用：可以把某一类标签全部选择出来。</li><li>优点：快速为网页中同类型的标签统一样式</li><li>缺点：不能设计差异化样式。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125; </span><br></pre></td></tr></table></figure><p><strong>「2. 类选择器」</strong></p><ul><li>类选择器使用”.”(英文点号)进行标识，后面紧跟类名。</li><li>语法：类名选择器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.类名  &#123;   </span><br><span class="line">    属性1:属性值1; </span><br><span class="line">    属性2:属性值2; </span><br><span class="line">    属性3:属性值3;     </span><br><span class="line">&#125;</span><br><span class="line">&lt;p class=&#x27;类名&#x27;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>优点</code>：可以为元素对象定义单独或相同的样式。可以选择一个或者多个标签。</p></li><li><p><code>注意</code>：类选择器使用“.”（英文点号）进行标识，后面紧跟类名(自定义，我们自己命名的)</p></li><li><ul><li>长名称或词组可以使用中横线来为选择器命名。</li><li>不要纯数字、中文等命名， 尽量使用英文字母来表示。</li><li>多类名选择器：各个类名中间用空格隔开。</li></ul></li></ul><p><strong>「3. id选择器」</strong>id选择器使用<code>#</code>进行标识，后面紧跟id名</p><ul><li>元素的id值是唯一的，只能对应于文档中某一个具体的元素。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#id名 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br><span class="line">&lt;p id=&quot;id名&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>「4. 通配符选择器」</strong></p><p>通配符选择器用<code>*</code>号表示，<code>*</code> 就是选择所有的标签。它是所有选择器中作用范围最广的，能匹配页面中所有的元素。</p><ul><li><code>注意</code>：会匹配页面所有的元素，降低页面响应速度，不建议随便使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure><p>例如下面代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  margin: 0;                    /* 定义外边距*/</span><br><span class="line">  padding: 0;                   /* 定义内边距*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>「5. 基础选择器总结」</strong></p><table><thead><tr><th align="left">选择器</th><th align="left">作用</th><th align="left">缺点</th><th align="left">使用情况</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">标签选择器</td><td align="left">可以选出所有相同的标签，比如p</td><td align="left">不能差异化选择</td><td align="left">较多</td><td align="left">p { color：red;}</td></tr><tr><td align="left">类选择器</td><td align="left">可以选出1个或者多个标签</td><td align="left">可以根据需求选择</td><td align="left">非常多</td><td align="left">.nav { color: red; }</td></tr><tr><td align="left">id选择器</td><td align="left">一次只能选择器1个标签</td><td align="left">只能使用一次</td><td align="left">不推荐使用</td><td align="left">#nav {color: red;}</td></tr><tr><td align="left">通配符选择器</td><td align="left">选择所有的标签</td><td align="left">选择的太多，有部分不需要</td><td align="left">不推荐使用</td><td align="left">* {color: red;}</td></tr></tbody></table><p><strong>「6. 团队约定-选择器」</strong></p><ol><li>尽量少用通配符选择器 <code>*</code>。</li><li>尽量少用ID选择器</li><li>不使用无具体语义定义的标签选择器。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 推荐 */</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">li &#123;&#125;</span><br><span class="line">p&#123;&#125;</span><br><span class="line"></span><br><span class="line">/* 不推荐 */</span><br><span class="line">*&#123;&#125;</span><br><span class="line">#jdc &#123;&#125;</span><br><span class="line">div&#123;&#125;   因为div 没有语义，我们尽量少用</span><br></pre></td></tr></table></figure><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</p><p><strong>「1. 后代选择器」</strong>又称为包含选择器</p><ul><li>用来选择元素或元素组的子孙后代</li><li>其写法就是把外层标签写在前面，内层标签写在后面，中间用<strong>「空格」</strong>分隔，先写父亲爷爷，再写儿子孙子。</li><li>子孙后代都可以这么选择。或者说，它能选择任何包含在内 的标签。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父级 子级&#123;属性:属性值;属性:属性值;&#125;</span><br><span class="line"></span><br><span class="line">.class h3 &#123;color:red;font-size:16px;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bc5pD3YIogL5EiblDcricNvp6WyicAjicIpxYbofDTPe7T66Q4Em2ibpQ8Fg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><ul><li>当标签发生嵌套时，内层标签就成为外层标签的后代。</li><li>子孙后代都可以这么选择。或者说，它能选择任何包含在内的标签。</li></ul><p><strong>「2. 子元素选择器」</strong></p><ul><li>子元素选择器只能选择作为某元素子元素(亲儿子)的元素。</li><li>其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 <code>&gt;</code> 进行连接</li><li>这里的子,指的是<strong>亲儿子</strong>。不包含孙子 重孙子之类。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.class&gt;h3 &#123;color:red;font-size:14px;&#125;</span><br></pre></td></tr></table></figure><p><strong>「3. 交集选择器」</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bmB0Isp6lqsECib7wFZAo47SADSs6OZCgnjwsvJUnPRMBS6s1iamibZKYw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><ul><li>其中第一个为标签选择器，第二个为class选择器，两个选择器之间<code>不能有空格</code>，如h3.special。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">交集选择器是并且的意思,即...又...的意思</span><br><span class="line">比如：   p.one   选择的是： 类名为 .one 的段落标签。 </span><br><span class="line">/*用的相对来说比较少，不建议使用。*/</span><br></pre></td></tr></table></figure><p><strong>「4. 并集选择器」</strong>如果某些选择器定义的相同样式，就可以利用并集选择器，可以让代码更简洁。并集选择器（CSS选择器分组）是各个选择器通过<code>,</code>连接而成的，通常用于集体声明。</p><ul><li>任何形式的选择器（包括标签选择器、class类选择器 id选择器等），都可以作为并集选择器的一部分。</li><li>并集选择器通常用于集体声明  ，逗号隔开的，所有选择器都会执行后面样式，逗号可以理解为和的意思。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">比如  </span><br><span class="line">.one, </span><br><span class="line">p , </span><br><span class="line">#test &#123;color: #F00;&#125;  </span><br><span class="line">表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 </span><br><span class="line">通常用于集体声明。  </span><br></pre></td></tr></table></figure><p><strong>「5. 链接伪类选择器」</strong></p><p>用于向某些选择器添加特殊的效果。写的时候，他们的顺序尽量不要颠倒,按照lvha的顺序。否则可能引起错误。</p><p>链接伪类，是利用交集选择器.</p><ul><li><code>a:link</code>  未访问的链接</li><li><code>a:visited</code>  已访问的链接</li><li><code>a:hover</code>  鼠标移动到链接上</li><li><code>a:active</code>  选定的链接</li></ul><h5 id="实际工作中，很少写全四个状态，一般写法如下："><a href="#实际工作中，很少写全四个状态，一般写法如下：" class="headerlink" title="实际工作中，很少写全四个状态，一般写法如下："></a>实际工作中，很少写全四个状态，一般写法如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a &#123;   /* a是标签选择器  所有的链接 */</span><br><span class="line">   font-weight: 700;</span><br><span class="line">   font-size: 16px;</span><br><span class="line">   color: gray;</span><br><span class="line">      text-decoration: none; /* 清除链接默认的下划线*/</span><br><span class="line">&#125;</span><br><span class="line">a:hover &#123;   /* :hover 是链接伪类选择器 鼠标经过 */</span><br><span class="line">   color: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【:fouce选择器】</p><p><strong>「6. 复合选择器总结」</strong></p><table><thead><tr><th align="left">选择器</th><th align="left">作用</th><th align="left">特征</th><th align="left">使用情况</th><th align="left">隔开符号及用法</th></tr></thead><tbody><tr><td align="left">后代选择器</td><td align="left">用来选择元素后代</td><td align="left">是选择所有的子孙后代</td><td align="left">较多</td><td align="left">符号是<code>空格</code> .nav a</td></tr><tr><td align="left">子代选择器</td><td align="left">选择 最近一级元素</td><td align="left">只选亲儿子</td><td align="left">较少</td><td align="left">符号是<code>&gt;</code>  .nav&gt;p</td></tr><tr><td align="left">交集选择器</td><td align="left">选择两个标签交集的部分</td><td align="left">既是 又是</td><td align="left">较少</td><td align="left"><code>没有符号</code>  p.one</td></tr><tr><td align="left">并集选择器</td><td align="left">选择某些相同样式的选择器</td><td align="left">可以用于集体声明</td><td align="left">较多</td><td align="left">符号是<code>逗号</code> .nav, .header</td></tr><tr><td align="left">链接伪类选择器</td><td align="left">给链接更改状态</td><td align="left"></td><td align="left">较多</td><td align="left">重点记住 a{} 和 a:hover  实际开发的写法</td></tr></tbody></table><hr><h2 id="CSS字体样式"><a href="#CSS字体样式" class="headerlink" title="CSS字体样式"></a>CSS字体样式</h2><h3 id="font字体"><a href="#font字体" class="headerlink" title="font字体"></a>font字体</h3><p><strong>「1. font-size」</strong></p><ul><li>font-size属性用于设置字号(字体大小)</li><li><code>谷歌浏览器</code>默认的文字大小为16px</li><li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123; font-size:20px; &#125;</span><br></pre></td></tr></table></figure><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><ul><li>相对长度单位、绝对长度单位</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bVSI8GFv6xicpGyAOicfYvoraJGCokvyicHS5zzlsx7tMPhFUpAPaqbasQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><strong>「2. font-family」</strong></p><ul><li>font-family属性用于设置哪一种字体。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123; font-family:&quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure><ul><li>指定多个字体，如果浏览器不支持第一个字体就会尝试下一个直到找到合适的字体，如果都没有，以电脑默认字体为准。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123;font-family: Arial,&quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>CSS Unicode字体</p></li><li><ul><li>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。</li><li>xp 系统不支持 类似微软雅黑的中文。</li><li>解决方案：英文来替代。比如<code>font-family:&quot;Microsoft Yahei&quot;</code>。在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: &quot;\5FAE\8F6F\96C5\9ED1&quot;;   表示设置字体为“微软雅黑”。</span><br></pre></td></tr></table></figure><p><strong>「3. font-weight」</strong></p><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">默认值（不加粗的）</td></tr><tr><td align="left">bold</td><td align="left">定义粗体（加粗的）</td></tr><tr><td align="left">100~900</td><td align="left">400 等同于 normal，而 700 等同于 bold  (数字表示粗细用的多)</td></tr></tbody></table><p><strong>「4. font-weight」</strong></p><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><table><thead><tr><th align="left">属性</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">normal</td><td align="left">默认值，浏览器会显示标准的字体样式  font-style: normal;</td></tr><tr><td align="left">italic</td><td align="left">浏览器会显示斜体的字体样式。</td></tr></tbody></table><p><strong>「5. font:综合设置字体样式」</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; font: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注意：<strong>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以<code>空格</code>隔开</strong></p></li><li><ul><li>其中不需要设置的属性可以省略(取默认值),但必须保留<code>font-size</code>和<code>font-family</code>属性，否则font属性将不起作用。</li></ul></li></ul><p><strong>「6. font总结」</strong></p><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th></tr></thead><tbody><tr><td align="left">font-size</td><td align="left">字号</td><td align="left">我们通常用的单位是px 像素，一定要跟上单位</td></tr><tr><td align="left">font-family</td><td align="left">字体</td><td align="left">实际工作中按照团队约定来写字体</td></tr><tr><td align="left">font-weight</td><td align="left">字体粗细</td><td align="left">记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位</td></tr><tr><td align="left">font-style</td><td align="left">字体样式</td><td align="left">记住倾斜是 italic   不倾斜 是 normal  工作中我们最常用 normal</td></tr><tr><td align="left">font</td><td align="left">字体连写</td><td align="left">1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现</td></tr></tbody></table><h3 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h3><p><strong>1. color</strong></p><p>color属性用于定义文本的颜色<br>其取值方式有以下3种：</p><ul><li>实际工作中，用16进制的写法是最多的，且我们更喜欢简写方式比如#f0代表红色。</li></ul><table><thead><tr><th align="left">表示表示</th><th align="left">属性值</th></tr></thead><tbody><tr><td align="left">预定义的颜色值</td><td align="left">red，green，blue，pink</td></tr><tr><td align="left">十六进制</td><td align="left">#FF0000，#FF6600，#29D794</td></tr><tr><td align="left">RGB代码</td><td align="left">rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><p><strong>2.text-align</strong></p><p>text-align属性用于设置文本内容的水平对齐方式，相当于html中的align对齐属性。</p><ul><li>注意：是让盒子里面的文本内容水平居中， 而不是让盒子居中对齐</li></ul><p>其可用属性值如下：</p><table><thead><tr><th align="left">属性</th><th align="center">解释</th></tr></thead><tbody><tr><td align="left">left</td><td align="center">左对齐（默认值）</td></tr><tr><td align="left">right</td><td align="center">右对齐</td></tr><tr><td align="left">center</td><td align="center">居中对齐</td></tr></tbody></table><p><strong>3. line-height</strong>line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。</p><ul><li>line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一般情况下，行距比字号大7--8像素左右就可以了。</span><br><span class="line">line-height: 24px;</span><br></pre></td></tr></table></figure><h4 id="行高测量"><a href="#行高测量" class="headerlink" title="行高测量"></a>行高测量</h4><p>行高测量方法：<img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8by3wLntBYAKUH3BtI30w2gibNAia6Z8urlF5ibiarb5d8XwjsG7aFuF20TA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8b03vJ7gdfJaIXRQic9AWbA6fZDzfpHMiaxJLRn5zgFBMF34IbfaicVa8ew/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><code>行高测量方法</code>行高我们利用最多的一个地方是：可以让单行文本在盒子中垂直居中对齐。</p><blockquote><p><strong>文字的行高等于盒子的高度。</strong>行高  =  上距离 +  内容高度  + 下距离<br>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bbSzvLR65klr1DmvribcsxLj5nrxV8GettRKl6hethAHmZtO18nEULAw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h4 id="行高与高度的三种关系"><a href="#行高与高度的三种关系" class="headerlink" title="行高与高度的三种关系"></a>行高与高度的三种关系</h4><ul><li>如果 行高 等 高度  文字会 垂直居中</li><li>如果行高 大于 高度  文字会 偏下</li><li>如果行高小于高度  文字会  偏上</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*line-height 要设置在font属性下面，否则无效，例如：*/</span><br><span class="line">height: 80px;</span><br><span class="line">text-align: center;</span><br><span class="line">font: normal bold 30px &quot;宋体&quot;;</span><br><span class="line">line-height: 80px;</span><br></pre></td></tr></table></figure><p>可以使用display:flex;布局方式让文字水平垂直居中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: flex;</span><br><span class="line">align-items: center;     /* 侧轴对齐方式*/</span><br><span class="line">justify-content: center; /* 主轴对齐方式 */</span><br></pre></td></tr></table></figure><p><strong>4. text-indent</strong></p><p>text-indent属性用于设置首行文本的缩进</p><ul><li>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值。</li><li>建议使用em作为设置单位。</li><li>1em 就是一个字的宽度。如果是汉字的段落，1em 就是一个汉字的宽度</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">      /*行间距*/</span><br><span class="line">      line-height: 25px;</span><br><span class="line">      /*首行缩进2个字  em  1个em 就是1个字的大小*/</span><br><span class="line">      text-indent: 2em;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>5. text-decoration</strong>文本的装饰</p><p>text-decoration,通常我们用于给链接修改装饰效果</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">none</td><td align="left">默认。定义标准的文本。取消下划线（最常用）</td></tr><tr><td align="left">underline</td><td align="left">定义文本下的一条线。下划线 也是我们链接自带的（常用）</td></tr><tr><td align="left">overline</td><td align="left">定义文本上的一条线。（不用）</td></tr><tr><td align="left">line-through</td><td align="left">定义穿过文本下的一条线。（不常用）</td></tr></tbody></table><p><strong>「6. CSS外观属性总结」</strong></p><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th></tr></thead><tbody><tr><td align="left">color</td><td align="left">颜色</td><td align="left">我们通常用  十六进制  比如 而且是简写形式 #fff</td></tr><tr><td align="left">line-height</td><td align="left">行高</td><td align="left">控制行与行之间的距离</td></tr><tr><td align="left">text-align</td><td align="left">水平对齐</td><td align="left">可以设定文字水平的对齐方式</td></tr><tr><td align="left">text-indent</td><td align="left">首行缩进</td><td align="left">通常我们用于段落首行缩进2个字的距离  text-indent: 2em;</td></tr><tr><td align="left">text-decoration</td><td align="left">文本修饰</td><td align="left">记住 添加 下划线  underline  取消下划线  none</td></tr></tbody></table><hr><h2 id="标签显示模式-display"><a href="#标签显示模式-display" class="headerlink" title="标签显示模式(display)"></a>标签显示模式(display)</h2><p><code>标签显示模式</code>是标签以什么方式进行显示。HTML标签一般分为块标签和行内标签两种类型，它们也称为块元素和行内元素。</p><h4 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h4><ul><li>块转行内：display:inline;</li><li>行内转块：display:block;</li><li>块、行内元素转换为行内块：display: inline-block;</li></ul><p><strong>1. 块级元素(block-level)</strong></p><ul><li><h5 id="块级元素的特点"><a href="#块级元素的特点" class="headerlink" title="块级元素的特点"></a>块级元素的特点</h5></li><li><ul><li>独占一行</li><li>高度，宽度，外边距以及内边距都可以控制。</li><li>宽度默认是容器(父级宽度)的100%</li><li>是一个容器及盒子，里面可以放行内或者块级元素</li><li><strong>注意</strong>：只有文字才能组成段落，因此p标签里面不能放块级元素，特别是p不能放div。同理，还有h1~h6，dt,它们都是文字类块级标签，里面不能放其他块级元素。</li></ul></li></ul><p><strong>2. 行内元素(inline-level)</strong></p><p>有的地方也称为<code>内联元素</code></p><ul><li><h5 id="行内元素的特点"><a href="#行内元素的特点" class="headerlink" title="行内元素的特点"></a>行内元素的特点</h5></li><li><ol><li>相邻行内元素在一行上，一行可以显示多个。</li><li>高度、宽度直接设置是无效的。</li><li>默认高度就是它本身内容的宽度。</li><li>行内元素只能容纳文本或其他行内元素。</li></ol></li></ul><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><ul><li>链接里面不能再放链接</li><li>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</li></ul><p><strong>3. 行内块元素(inline-block)</strong></p><ul><li><p><strong>行内块元素的特点</strong></p></li><li><ol><li>和相邻行内元素(行内块)在一行上，但是之间会有空白缝隙。一行可以显示多个</li><li>默认宽度就是它本身内容的宽度。</li><li>高度，行高，外边距以及内边距都可以控制。</li></ol></li></ul><h4 id="三种模式总结"><a href="#三种模式总结" class="headerlink" title="三种模式总结"></a>三种模式总结</h4><table><thead><tr><th align="left">元素模式</th><th align="left">元素排列</th><th align="left">设置样式</th><th align="left">默认宽度</th><th align="left">包含</th></tr></thead><tbody><tr><td align="left">块级元素</td><td align="left">一行只能放一个块级元素</td><td align="left">可以设置宽度高度</td><td align="left">容器的100%</td><td align="left">容器级可以包含任何标签</td></tr><tr><td align="left">行内元素</td><td align="left">一行可以放多个行内元素</td><td align="left">不可以直接设置宽度高度</td><td align="left">它本身内容的宽度</td><td align="left">容纳文本或则其他行内元素</td></tr><tr><td align="left">行内块元素</td><td align="left">一行放多个行内块元素</td><td align="left">可以设置宽度和高度</td><td align="left">它本身内容的宽度</td><td align="left"></td></tr></tbody></table><hr><h2 id="CSS背景-background"><a href="#CSS背景-background" class="headerlink" title="CSS背景(background)"></a>CSS背景(background)</h2><p><strong>1. 背景颜色</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color: 颜色值;   默认的值是 transparent  透明的</span><br></pre></td></tr></table></figure><p><strong>2. 背景图片(image)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">background-image : none | url (url) ;</span><br><span class="line">例如:</span><br><span class="line">background-image: url(images/1.png);</span><br></pre></td></tr></table></figure><p><strong>3. 背景平铺（repeat）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-repeat : repeat | no-repeat | repeat-x | repeat-y </span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="left">repeat</td><td align="center">背景图像在纵向和横向上平铺（默认的）</td></tr><tr><td align="left">no-repeat</td><td align="center">背景图像不平铺</td></tr><tr><td align="left">repeat-x</td><td align="center">背景图像在横向上平铺</td></tr><tr><td align="left">repeat-y</td><td align="center">背景图像在纵向平铺</td></tr></tbody></table><p><strong>4. 背景位置(position)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-position : length || length</span><br><span class="line">background-position : position || position </span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="center">值</th></tr></thead><tbody><tr><td align="left">length</td><td align="center">百分数 | 由浮点数字和单位标识符组成的长度值</td></tr><tr><td align="left">position</td><td align="center">top | center | bottom | left | center | right  方位名词</td></tr></tbody></table><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>必须先指定background-image属性</li><li>position 后面是x坐标和y坐标。可以使用方位名词或者 精确单位。</li><li>如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致</li><li>如果只指定了一个方位名词，另一个值默认居中对齐。</li><li>如果position 后面是精确坐标， 那么第一个，肯定是 x 第二个一定是y</li><li>如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中</li><li>如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标</li></ul><h4 id="背景简写："><a href="#背景简写：" class="headerlink" title="背景简写："></a>背景简写：</h4><ul><li>background：属性的值的书写顺序官方没有强制的标准。为了可读性，建议如下写：</li><li>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* 有背景图片背景颜色可以不用写*/</span><br><span class="line">background: transparent url(image.jpg) repeat-y  scroll center top ;</span><br></pre></td></tr></table></figure><p><strong>5. 背景半透明(CSS3)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background: rgba(0, 0, 0, 0.3);</span><br><span class="line">background: rgba(0, 0, 0, .3);</span><br></pre></td></tr></table></figure><ul><li>等同于background-color: rgba(0, 0, 0, .3)</li><li>最后一个参数是alpha 透明度  取值范围 0~1之间</li><li>我们习惯把0.3 的 0 省略掉  这样写 background: rgba(0, 0, 0, .3);</li><li>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>低于IE 9的版本不支持</li></ul><h5 id="盒子半透明-opacity"><a href="#盒子半透明-opacity" class="headerlink" title="盒子半透明 opacity"></a>盒子半透明 opacity</h5><ul><li>设置opacity元素的所有后代元素会随着一起具有透明性，一般用于调整图片或者模块的整体不透明度</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opacity: .2;</span><br></pre></td></tr></table></figure><p><strong>6. 背景总结</strong></p><table><thead><tr><th align="left">属性</th><th align="left">作用</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">background-color</td><td align="left">背景颜色</td><td align="left">预定义的颜色值/十六进制/RGB代码</td></tr><tr><td align="left">background-image</td><td align="left">背景图片</td><td align="left">url(图片路径)</td></tr><tr><td align="left">background-repeat</td><td align="left">是否平铺</td><td align="left">repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td align="left">background-position</td><td align="left">背景位置</td><td align="left">length/position   分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法</td></tr><tr><td align="left">background-attachment</td><td align="left">背景固定还是滚动</td><td align="left">scroll/fixed</td></tr><tr><td align="left">背景简写</td><td align="left">更简单</td><td align="left">背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td></tr><tr><td align="left">背景透明</td><td align="left">让盒子半透明</td><td align="left">background: rgba(0,0,0,0.3);  后面必须是 4个值</td></tr></tbody></table><hr><h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><p><strong>1. CSS 层叠性</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bMdc6UDuvyOoic6olvqFUm4ug4lWznfZfhN6vVtE9LUtKr5zQk5EgtYw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>-<code>概念</code>：</p><ul><li>所谓层叠性是指多种CSS样式的叠加</li><li>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</li></ul><p>-<code>原则</code>：</p><ul><li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠。</li></ul><p><strong>2. CSS 继承性</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bQ0WCHTI80JbCGUSnPJQvvvFvaUjGLIY7phiacwicpcPiaBunJewuXOdIg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">-<code>概念</code>：</p><ul><li>子标签会继承父标签的某些样式，如文本颜色和字号。</li><li>想要设置一个可继承的属性，只需将它应用于父元素即可。</li></ul><p>-<code>注意</code>：</p><ul><li>恰当地使用继承可以简化代码，降低CSS样式的复杂性。比如有很多子级孩子都需要某个样式，可以给父级指定一个，这些孩子继承过来就好了。</li><li>子元素可以继承父元素的样式（<strong>text-，font-，line-这些元素开头的可以继承，以及color属性</strong>）</li></ul><p><strong>3. CSS 优先级(CSS特殊性)</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bYhyc8Ticia3dGdKSsOkKbQRmkpsy6rS4nZmJG2ibvK6yfGcqeBbZYGyibw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">-<code>概念</code>：定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时，</p><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，就会出现优先级的问题。</li></ul><p>-<code>权重计算公式</code>：</p><table><thead><tr><th align="left">标签选择器</th><th align="left">计算权重公式</th></tr></thead><tbody><tr><td align="left">继承或者 *</td><td align="left">0,0,0,0</td></tr><tr><td align="left">每个元素（标签选择器）</td><td align="left">0,0,0,1</td></tr><tr><td align="left">每个类，伪类</td><td align="left">0,0,1,0</td></tr><tr><td align="left">每个ID</td><td align="left">0,1,0,0</td></tr><tr><td align="left">每个行内样式 style=””</td><td align="left">1,0,0,0</td></tr><tr><td align="left">每个!important  最重要的</td><td align="left">∞ 无穷大</td></tr></tbody></table><ul><li>值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</li><li>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</li><li>div { color: pink !important; }</li></ul><p>-<code>权重叠加</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div ul  li   ------&gt;      0,0,0,3</span><br><span class="line">.nav ul li   ------&gt;      0,0,1,2</span><br><span class="line">a:hover      -----—&gt;      0,0,1,1</span><br><span class="line">.nav a       ------&gt;      0,0,1,1</span><br></pre></td></tr></table></figure><p>-<code>继承的权重是0</code>：</p><ul><li>我们修改样式，一定要看该标签有没有被选中</li><li>如果选中了，那么以上面的公式来计权重。谁大听谁的。</li><li>如果没有选中，那么权重是0，因为继承的权重为0.</li></ul><hr><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>css学习三大重点： css 盒子模型  、 浮动 、 定位  </p><p><strong>网页布局的本质</strong></p><ul><li>首先利用CSS设置好盒子的大小，然后摆放盒子的位置。</li><li>最后把网页元素比如文字图片等等，放入盒子里面。</li></ul><h3 id="盒子模型-Box-Model"><a href="#盒子模型-Box-Model" class="headerlink" title="盒子模型(Box Model)"></a>盒子模型(Box Model)</h3><ul><li>盒子模型就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li><li>盒子模型由元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。</li><li>盒子里面的文字和图片等元素是 内容区域</li><li>盒子的厚度 我们称为为盒子的边框</li><li>盒子内容与边框的距离是内边距</li><li>盒子与盒子之间的距离是外边距</li></ul><p><strong>W3c标准盒子模型</strong></p><p>标准 w3c 盒子模型的范围包括 margin、border、padding、content</p><p>当设置为box-sizing: content-box;时，将采用标准模式解析计算，也是默认模式；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">内盒尺寸计算(元素实际大小)</span><br></pre></td></tr></table></figure><ul><li>宽度：Element Height = content height + padding + border （Height为内容高度）</li><li>高度：Element  Width = content width + padding + border （Width为内容宽度）</li><li>盒子的实际大小：<strong>内容的宽度和高度 +  内边距  +  边框</strong>  <img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8b3UoX2rImDIa63t2y9NfoobMuKib4I0Dhn0szXElibTw9YsdBDbPsavPA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><strong>IE盒子模型</strong></li></ul><p>IE 盒子模型的 content 部分包含了 border 和 pading</p><p>当设置为box-sizing: border-box时，将采用怪异模式解析计算；</p><h3 id="盒子边框-border"><a href="#盒子边框-border" class="headerlink" title="盒子边框(border)"></a>盒子边框(border)</h3><table><thead><tr><th align="left">属性</th><th align="center">作用</th></tr></thead><tbody><tr><td align="left">border-width</td><td align="center">定义边框粗细，单位是px</td></tr><tr><td align="left">border-style</td><td align="center">边框的样式</td></tr><tr><td align="left">border-color</td><td align="center">边框颜色</td></tr></tbody></table><p><strong>边框的样式：</strong></p><ul><li>none：没有边框即忽略所有边框的宽度（默认值）</li><li>solid：边框为单实线(最为常用的)</li><li>dashed：边框为虚线</li><li>dotted：边框为点线</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">边框综合设置</span><br><span class="line">border : border-width || border-style || border-color </span><br><span class="line"></span><br><span class="line">border: 1px solid red;  没有顺序要求  </span><br></pre></td></tr></table></figure><p><strong>盒子边框写法总结表：</strong></p><p>很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。</p><table><thead><tr><th align="left">上边框</th><th align="left">下边框</th><th align="left">左边框</th><th align="left">右边框</th></tr></thead><tbody><tr><td align="left">border-top-style:样式;</td><td align="left">border-bottom-style:样式;</td><td align="left">border-left-style:样式;</td><td align="left">border-right-style:样式;</td></tr><tr><td align="left">border-top-width:宽度;</td><td align="left">border- bottom-width:宽度;</td><td align="left">border-left-width:宽度;</td><td align="left">border-right-width:宽度;</td></tr><tr><td align="left">border-top-color:颜色;</td><td align="left">border- bottom-color:颜色;</td><td align="left">border-left-color:颜色;</td><td align="left">border-right-color:颜色;</td></tr><tr><td align="left">border-top:宽度 样式 颜色;</td><td align="left">border-bottom:宽度 样式 颜色;</td><td align="left">border-left:宽度 样式 颜色;</td><td align="left">border-right:宽度 样式 颜色;</td></tr></tbody></table><p><strong>表格的细线边框：</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bjM8eDXUbtfG62HugJaC84WZTjk08dNWiasE1nvCdX7OgnCoovIaKovg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><ul><li><p>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0，</p></li><li><p>但是两个单元格之间的边框会出现重叠，从而使边框变粗</p></li><li><p>通过css属性：table{ border-collapse:collapse; }  </p></li><li><ul><li><code>collapse</code> 单词是合并的意思,<code>border-collapse: collapse;</code>表示相邻边框合并在一起。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"> table &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line"> &#125;</span><br><span class="line"> td &#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  text-align: center;</span><br><span class="line"> &#125;</span><br><span class="line"> table, td &#123;</span><br><span class="line">  border-collapse: collapse;  /*合并相邻边框*/</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距(padding)"></a>内边距(padding)</h3><p>padding属性用于设置内边距。是指边框与内容之间的距离。</p><p><strong>设置</strong></p><table><thead><tr><th align="left">属性</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">padding-left</td><td align="left">左内边距</td></tr><tr><td align="left">padding-right</td><td align="left">右内边距</td></tr><tr><td align="left">padding-top</td><td align="left">上内边距</td></tr><tr><td align="left">padding-bottom</td><td align="left">下内边距</td></tr></tbody></table><p><strong>padding简写</strong></p><table><thead><tr><th align="left">值的个数</th><th align="left">表达意思</th></tr></thead><tbody><tr><td align="left">1个值</td><td align="left">padding：上下左右内边距;</td></tr><tr><td align="left">2个值</td><td align="left">padding: 上下内边距   左右内边距 ；</td></tr><tr><td align="left">3个值</td><td align="left">padding：上内边距  左右内边距  下内边距；</td></tr><tr><td align="left">4个值</td><td align="left">padding: 上内边距 右内边距 下内边距 左内边距 ；</td></tr></tbody></table><p>当我们给盒子指定padding值之后， 发生了2件事情：</p><ol><li>内容和边框 有了距离，添加了内边距。</li><li>盒子会变大</li></ol><p><strong>解决措施：</strong>通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小。</p><p><strong>padding不影响盒子大小情况：👉</strong>如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。</p><h3 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h3><p>margin属性用于设置外边距。margin就是控制<code>盒子和盒子之间的距离</code></p><p><strong>设置</strong></p><table><thead><tr><th align="left">属性</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">margin-left</td><td align="left">左外边距</td></tr><tr><td align="left">margin-right</td><td align="left">右外边距</td></tr><tr><td align="left">margin-top</td><td align="left">上外边距</td></tr><tr><td align="left">margin-bottom</td><td align="left">下外边距</td></tr></tbody></table><p>margin值的简写 （复合写法）代表意思  跟 padding 完全相同。</p><p><strong>块级盒子水平居中</strong></p><ul><li>盒子必须指定宽度（width）</li><li>然后就给左右的外边距都设置为auto</li></ul><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.header  &#123; width: 960px; margin: 0 auto;&#125;</span><br></pre></td></tr></table></figure><p>常见的写法，以下下三种都可以👇👇。</p><ul><li>margin-left: auto;  margin-right: auto;</li><li>margin: auto;</li><li>margin: 0 auto;</li></ul><p><strong>文字居中和盒子居中区别👇👇</strong></p><ol><li>盒子内的文字水平居中是 text-align: center; 而且还可以让 行内元素和行内块居中对齐</li><li>块级盒子水平居中  左右margin 改为 auto</li></ol><p><strong>插入图片和背景图片区别👇👇</strong></p><ol><li><code>插入图片</code>我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin</li><li><code>背景图片</code>我们一般用于小图标背景或者超大背景图片、背景图片，移动位置只能通过  background-position</li></ol><p><strong>清除元素的默认内外边距👇👇</strong></p><ul><li>行内元素为了照顾兼容性,尽量只设置左右内外边距，不要设置上下内外边距。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   padding:0;         /* 清除内边距 */</span><br><span class="line">   margin:0;          /* 清除外边距 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h3><p>使用margin定义块元素的<strong>「垂直外边距」</strong>时，可能会出现外边距的合并。</p><h6 id="1-相邻块元素垂直外边距的合并"><a href="#1-相邻块元素垂直外边距的合并" class="headerlink" title="(1). 相邻块元素垂直外边距的合并"></a>(1). 相邻块元素垂直外边距的合并</h6><ul><li>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom</li><li>下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和</li><li><strong>「取两个值中的较大者」</strong>这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8b15wO9U7G1QHGZRB5OIsdJaCdPeg7MzVYtTsbhfGPusK7OCOwWtvs4A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><strong>「解决方案：尽量给只给一个盒子添加margin值」</strong>。</p><p>(2). 嵌套块元素垂直外边距的合并（塌陷）</p><ul><li>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框</li><li>父元素的上外边距会与子元素的上外边距发生合并</li><li>合并后的外边距为两者中的较大者</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8by8DvQuDYlXKtzlIWtltPGPW0HtWAqoaWKr6cy6jYzc4hrVmR6CFlDA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><strong>「解决方案：」</strong></p><ol><li>可以为父元素定义上边框。</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加overflow: hidden。</li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。</p><h5 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h5><p>优先使用  宽度 （width）  其次 使用内边距（padding）   再次  外边距（margin）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin   </span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><ul><li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</li><li>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</li><li>width  没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</li></ul><h2 id="CSS3-新增"><a href="#CSS3-新增" class="headerlink" title="CSS3 新增"></a>CSS3 新增</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">圆角边框：</span><br><span class="line">border-radius:length;</span><br><span class="line"></span><br><span class="line">border-top-left-radius   定义了左上角的弧度</span><br><span class="line">border-top-right-radius   定义了右上角的弧度</span><br><span class="line">border-bottom-right-radius   定义了右下角的弧度</span><br><span class="line">border-bottom-left-radius   定义了左下角的弧度</span><br></pre></td></tr></table></figure><ul><li>其中每一个值可以为 数值或百分比的形式。</li><li>技巧：让一个正方形 变成圆圈</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-radius: 50%;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8beaL3cUZXibAoj8ibW8c2cTVhXndJ1ELNMvttZxzRdTD15uqN0G72mM5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">如果要在四个角上一一指定，可以使用以下规则👇👇：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-radius: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure><ol><li>四个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。</li><li>三个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角</li><li>两个值: 第一个值为左上角与右下角，第二个值为右上角与左下角</li><li>一个值：四个圆角值相同</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">盒子阴影(box-shadow)：</span><br><span class="line">box-shadow: offset-x offset-y [blur [spread]] [color] [inset]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">offset-x</td><td align="left">阴影的水平偏移量。正数向右偏移，负数向左偏移。</td></tr><tr><td align="left">offset-y</td><td align="left">阴影的垂直偏移量。正数向下偏移，负数向上偏移。</td></tr><tr><td align="left">blur</td><td align="left">可选。阴影模糊距离，不能取负数。</td></tr><tr><td align="left">spread</td><td align="left">可选。阴影大小</td></tr><tr><td align="left">color</td><td align="left">可选。阴影的颜色</td></tr><tr><td align="left">inset</td><td align="left">可选。表示添加内阴影，默认为外阴影</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">   width: 200px;</span><br><span class="line">   height: 200px;</span><br><span class="line">   border: 10px solid red;</span><br><span class="line">   /* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span><br><span class="line">   /* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span><br><span class="line">   box-shadow: 0 15px 30px  rgba(0, 0, 0, .4);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h3><p><strong>「1. CSS布局的三种机制」</strong></p><blockquote><p>网页布局的核心——就是<strong>用CSS来摆放盒子</strong>。</p></blockquote><p>CSS 提供了3种机制来设置盒子的摆放位置，分别是普通流（标准流）、浮动和定位，其中：</p><p><strong>A. 普通流（标准流）</strong></p><ul><li><p>块级元素会独占一行，从上向下顺序排列；</p></li><li><ul><li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li></ul></li><li><p>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行；</p></li><li><ul><li>常用元素：span、a、i、em等</li></ul></li></ul><p><strong>B. 浮动</strong></p><ul><li>让盒子从普通流中浮起来,主要作用让多个块级盒子一行显示。</li></ul><p><strong>C. 定位</strong></p><ul><li>将盒子定在浏览器的某一个位置——CSS 离不开定位，特别是后面的 js 特效。</li></ul><p><strong>「2. 什么是浮动」</strong></p><p>​        元素的浮动是指设置了浮动属性的元素会</p><ul><li>脱离标准普通流的控制,不占位置，脱标</li><li>移动到指定位置。</li></ul><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ol><li>让多个盒子(div)水平排列成一行，使得浮动称为布局的重要手段。</li><li>可以实现盒子的左右对齐等等。</li><li>浮动最早是用来控制图片，实现文字环绕图片效果。</li><li>float属性会改变元素的display属性，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。生成的块级框和我们前面的行内块极其相似。</li></ol><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; float: 属性值; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">none</td><td align="left">元素不浮动（默认值）</td></tr><tr><td align="left">left</td><td align="left">元素向左浮动</td></tr><tr><td align="left">right</td><td align="left">元素向右浮动</td></tr></tbody></table><blockquote><p>浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。<br>**建议:**如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bnahuic1SXtFcVOiaDrcDGb8S21rrKf46W1p6ibqmFSqW6mlTzGodxBwyA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>浮动(float)小结</strong></p><table><thead><tr><th align="left">特点</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">浮</td><td align="left">加了浮动的盒子<strong>「是浮起来」</strong>的，漂浮在其他标准流盒子的上面。</td></tr><tr><td align="left">漏</td><td align="left">加了浮动的盒子<strong>「是不占位置的」</strong>，它原来的位置<strong>「漏给了标准流的盒子」</strong>。</td></tr><tr><td align="left">特</td><td align="left"><strong>「特别注意」</strong>：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙</td></tr></tbody></table><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。<img src="https://mmbiz.qpic.cn/mmbiz_jpg/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bMdS71HhXE4ZoSlJzhd7YhgiczkM9JgE3NeVkgs1V15CzQXdSKMCf81Q/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><img src="https://mmbiz.qpic.cn/mmbiz_jpg/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8baoekQGiaPwbIKRHticXfUA2rEM8grBmN1u6NcEvvb3tY44EQ9SiaZledA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><strong>总结：</strong></p><ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li><li>准确地说，并不是清除浮动，而是清除浮动后造成的影响</li></ul><p><strong>清除浮动本质</strong>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</p><h4 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; clear: 属性值; &#125;   clear 清除  </span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">left</td><td align="left">不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td align="left">right</td><td align="left">不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td align="left">both</td><td align="left">同时清除左右两侧浮动的影响</td></tr></tbody></table><p>实际工作中,几乎只用clear: both</p><p><strong>1).额外标签法(隔墙法)</strong></p><p>是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <div style=”clear:both”></div>，或则其他标签br等亦可。</p><ul><li>优点：通俗易懂，书写方便</li><li>缺点：添加许多无意义的标签，结构化较差。</li></ul><p><strong>2).父级添加overflow属性方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以给父级添加： overflow为 hidden| auto| scroll  都可以实现。</span><br></pre></td></tr></table></figure><ul><li>优点： 代码简洁</li><li>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</li></ul><p><strong>3).使用after伪元素清除浮动</strong>:after 方式为空元素额外标签法的升级版，好处是不用单独加标签了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    display: block;</span><br><span class="line">    height: 0;</span><br><span class="line">    clear: both;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">/* IE6、7 专有 */</span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li>优点：符合闭合浮动思想  结构语义化正确</li><li>缺点：由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li></ul><p><strong>4).使用双伪元素清除浮动</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix &#123;</span><br><span class="line">   *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点： 代码更简洁</li><li>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li></ul><h4 id="清除浮动总结"><a href="#清除浮动总结" class="headerlink" title="清除浮动总结"></a>清除浮动总结</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">什么时候用清除浮动呢？</span><br></pre></td></tr></table></figure><ol><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了。</li></ol><table><thead><tr><th align="left">清除浮动的方式</th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">额外标签法（隔墙法）</td><td align="left">通俗易懂，书写方便</td><td align="left">添加许多无意义的标签，结构化较差。</td></tr><tr><td align="left">父级overflow:hidden;</td><td align="left">书写简单</td><td align="left">溢出隐藏</td></tr><tr><td align="left">父级after伪元素</td><td align="left">结构语义化正确</td><td align="left">由于IE6-7不支持:after，兼容性问题</td></tr><tr><td align="left">父级双伪元素</td><td align="left">结构语义化正确</td><td align="left">由于IE6-7不支持:after，兼容性问题</td></tr></tbody></table><h4 id="CSS属性书写顺序"><a href="#CSS属性书写顺序" class="headerlink" title="CSS属性书写顺序"></a>CSS属性书写顺序</h4><p>建议遵循以下顺序：</p><ol><li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    position: relative;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin: 0 10px;</span><br><span class="line">    padding: 20px 0;</span><br><span class="line">    font-family: Arial, &#x27;Helvetica Neue&#x27;, Helvetica, sans-serif;</span><br><span class="line">    color: #333;</span><br><span class="line">    background: rgba(0,0,0,.5);</span><br><span class="line">    -webkit-border-radius: 10px;</span><br><span class="line">    -moz-border-radius: 10px;</span><br><span class="line">    -o-border-radius: 10px;</span><br><span class="line">    -ms-border-radius: 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h2><p><strong>1. 定位详解</strong></p><p>将盒子<strong>「定」</strong>在某一个<strong>「位」</strong>置  自由的漂浮在其他盒子(包括标准流和浮动)的上面。</p><p>所以，我们脑海应该有三种布局机制的上下顺序👇👇<br>标准流在最底层 (海底)  ——-   浮动 的盒子 在 中间层  (海面)  ——-  定位的盒子 在 最上层  （天空）</p><p><strong>定位</strong>是用来布局的，它有两部分组成：定位 = 定位模式 + 边偏移在 CSS 中，通过 <code>top</code>、<code>bottom</code>、<code>left</code> 和 <code>right</code> 属性定义元素的<strong>「边偏移」</strong>：（方位名词）</p><table><thead><tr><th align="left">边偏移属性</th><th align="left">示例</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>top</code></td><td align="left"><code>top: 80px</code></td><td align="left"><strong>「顶端」</strong>偏移量，定义元素相对于其父元素<strong>「上边线的距离」</strong>。</td></tr><tr><td align="left"><code>bottom</code></td><td align="left"><code>bottom: 80px</code></td><td align="left"><strong>「底部」</strong>偏移量，定义元素相对于其父元素<strong>「下边线的距离」</strong>。</td></tr><tr><td align="left"><code>left</code></td><td align="left"><code>left: 80px</code></td><td align="left"><strong>「左侧」</strong>偏移量，定义元素相对于其父元素<strong>「左边线的距离」</strong>。</td></tr><tr><td align="left"><code>right</code></td><td align="left"><code>right: 80px</code></td><td align="left"><strong>「右侧」</strong>偏移量，定义元素相对于其父元素<strong>「右边线的距离」</strong></td></tr></tbody></table><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8b1MmIfz1wBVX3PXMGUVrAqRxdibY8EYy1q4xPibScXf5xQpicMYLJe71DQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>2. 定位模式(position)<strong>在 CSS 中，通过 <code>position</code> 属性定义元素的</strong>「定位模式」</strong>，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; position: 属性值; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">值</th><th align="center">语义</th></tr></thead><tbody><tr><td align="left"><code>static</code></td><td align="center"><strong>「静态」</strong>定位</td></tr><tr><td align="left"><code>relative</code></td><td align="center"><strong>「相对」</strong>定位</td></tr><tr><td align="left"><code>absolute</code></td><td align="center"><strong>「绝对」</strong>定位</td></tr><tr><td align="left"><code>fixed</code></td><td align="center"><strong>「固定」</strong>定位</td></tr></tbody></table><p><strong>3. 静态定位(static)</strong></p><ul><li>静态定位是元素的默认定位方式，无定位的意思。它相当于border里面的none，不要定位的时候用。</li><li>静态定位 按照标准流特性摆放位置。它没有边偏移。</li><li>静态定位在布局时几乎不用</li></ul><p><strong>4. 相对定位(relative)</strong></p><ul><li>相对定位是元素相对于它原来在标准流中的位置来说的。<img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bVfXeeVIdicb4akm3WYFGbwMqbs1ObZiaiauiaFkxSPX2NDmDkEH2BlY1uA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></li><li>相对于自己原来在标准流中位置来移动的</li><li>原来在标准流的区域继续占有，后面的盒子仍然以标准流的方式对待它。</li></ul><p><strong>5. 绝对定位(absolute)</strong></p><p>绝对定位是元素以带有定位的父级元素来移动位置</p><ul><li>完全脱表–完全不占位置；</li><li>父元素没有定位，则以浏览器为准定位(Document文档)。</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8b3kQIJPlKcMTgGicm7Hia18o1O538GDL2liaZBAnVXyhh1B142qx1zHO9A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h4 id="父元素有定位"><a href="#父元素有定位" class="headerlink" title="父元素有定位"></a>父元素有定位</h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bqCrQxW1Sb43kqPZ9BUyXoBYljAM6kFSAsC9sPGWIZWo904f6iaib3kPA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h5 id="定位口诀–子绝父相"><a href="#定位口诀–子绝父相" class="headerlink" title="定位口诀–子绝父相"></a>定位口诀–子绝父相</h5><p><strong>6. 固定定位(fixed)</strong></p><p>固定定位是绝对定位的一种特殊形式;</p><ul><li><p>完全脱标–完全不占位置；</p></li><li><p>只认<strong>浏览器的可视窗口</strong>–浏览器可视窗口+边偏移属性来设置元素的位置</p></li><li><ul><li>跟父元素没有任何关系；单独使用</li><li>不随滚动条滚动</li></ul></li></ul><h4 id="定位-position-的扩展"><a href="#定位-position-的扩展" class="headerlink" title="定位(position)的扩展"></a>定位(position)的扩展</h4><h4 id="绝对定位的盒子居中"><a href="#绝对定位的盒子居中" class="headerlink" title="绝对定位的盒子居中"></a>绝对定位的盒子居中</h4><blockquote><p>绝对定位/固定定位的盒子不能通过设置margin: auto设置水平居中 在使用绝对定位时要向实现水平居中，可以按照下面的方法：</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bN6SCtF5tG61rscl5xZ0icicUDB8jtFtq5xibEqiba1WfUXOzkiadNjnX4nQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><ol><li>left : 50%:让盒子的左侧移动到父级元素的水平中心位置；</li><li> margin-left: -100px;让盒子向左移动自身宽度的一半。</li><li>同理垂直居中。</li></ol><h4 id="堆叠顺序（z-index）"><a href="#堆叠顺序（z-index）" class="headerlink" title="堆叠顺序（z-index）"></a>堆叠顺序（z-index）</h4><p>在使用<strong>「定位」</strong>布局时，可能会<strong>「出现盒子重叠的情况」</strong>。</p><p>加了定位的盒子，默认<strong>「后来者居上」</strong>， 后面的盒子会压住前面的盒子。</p><p>应用 <code>z-index</code> 层叠等级属性可以<strong>「调整盒子的堆叠顺序」</strong>。如下图所示：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8beCsHfDxy5VBkWU3ET4s4qtBpHm9iajaajxo2GeWWb81a04PfG5rmH0A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">z-index的特性如下:</p><ol><li><strong>属性值</strong>：正整数、负整数或 0，默认值是 0，数值越大，盒子越靠上；</li><li>如果属性值相同，则按照书写顺序，后来居上；</li><li>数字后面不能加单位</li><li>z-index只能用于相对定位、绝对定位和固定定位的元素，其他标准流、浮动和静态定位无效。</li></ol><h4 id="定位改变display属性"><a href="#定位改变display属性" class="headerlink" title="定位改变display属性"></a>定位改变display属性</h4><p>前面提过， display 是 显示模式， 可以通过以下方式改变显示模式:</p><ul><li>可以用inline-block  转换为行内块</li><li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li><li>绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。</li></ul><p>所以说， 一个行内的盒子，如果加了<strong>「浮动」</strong>、<strong>「固定定位」</strong>和<strong>「绝对定位」</strong>，不用转换，就可以给这个盒子直接设置宽度和高度等。</p><h4 id="定位小结"><a href="#定位小结" class="headerlink" title="定位小结"></a>定位小结</h4><table><thead><tr><th align="left">定位模式</th><th align="left">是否脱标占有位置</th><th align="left">移动位置基准</th><th align="left">模式转换（行内块）</th><th align="left">使用情况</th></tr></thead><tbody><tr><td align="left">静态static</td><td align="left">不脱标，正常模式</td><td align="left">正常模式</td><td align="left">不能</td><td align="left">几乎不用</td></tr><tr><td align="left">相对定位relative</td><td align="left">不脱标，占有位置</td><td align="left">相对自身位置移动</td><td align="left">不能</td><td align="left">基本单独使用</td></tr><tr><td align="left">绝对定位absolute</td><td align="left">完全脱标，不占有位置</td><td align="left">相对于定位父级移动位置</td><td align="left">能</td><td align="left">要和定位父级元素搭配使用</td></tr><tr><td align="left">固定定位fixed</td><td align="left">完全脱标，不占有位置</td><td align="left">相对于浏览器移动位置</td><td align="left">能</td><td align="left">单独使用，不需要父级</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li><code>边偏移</code> 需要和 <code>定位模式</code> 联合使用，<code>单独使用无效</code>；</li><li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li><li><code>left</code> 和 <code>right</code> 不要同时使用。</li></ol><hr><h2 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h2><h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><ul><li>**目的:**让一个元素在页面中消失或者显示出来</li><li>**场景:**类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</li></ul><h4 id="display-显示（重点）"><a href="#display-显示（重点）" class="headerlink" title="display 显示（重点）"></a>display 显示（重点）</h4><p>display设置或检索对象是否显示或如何显示。</p><ul><li><p>display: none 隐藏对象</p></li><li><ul><li>特点：隐藏之后，不再保留位置。</li></ul></li><li><p>display: block 除了转换为块级元素之外，同时还有显示元素的意思。</p></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bIsqWiaIk6NLYYVTLwCWLThczx6srresNQxzaqanNPia06CDlCoibib4JiaQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">实际开发场景：配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p><h4 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h4><p>设置或检索是否显示对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">visibility：visible ;  对象可视</span><br><span class="line"></span><br><span class="line">visibility：hidden;    对象隐藏</span><br></pre></td></tr></table></figure><ul><li>特点：隐藏之后，继续保留原有位置。</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bWR8zicEo3L5npkKeSd74ibl4D2ZseBNAH4PviaAQmbdq9XRL0ef7ee3aA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h4 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h4><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">visible</td><td align="left">不剪切内容也不添加滚动条</td></tr><tr><td align="left">hidden</td><td align="left">不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td align="left">scroll</td><td align="left">不管超出内容否，总是显示滚动条</td></tr><tr><td align="left">auto</td><td align="left">超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bEFUTYKtKQ3Dm0dDAGKsSAw5QaSqPLgETx84IuU20677gOjya8BAR7A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><code>实际开发场景</code>：</p><ol><li>清除浮动</li><li>隐藏超出内容，隐藏掉,  不允许内容超过父盒子。</li></ol><h4 id="显示与隐藏总结"><a href="#显示与隐藏总结" class="headerlink" title="显示与隐藏总结"></a>显示与隐藏总结</h4><table><thead><tr><th align="left">属性</th><th align="left">区别</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">display</td><td align="left">隐藏对象，不保留位置</td><td align="left">配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td></tr><tr><td align="left">visibility</td><td align="left">隐藏对象，保留位置</td><td align="left">使用较少</td></tr><tr><td align="left">overflow</td><td align="left">只是隐藏超出大小的部分</td><td align="left">1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table><h3 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h3><p>所谓的界面样式， 就是更改一些用户操作样式，以便提高更好的用户体验。</p><ul><li>更改用户的鼠标样式</li><li>表单轮廓等。</li><li>防止表单域拖拽</li></ul><h4 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h4><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">default</td><td align="left">小白  默认</td></tr><tr><td align="left">pointer</td><td align="left">小手</td></tr><tr><td align="left">move</td><td align="left">移动</td></tr><tr><td align="left">text</td><td align="left">文本</td></tr><tr><td align="left">not-allowed</td><td align="left">禁止</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li style=&quot;cursor:default&quot;&gt;我是小白&lt;/li&gt;</span><br><span class="line">  &lt;li style=&quot;cursor:pointer&quot;&gt;我是小手&lt;/li&gt;</span><br><span class="line">  &lt;li style=&quot;cursor:move&quot;&gt;我是移动&lt;/li&gt;</span><br><span class="line">  &lt;li style=&quot;cursor:text&quot;&gt;我是文本&lt;/li&gt;</span><br><span class="line">  &lt;li style=&quot;cursor:not-allowed&quot;&gt;我是文本&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h4 id="轮廓线-outline"><a href="#轮廓线-outline" class="headerlink" title="轮廓线 outline"></a>轮廓线 outline</h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bdicbvJ2vdWvVm9PuHt5WLFn7XqYAx60k0El53qx9JfgLB734At4Ru9w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outline : outline-color ||outline-style || outline-width </span><br></pre></td></tr></table></figure><p>但是我们都不关心可以设置多少，我们平时都是去掉的。<br>最直接的写法是 ： outline: 0;  或者  outline: none;</p><h4 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bHX3RwpjHtdppaZKxrEhq5QjZB339Zn5b7xMvy2XsrPblC9V7Z478JQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea  style=&quot;resize: none;&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><h4 id="2-4-用户界面样式总结"><a href="#2-4-用户界面样式总结" class="headerlink" title="2.4 用户界面样式总结"></a>2.4 用户界面样式总结</h4><table><thead><tr><th align="left">属性</th><th align="left">用途</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">鼠标样式</td><td align="left">更改鼠标样式cursor</td><td align="left">样式很多，重点记住 pointer</td></tr><tr><td align="left">轮廓线</td><td align="left">表单默认outline</td><td align="left">outline 轮廓线，我们一般直接去掉，border是边框，我们会经常用</td></tr><tr><td align="left">防止拖拽</td><td align="left">主要针对文本域resize</td><td align="left">防止用户随意拖拽文本域，造成页面布局混乱，我们resize:none</td></tr></tbody></table><h3 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h3><ul><li>有宽度的块级元素居中对齐，是margin: 0 auto;</li><li>让文字居中对齐，是 text-align: center;</li></ul><p>vertical-align 垂直对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bdibQ1oDm9HIxTxiclw7Fq54j5nmKRK04kmDMrPsg6VZiaL6kDcKsBdibSw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置或检索对象内容的垂直对其方式。</span><br><span class="line">vertical-align : baseline |top |middle |bottom </span><br></pre></td></tr></table></figure><p>注意：</p><p>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>「行内元素」</strong>或者<strong>「行内块元素」</strong>，</p><p>特别是行内块元素， 通常用来控制图片/表单与文字的对齐。</p><h4 id="3-1-图片、表单和文字对齐"><a href="#3-1-图片、表单和文字对齐" class="headerlink" title="3.1 图片、表单和文字对齐"></a>3.1 图片、表单和文字对齐</h4><p>我们可以通过<code>vertical-align</code> 控制图片和文字的垂直关系了。默认的图片会和文字基线对齐。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bfWPgKVgBq5JoRLkTdcjQxPG1eUAL8g1N9iaxOUHfD7ZN6otR5Kh4NAw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bX32nStNY16aY9odqroA3Mpia6nia2fuh9DYmYCszG7V1to2VsNwibY8Sg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h4 id="3-2-去除图片底侧空白缝隙"><a href="#3-2-去除图片底侧空白缝隙" class="headerlink" title="3.2 去除图片底侧空白缝隙"></a>3.2 去除图片底侧空白缝隙</h4><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8boGWdjhQUvkicibGiaRYd0KDL2Y1kmqWLl75piaeMlRTMVh4go056Pj1OLA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><strong>原因：</strong>图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。</p><p>就是图片底侧会有一个空白缝隙。</p><p><strong>解决方法：</strong></p><ul><li>给img vertical-align:middle | top| bottom等等。 让图片不要和基线对齐。</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bNO8sogwyKtqHT6Bg0iaDeAkWqlbbSWqKJIGqtt8As1oFz17wBkQYb4g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><ul><li>给img 添加 display：block; 转换为块级元素就不会存在问题了。</li></ul><h3 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h3><h4 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h4><ul><li>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">white-space:normal ；默认处理方式</span><br><span class="line"></span><br><span class="line">white-space:nowrap ； 强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</span><br></pre></td></tr></table></figure><h4 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h4><ul><li>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text-overflow : clip ；不显示省略标记（...），而是简单的裁切 </span><br><span class="line"></span><br><span class="line">text-overflow：ellipsis ； 当对象内文本溢出时显示省略标记（...）</span><br></pre></td></tr></table></figure><p><strong>「注意」</strong>：</p><p>一定要首先强制一行内显示，再次和overflow属性  搭配使用</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bJMSFBl0zS6bbLaYbicsptgr6KC0uTOEBhZViaFYNY96FibxUF3Xp3fReQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h4 id="总结三步曲"><a href="#总结三步曲" class="headerlink" title="总结三步曲"></a>总结三步曲</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*1. 先强制一行内显示文本*/</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">/*2. 超出的部分隐藏*/</span><br><span class="line">    overflow: hidden;</span><br><span class="line">/*3. 文字用省略号替代超出的部分*/</span><br><span class="line">    text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><h3 id="CSS精灵技术（sprite"><a href="#CSS精灵技术（sprite" class="headerlink" title="CSS精灵技术（sprite)"></a>CSS精灵技术（sprite)</h3><p>CSS精灵技术（也称CSS Sprites、CSS雪碧）。<img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bRib7fONvzIh0zt2skNON8Fvj2NF43KNDc7BwY7vcItRGHiapGiczcg85Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><ul><li>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</li><li>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。</li></ul><p><strong>为什么需要精灵技术</strong>：为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。</p><h4 id="精灵技术讲解"><a href="#精灵技术讲解" class="headerlink" title="精灵技术讲解"></a>精灵技术讲解</h4><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8blELib9Dme0DKEby545viabCfDcwxcytyxMquZINDK5VjqQibmTFKXobRA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。</p><p>我们需要使用CSS的:</p><ul><li>background-image、</li><li>background-repeat</li><li>background-position属性进行背景定位，</li><li>其中最关键的是使用<code>background-position</code> 属性精确地定位。</li></ul><h4 id="精灵技术使用的核心总结"><a href="#精灵技术使用的核心总结" class="headerlink" title="精灵技术使用的核心总结"></a>精灵技术使用的核心总结</h4><p>首先我们知道，css精灵技术主要针对于背景图片，插入的图片img 是不需要这个技术的。</p><ol><li>精确测量，每个小背景图片的大小和 位置。</li><li>给盒子指定小背景图片时， 背景定位基本都是 负值。</li></ol><h3 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bqoVDG5FKf7XNSxwXQhjYYGQgrWSZVfkOcialL3ticPnDy25pCpL4bNCg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt="图片"></p><h4 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h4><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bIKmUvSuib6aFic4Seia4jaorfGmEib2sf2V0eibBmF4r3yichjQzVMBOeibbA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。最常见于各种导航栏的滑动门。</p><h4 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h4><p>核心技术就是利用<code>CSS精灵</code>（主要是背景位置）和 <code>盒子padding</code>撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;</span><br><span class="line">  &lt;a href=&quot;#&quot;&gt;</span><br><span class="line">    &lt;span&gt;导航栏内容&lt;/span&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">* &#123;</span><br><span class="line">    padding:0;</span><br><span class="line">    margin:0;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">    body&#123;</span><br><span class="line">      background: url(images/wx.jpg) repeat-x;</span><br><span class="line">    &#125;</span><br><span class="line">    .father &#123;</span><br><span class="line">      padding-top:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    li &#123;</span><br><span class="line">      padding-left: 16px;</span><br><span class="line">      height: 33px;</span><br><span class="line">      float: left;</span><br><span class="line">      line-height: 33px;</span><br><span class="line">      margin:0  10px;</span><br><span class="line">      background: url(./images/to.png) no-repeat left ;</span><br><span class="line">    &#125;</span><br><span class="line">    a &#123;</span><br><span class="line">      padding-right: 16px;</span><br><span class="line">      height: 33px;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      color:#fff;</span><br><span class="line">      background: url(./images/to.png) no-repeat right ;</span><br><span class="line">      text-decoration: none;</span><br><span class="line">    &#125;</span><br><span class="line">    li:hover,</span><br><span class="line">    li:hover a &#123;</span><br><span class="line">      background-image:url(./images/ao.png);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>a 设置 背景左侧，padding撑开合适宽度。</li><li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li><li>之所以a包含span就是因为 整个导航都是可以点击的。</li></ol><h3 id="CSS-三角形"><a href="#CSS-三角形" class="headerlink" title="CSS 三角形"></a>CSS 三角形</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line"></span><br><span class="line">    width: 0; </span><br><span class="line"></span><br><span class="line">    height: 0;</span><br><span class="line">    line-height:0；</span><br><span class="line">    font-size: 0;</span><br><span class="line">   border-top: 10px solid red;</span><br><span class="line"></span><br><span class="line">   border-right: 10px solid green;</span><br><span class="line"></span><br><span class="line">   border-bottom: 10px solid blue;</span><br><span class="line"></span><br><span class="line">   border-left: 10px solid #000; </span><br><span class="line"></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/y7EkeCWAzmqtcdL7HZYccBic0jicaWzR8bMZvtNQGxxYDG6SvNX35cbQ6TaDfdMYoBxHVLwNHujC7dg4WzBD5TVQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><ol><li>我们用css 边框可以模拟三角效果</li><li>宽度高度为0</li><li>我们4个边框都要写， 只保留需要的边框颜色，其余的不能省略，都改为 transparent 透明就好了</li><li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础加高级总结 (全面)</title>
      <link href="/myblog.github.io/2022/04/24/JavaScript%E5%9F%BA%E7%A1%80%E5%8A%A0%E9%AB%98%E7%BA%A7%E6%80%BB%E7%BB%93%20(%E5%85%A8%E9%9D%A2)/"/>
      <url>/myblog.github.io/2022/04/24/JavaScript%E5%9F%BA%E7%A1%80%E5%8A%A0%E9%AB%98%E7%BA%A7%E6%80%BB%E7%BB%93%20(%E5%85%A8%E9%9D%A2)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\myblog.github.io\assets\css\APlayer.min.css"><script src="\myblog.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、javaScript基础大总结"><a href="#一、javaScript基础大总结" class="headerlink" title="一、javaScript基础大总结"></a>一、javaScript基础大总结</h1><h2 id="1、数据类型相关知识点"><a href="#1、数据类型相关知识点" class="headerlink" title="1、数据类型相关知识点"></a>1、数据类型相关知识点</h2><h3 id="Ⅰ-基本-值-类型"><a href="#Ⅰ-基本-值-类型" class="headerlink" title="Ⅰ-基本(值)类型"></a>Ⅰ-基本(值)类型</h3><blockquote><ol><li>String: 任意字符串</li><li>Number: 任意的数字</li><li>boolean: true/false</li><li>undefined: undefined</li><li>null: null –&gt;使用<code>typeof</code>时返回<code>object</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Symbol">symbol</a> (<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/ECMAScript">ECMAScript</a> 2016新增)。 –&gt;Symbol 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">基本数据类型</a> 的一种，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 对象是 Symbol原始值的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Wrapper">封装 (en-US)</a> 。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/BigInt">bigint</a>， –&gt;<strong>BigInt</strong> 是一种数字类型的数据，它可以表示任意精度格式的整数。</li></ol><p>加上下方的 [ 对象 ] 类型,目前 javaScript 有八种数据类型</p></blockquote><h3 id="Ⅱ-对象-引用-类型"><a href="#Ⅱ-对象-引用-类型" class="headerlink" title="Ⅱ-对象(引用)类型"></a>Ⅱ-对象(引用)类型</h3><blockquote><ol><li>Object: 任意对象</li><li>Function: 一种特别的<code>对象</code>(可以执行) –内部包含可运行的代码</li><li>Array: 一种特别的<code>对象</code>(<code>key</code>为数值下标属性, 内部数据是有序的)</li></ol></blockquote><h3 id="Ⅲ-判断方法"><a href="#Ⅲ-判断方法" class="headerlink" title="Ⅲ-判断方法"></a>Ⅲ-判断方法</h3><h4 id="①-typeof"><a href="#①-typeof" class="headerlink" title="①* typeof*"></a>①*<code> typeof</code>*</h4><blockquote><p><strong><code>typeof</code></strong> 操作符返回一个<code>字符串</code>，表示未经计算的操作数的类型。</p><ul><li>可以判断: undefined/ 数值 / 字符串 / 布尔值 / function</li><li>不能判断: null与object object与array</li><li><code>注意</code>: 运行<code>console.log(typeof undefined)</code>时,得到的的也是一个<code>字符串,同时为小写!!</code>–&gt; <code>&#39;undefined&#39;</code></li><li>代码示例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> // typeof返回数据类型的字符串表达</span><br><span class="line"> var a</span><br><span class="line"> </span><br><span class="line"> //注意:typeof返回的是字符串</span><br><span class="line"> console.log(a, typeof a, typeof a===&#x27;undefined&#x27;,a===undefined )  // undefined &#x27;undefined&#x27; true true</span><br><span class="line"> console.log(undefined === &#x27;undefined&#x27;) //false</span><br><span class="line"> a = 4</span><br><span class="line"> console.log(typeof a===&#x27;number&#x27;) //true</span><br><span class="line"> a = &#x27;hongjilin&#x27;</span><br><span class="line"> console.log(typeof a===&#x27;string&#x27;) //true</span><br><span class="line"> console.log(typeof a===&#x27;String&#x27;) //false  --&gt;注意,返回的类型为小写</span><br><span class="line"> a = true</span><br><span class="line"> console.log(typeof a===&#x27;boolean&#x27;) //true</span><br><span class="line"> a = null</span><br><span class="line"> console.log(typeof a, a===null) // &#x27;object&#x27;  true</span><br><span class="line">let b=&#123;&#125;</span><br><span class="line"> console.log(typeof b,typeof null, &#x27;-------&#x27;) // &#x27;object&#x27; &#x27;object&#x27;  --&gt;所以Typeof不能判断null与object</span><br></pre></td></tr></table></figure></blockquote><h4 id="②-instanceof-判断实例方法"><a href="#②-instanceof-判断实例方法" class="headerlink" title="②*instanceof*(判断实例方法)"></a>②*<code>instanceof</code>*(判断实例方法)</h4><blockquote><ul><li><code>专门判断对象</code>的具体类型</li><li><strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</li><li>代码示例:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> var b1 = &#123;</span><br><span class="line">   b2: [1, &#x27;abc&#x27;, console.log],</span><br><span class="line">//可以简化成 b3:()=&gt;()=&gt; &#x27;hongjilin&#x27;  --&gt;高阶函数相关知识</span><br><span class="line">   b3: function () &#123;</span><br><span class="line">     return  () =&gt;&#123;  return   &#x27;hongjilin&#x27;&#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">/**使用instanceof进行对象判断*/</span><br><span class="line"> console.log(b1 instanceof Object, b1 instanceof Array) // true  false</span><br><span class="line"> console.log(b1.b2 instanceof Array, b1.b2 instanceof Object) // true true</span><br><span class="line"> console.log(b1.b3 instanceof Function, b1.b3 instanceof Object) // true true</span><br><span class="line"></span><br><span class="line"> /**使用typeof进行对象中某属性的判断*/</span><br><span class="line">console.log(typeof b1.b2, typeof null) // &#x27;object&#x27; &#x27;object&#x27;  </span><br><span class="line"> console.log(typeof b1.b3===&#x27;function&#x27;) // true</span><br><span class="line"> console.log(typeof b1.b2[2]===&#x27;function&#x27;) //true</span><br><span class="line"></span><br><span class="line"> /**调用对象与数组中某函数示例*/</span><br><span class="line"> b1.b2[2](&#x27;调用console.log打印hongjilin&#x27;)    //调用console.log打印hongjilin</span><br><span class="line"> console.log(b1.b3()()) // hongjilin</span><br></pre></td></tr></table></figure></blockquote><h4 id="③"><a href="#③" class="headerlink" title="③*===*"></a>③*<code>===</code>*</h4><blockquote><p>具体可以看 MDN的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness">JavaScript中的相等性判断</a></p><p>可以判断: undefined, null</p><p>简而言之，在比较两件事情时，<code>双等号将执行类型转换</code>;<code> 三等号将进行相同的比较，而不进行类型转换</code> (如果类型不同, 只是总会返回 false )</p></blockquote><h3 id="Ⅳ-相关问题引出"><a href="#Ⅳ-相关问题引出" class="headerlink" title="Ⅳ-相关问题引出"></a>Ⅳ-相关问题引出</h3><h4 id="①-undefined与null的区别"><a href="#①-undefined与null的区别" class="headerlink" title="① undefined与null的区别?"></a>① <em>undefined与null的区别?</em></h4><blockquote><ul><li>undefined代表定义未赋值</li><li>nulll定义并赋值了, 只是值为null</li><li>代码示例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a</span><br><span class="line">console.log(a)  // undefined</span><br><span class="line">a = null</span><br><span class="line">console.log(a) // null</span><br></pre></td></tr></table></figure></blockquote><h4 id="②-什么时候给变量赋值为null呢"><a href="#②-什么时候给变量赋值为null呢" class="headerlink" title="② 什么时候给变量赋值为null呢?"></a>② <em>什么时候给变量赋值为null呢?</em></h4><blockquote><ul><li>初始赋值, 表明将要赋值为对象,<code>可以用做约定俗成的占位符</code></li><li>结束前, 让对象成为垃圾对象(被垃圾回收器回收)</li><li>代码示例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//起始,可以用做约定俗成的占位符</span><br><span class="line">var b = null  // 初始赋值为null, 表明将要赋值为对象</span><br><span class="line">//确定对象就赋值</span><br><span class="line">b = [&#x27;atguigu&#x27;, 12]</span><br><span class="line">//最后在不使用的时候,将其引用置空,就可以释放b这个对象占用的内存      ---当没有引用指向它的对象称为垃圾对象</span><br><span class="line">b = null // 让b指向的对象成为垃圾对象(被垃圾回收器回收)</span><br></pre></td></tr></table></figure></blockquote><h4 id="③-严格区别变量类型与数据类型"><a href="#③-严格区别变量类型与数据类型" class="headerlink" title="③ 严格区别变量类型与数据类型?"></a>③ <em>严格区别变量类型与数据类型?</em></h4><blockquote><ul><li>数据的类型</li><li>基本类型</li><li>对象类型</li><li>变量的类型(变量内存值的类型)</li><li>基本类型: 保存就是<code>基本类型</code>的数据</li><li>引用类型: 保存的是地址值(对象类型)</li></ul></blockquote><h3 id="Ⅴ-补充知识点"><a href="#Ⅴ-补充知识点" class="headerlink" title="Ⅴ-补充知识点:"></a>Ⅴ-补充知识点:</h3><h4 id="①字符串对比-gt-、-lt-以及charCodeAt-方法"><a href="#①字符串对比-gt-、-lt-以及charCodeAt-方法" class="headerlink" title="①字符串对比*&gt;、&lt;以及charCodeAt()*方法"></a>①字符串对比*<code>&gt;</code>、<code>&lt;</code><em>以及</em><code>charCodeAt()</code>*方法</h4><blockquote><ol><li>Javascript字符串在进行大于(小于)比较时，会根据第一个不同的字符的ascii值码进行比较，当数字(number)与字符串(string)进行比较大小时，会强制的将数字(number)转换成字符串(string)然后再进行比较</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    console.log(&#x27;13&#x27;&gt;&#x27;3&#x27;); // 输出：false</span><br><span class="line">    console.log(5&gt;&#x27;6&#x27;);  // 输出： false</span><br><span class="line">    console.log(&#x27;d&#x27;&gt;&#x27;ABDC&#x27;) // 输出： true</span><br><span class="line">    console.log(19&gt;&#x27;ssf&#x27;) // 输出 false</span><br><span class="line">    console.log(&#x27;A&#x27;&gt;&#x27;abcdef&#x27;) // 输出 false</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ol><li>手动转换为ascii后相减,用正负数表示大小</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorter=&#123;(a:string,b:string)=&gt; a.charCodeAt()-b.charCodeAt()&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="2、数据-变量-内存的理解"><a href="#2、数据-变量-内存的理解" class="headerlink" title="2、数据,变量, 内存的理解"></a>2、数据,变量, 内存的理解</h2><h3 id="Ⅰ-什么是数据"><a href="#Ⅰ-什么是数据" class="headerlink" title="Ⅰ-什么是数据?"></a>Ⅰ-什么是数据?</h3><blockquote><ol><li>存储在内存中代表特定信息的’东西’, 本质上是0101…</li><li>数据的特点: <code>可传递</code>, <code>可运算</code> –&gt;let a=0;b=a 🔜体现可传递</li><li>一切皆数据</li><li>内存中所有操作的目标: 数据</li></ol><ul><li>算术运算</li><li>逻辑运算</li><li>赋值</li><li>运行函数</li></ul></blockquote><h3 id="Ⅱ-什么是内存"><a href="#Ⅱ-什么是内存" class="headerlink" title="Ⅱ-什么是内存?"></a>Ⅱ-什么是内存?</h3><blockquote><ol><li>内存条通电后产生的可储存数据的空间(临时的)</li></ol><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210630191828124.png" alt="image-20210630191828124"></p><ol><li>内存产生和死亡: 内存条(电路版)==&gt;通电==&gt;产生内存空间==&gt;存储数据==&gt;处理数据==&gt;断电==&gt;内存空间和数据都消失</li><li>一块小内存的2个数据</li></ol><ul><li>内部存储的数据</li><li>地址值</li></ul><ol><li>内存分类</li></ol><ul><li>栈: 全局变量/局部变量</li><li>堆: 对象</li><li><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210630192130518.png" alt="image-20210630192130518"></li></ul></blockquote><h3 id="Ⅲ-什么是变量"><a href="#Ⅲ-什么是变量" class="headerlink" title="Ⅲ-什么是变量?"></a>Ⅲ-什么是变量?</h3><blockquote><ul><li>可变化的量, 由变量名和变量值组成</li><li>每个变量都对应的一块小内存, 变量名用来查找对应的内存, 变量值就是内存中保存的数据</li></ul><p>ps:变量<code>obj.xx</code>–&gt;<code>.</code>相当于拿着地址找到后面对应的内存,所以只有当我变量中存的是地址,才可以用<code>.</code></p></blockquote><h3 id="Ⅳ-内存-数据-变量三者之间的关系"><a href="#Ⅳ-内存-数据-变量三者之间的关系" class="headerlink" title="Ⅳ-内存,数据, 变量三者之间的关系"></a>Ⅳ-内存,数据, 变量三者之间的关系</h3><blockquote><ul><li>内存用来存储数据的空间</li><li>变量是内存的标识</li></ul></blockquote><h3 id="Ⅴ-相关问题引出"><a href="#Ⅴ-相关问题引出" class="headerlink" title="Ⅴ-相关问题引出"></a>Ⅴ-相关问题引出</h3><h4 id="①-关于赋值和内存的问题"><a href="#①-关于赋值和内存的问题" class="headerlink" title="① 关于赋值和内存的问题"></a>① <em>关于赋值和内存的问题</em></h4><blockquote><p>let a = xxx, a内存中到底保存的是什么?</p><ul><li>xxx是基本数据, 保存的就是这个数据</li><li>xxx是对象, 保存的是对象的地址值</li><li>xxx是一个变量, 保存的xxx的内存内容(可能是基本数据, 也可能是地址值)</li></ul></blockquote><h4 id="②-关于引用变量赋值问题"><a href="#②-关于引用变量赋值问题" class="headerlink" title="② 关于引用变量赋值问题"></a>② <em>关于引用变量赋值问题</em></h4><blockquote><ul><li>2个引用变量指向同一个对象, 通过一个变量修改对象内部数据, 另一个变量看到的是修改之后的数据</li><li>2个引用变量指向同一个对象, 让其中一个引用变量指向另一个对象, 另一引用变量依然指向前一个对象</li><li>代码示例:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  let a = &#123;age: 12&#125;</span><br><span class="line">//此时是将a指向的地址值赋值给B,所以B此时也指向&#123;age:12&#125;这个内存</span><br><span class="line">  let b = a</span><br><span class="line">//此时重新创建了一个内存并让a指向它,所以此处a指向的是&#123;name:&#x27;hong&#x27;&#125;,而b指向仍是刚开始的指向&#123;age:12&#125;</span><br><span class="line">  a = &#123;name: &#x27;hong&#x27;&#125;</span><br><span class="line">//此时a与b指向的内存已经不一样了,所以修改互不影响</span><br><span class="line">  b.age = 14</span><br><span class="line">  console.log(b.age, a.name, a.age) // 14 hong undefined</span><br><span class="line">  //此时其实已经重新创建了一个内存&#123;age:15&#125;,并且将其地址赋值覆盖给a</span><br><span class="line">//实际上传进来的obj也是拿着其key对应的地址值找内存,此时</span><br><span class="line">  const fn2=(obj) =&gt; obj = &#123;age: 15&#125;</span><br><span class="line">  fn2(a)</span><br><span class="line">  console.log(a.age) //15</span><br></pre></td></tr></table></figure></blockquote><h4 id="③-在js调用函数时传递变量参数时-是值传递还是引用传递"><a href="#③-在js调用函数时传递变量参数时-是值传递还是引用传递" class="headerlink" title="③ 在js调用函数时传递变量参数时, 是值传递还是引用传递"></a>③ <em>在js调用函数时传递变量参数时, 是值传递还是引用传递</em></h4><blockquote><ul><li><p>理解1: 都是值(基本/地址值)传递</p></li><li><p>所以实际上传进function中的参数也是拿着其存着的地址值找内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//传进来的obj存储的是a中存的地址值,所以obj==a(因为他们地址值一致,指向一致)</span><br><span class="line">  let a = &#123;name: &#x27;hong&#x27;&#125;</span><br><span class="line">  const fn2=(obj) =&gt; obj = &#123;age: 15&#125;</span><br><span class="line">  fn2(a)</span><br><span class="line">  console.log(a.age) //15</span><br></pre></td></tr></table></figure></li><li><p>理解2: 可能是值传递, 也可能是引用传递(地址值)</p></li></ul></blockquote><h4 id="④-JS引擎如何管理内存"><a href="#④-JS引擎如何管理内存" class="headerlink" title="④ JS引擎如何管理内存?"></a>④ <em>JS引擎如何管理内存?</em></h4><blockquote><ol><li>内存生命周期</li></ol><ul><li>分配小内存空间, 得到它的使用权</li><li>存储数据, 可以反复进行操作</li><li>释放小内存空间</li></ul><ol><li>释放内存</li></ol><ul><li>局部变量: 函数执行完自动释放</li><li>对象: 成为垃圾对象==&gt;垃圾回收器回收</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> var a = 3</span><br><span class="line"> var obj = &#123;name:&quot;hong&quot;&#125;</span><br><span class="line"> obj = undefined ||null  //此时,obj没有被释放,但是之前声明的`&#123;name:&quot;hong&quot;&#125;`由于没有人指向它,会在后面你某个时刻被垃圾回收器回收</span><br><span class="line"></span><br><span class="line">function fn () &#123; var b = &#123;&#125;&#125;</span><br><span class="line"> fn() // b是自动释放, b所指向的对象是在后面的某个时刻由垃圾回收器回收</span><br></pre></td></tr></table></figure></blockquote><h2 id="3、对象"><a href="#3、对象" class="headerlink" title="3、对象"></a>3、对象</h2><h3 id="Ⅰ-对象的概念"><a href="#Ⅰ-对象的概念" class="headerlink" title="Ⅰ-对象的概念"></a>Ⅰ-对象的概念</h3><h4 id="①-什么是对象"><a href="#①-什么是对象" class="headerlink" title="① 什么是对象?"></a>① <em>什么是对象?</em></h4><blockquote><ul><li>多个数据的封装体</li><li>用来保存多个数据的容器</li><li>一个对象代表现实中的一个事物</li></ul></blockquote><h4 id="②-为什么要用对象"><a href="#②-为什么要用对象" class="headerlink" title="② 为什么要用对象?"></a>② <em>为什么要用对象?</em></h4><blockquote><ul><li>统一管理多个数据</li></ul></blockquote><h4 id="③-对象的组成"><a href="#③-对象的组成" class="headerlink" title="③ 对象的组成"></a>③ <em>对象的组成</em></h4><blockquote><ul><li>属性: 属性名(字符串)和属性值(任意)组成</li><li>方法: 一种特别的属性(属性值是函数)</li></ul></blockquote><h3 id="Ⅱ-如何访问对象内部数据"><a href="#Ⅱ-如何访问对象内部数据" class="headerlink" title="Ⅱ-如何访问对象内部数据?"></a>Ⅱ-如何访问对象内部数据?</h3><blockquote><ul><li><code>.属性名</code>: 编码简单, 有时不能用</li><li><code>[&#39;属性名&#39;]</code>: 编码麻烦, 能通用</li></ul></blockquote><h3 id="Ⅲ-什么时候必须使用-39-属性名-39-的方式"><a href="#Ⅲ-什么时候必须使用-39-属性名-39-的方式" class="headerlink" title="Ⅲ-什么时候必须使用[&#39;属性名&#39;]的方式?"></a>Ⅲ-什么时候必须使用<code>[&#39;属性名&#39;]</code>的方式?</h3><blockquote><ol><li>属性名包含特殊字符: <code>-</code> <code>空格</code></li><li>属性名不确定</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var p = &#123;&#125;</span><br><span class="line">//1. 给p对象添加一个属性: content type: text/json</span><br><span class="line">// p.content-type = &#x27;text/json&#x27; //不能用</span><br><span class="line">p[&#x27;content-type&#x27;] = &#x27;text/json&#x27;</span><br><span class="line">console.log(p[&#x27;content-type&#x27;])</span><br><span class="line"></span><br><span class="line">//2. 属性名不确定</span><br><span class="line">var propName = &#x27;myAge&#x27;</span><br><span class="line">var value = 18</span><br><span class="line">// p.propName = value //不能用</span><br><span class="line">p[propName] = value</span><br><span class="line">console.log(p[propName])</span><br></pre></td></tr></table></figure></blockquote><h2 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h2><h3 id="Ⅰ-函数的概念"><a href="#Ⅰ-函数的概念" class="headerlink" title="Ⅰ-函数的概念"></a>Ⅰ-函数的概念</h3><h4 id="①-什么是函数"><a href="#①-什么是函数" class="headerlink" title="① 什么是函数"></a>① <em>什么是函数</em></h4><blockquote><ul><li>实现特定功能的n条语句的封装体</li><li>只有函数是可以执行的, 其它类型的数据不能执行</li></ul></blockquote><h4 id="②-为什么要用函数"><a href="#②-为什么要用函数" class="headerlink" title="② 为什么要用函数?"></a>② <em>为什么要用函数?</em></h4><blockquote><ul><li>提高代码复用</li><li>便于阅读交流</li></ul></blockquote><h4 id="③-如何定义函数"><a href="#③-如何定义函数" class="headerlink" title="③ 如何定义函数?"></a>③ <em>如何定义函数?</em></h4><blockquote><ul><li>函数声明</li><li>表达式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function fn1 () &#123; console.log(&#x27;fn1()&#x27; )//函数声明</span><br><span class="line">                 </span><br><span class="line">const fn2 = ()=&gt; console.log(&#x27;fn2()&#x27;)  //表达式</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-如何调用-执行-函数"><a href="#Ⅱ-如何调用-执行-函数" class="headerlink" title="Ⅱ-如何调用(执行)函数"></a>Ⅱ-如何调用(执行)函数</h3><blockquote><ol><li>test(): 直接调用</li><li>obj.test(): 通过对象调用</li><li>new test(): new调用</li><li><code>test.call/apply(obj)</code>: 临时让test成为obj的方法进行调用</li></ol><ul><li><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210705185535337.png" alt="image-20210705185535337"></li></ul><ol><li>代码示例</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">//此处不能使用箭头函数,因为箭头函数会改变this指向</span><br><span class="line">function test2 () &#123;</span><br><span class="line">  this.xxx = &#x27;hongjilin&#x27;</span><br><span class="line">&#125;</span><br><span class="line">// obj.test2()  不能直接, 根本就没有</span><br><span class="line">test2.call(obj)  // 可以让一个函数成为指定任意对象的方法进行调用</span><br><span class="line">console.log(obj.xxx)</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-回调函数"><a href="#Ⅲ-回调函数" class="headerlink" title="Ⅲ-回调函数"></a>Ⅲ-回调函数</h3><h4 id="①-什么函数才是回调函数"><a href="#①-什么函数才是回调函数" class="headerlink" title="① 什么函数才是回调函数?"></a>① <em>什么函数才是回调函数?</em></h4><blockquote><ul><li>你定义的</li><li>你没有调</li><li>但最终它执行了(在某个时刻或某个条件下)</li></ul></blockquote><h4 id="②-常见的回调函数"><a href="#②-常见的回调函数" class="headerlink" title="② 常见的回调函数?"></a>② <em>常见的回调函数?</em></h4><blockquote><ul><li>dom事件回调函数 ==&gt;发生事件的dom元素</li><li>定时器回调函数 ===&gt;window</li><li>ajax请求回调函数(后面讲)</li><li>生命周期回调函数(后面讲)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> // dom事件回调函数</span><br><span class="line">document.getElementById(&#x27;btn&#x27;).onclick = function () &#123;alert(this.innerHTML)&#125;</span><br><span class="line">// 定时器回调函数</span><br><span class="line">setTimeout(function () &#123;   alert(&#x27;到点了&#x27;+this)&#125;, 2000)</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅳ-IIFE-自调用函数"><a href="#Ⅳ-IIFE-自调用函数" class="headerlink" title="Ⅳ-IIFE (自调用函数)"></a>Ⅳ-IIFE (自调用函数)</h3><blockquote><ol><li>全称: <code>Immediately-Invoked Function Expression</code> 自调用函数</li><li>作用:<ul><li>隐藏实现</li><li>不会污染外部(一般指全局)命名空间</li><li>用它来编码js模块</li></ul></li><li>代码示例</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> (function () &#123; //匿名函数自调用</span><br><span class="line">   var a = 3</span><br><span class="line">   console.log(a + 3)</span><br><span class="line"> &#125;)()</span><br><span class="line"> console.log(a) // a is not defined</span><br><span class="line"> </span><br><span class="line"> //此处前方为何要一个`;`--&gt;因为自调用函数外部有一个()包裹,可能与前方以()结尾的代码被一起认为是函数调用</span><br><span class="line"> //不加分号可能会被认为这样 console.log(a)(IIFE)</span><br><span class="line"> ;(function () &#123;//不会污染外部(全局)命名空间--&gt;举例</span><br><span class="line">   let a = 1;</span><br><span class="line">   function test () &#123; console.log(++a) &#125; //声明一个局部函数test</span><br><span class="line">   window.$ = function () &#123;  return &#123;test: test&#125; &#125;// 向外暴露一个全局函数</span><br><span class="line"> &#125;)()</span><br><span class="line">test ()  //test is not defined</span><br><span class="line"> $().test() // 1. $是一个函数 2. $执行后返回的是一个对象</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅴ-函数中的this"><a href="#Ⅴ-函数中的this" class="headerlink" title="Ⅴ-函数中的this"></a>Ⅴ-函数中的this</h3><h4 id="①-this是什么"><a href="#①-this是什么" class="headerlink" title="① this是什么?"></a>① <em>this是什么?</em></h4><blockquote><ul><li>任何函数本质上都是通过某个对象来调用的,如果没有直接指定就是window</li><li>所有函数内部都有一个变量this</li><li>它的值是<code>调用函数的当前对象</code></li></ul></blockquote><h4 id="②-如何确定this的值"><a href="#②-如何确定this的值" class="headerlink" title="② 如何确定this的值?"></a>② <em>如何确定this的值?</em></h4><blockquote><ul><li>test(): window</li><li>p.test(): p</li><li>new test(): 新创建的对象</li><li>p.call(obj): obj</li></ul></blockquote><h4 id="③-代码举例详解"><a href="#③-代码举例详解" class="headerlink" title="③ 代码举例详解"></a>③ <em>代码举例详解</em></h4><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> function Person(color) &#123;</span><br><span class="line">   console.log(this)</span><br><span class="line">   this.color = color;</span><br><span class="line">   this.getColor = function () &#123;</span><br><span class="line">     console.log(this)</span><br><span class="line">     return this.color;</span><br><span class="line">   &#125;;</span><br><span class="line">   this.setColor = function (color) &#123;</span><br><span class="line">     console.log(this)</span><br><span class="line">     this.color = color;</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> Person(&quot;red&quot;); //this是谁? window</span><br><span class="line"></span><br><span class="line"> const p = new Person(&quot;yello&quot;); //this是谁? p</span><br><span class="line"></span><br><span class="line"> p.getColor(); //this是谁? p</span><br><span class="line"></span><br><span class="line"> const obj = &#123;&#125;;</span><br><span class="line"> //调用call会改变this指向--&gt;让我的p函数成为`obj`的临时方法进行调用</span><br><span class="line"> p.setColor.call(obj, &quot;black&quot;); //this是谁? obj</span><br><span class="line"></span><br><span class="line"> const test = p.setColor;</span><br><span class="line"> test(); //this是谁? window  --&gt;因为直接调用了</span><br><span class="line"></span><br><span class="line"> function fun1() &#123;</span><br><span class="line">   function fun2() &#123;  console.log(this); &#125;</span><br><span class="line">   fun2(); //this是谁? window</span><br><span class="line"> &#125;</span><br><span class="line">fun1();//调用fun1</span><br></pre></td></tr></table></figure></blockquote><h2 id="5、关于语句分号"><a href="#5、关于语句分号" class="headerlink" title="5、关于语句分号"></a>5、关于语句分号</h2><blockquote><ol><li>js一条语句的后面可以不加分号</li><li>是否加分号是编码风格问题, 没有应该不应该，只有你自己喜欢不喜欢</li><li>在下面2种情况下不加分号会有问题</li></ol><ul><li><code>小括号开头的前一条语句</code></li><li><code>中方括号开头的前一条语句</code></li></ul><ol><li>解决办法: 在行首加分号</li><li>强有力的例子: vue.js库</li><li>知乎热议: <a href="https://www.zhihu.com/question/20298345">https://www.zhihu.com/question/20298345</a></li></ol></blockquote><hr><h1 id="二、函数高级"><a href="#二、函数高级" class="headerlink" title="二、函数高级"></a>二、函数高级</h1><h2 id="1、原型与原型链"><a href="#1、原型与原型链" class="headerlink" title="1、原型与原型链"></a>1、原型与原型链</h2><h3 id="Ⅰ-原型-prototype"><a href="#Ⅰ-原型-prototype" class="headerlink" title="Ⅰ-原型 [prototype]"></a>Ⅰ-原型 [prototype]</h3><blockquote><ol><li>函数的<code>prototype</code>属性</li></ol><ul><li>每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)</li><li>原型对象中有一个属性constructor, 它指向函数对象</li><li><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210714201049312.png" alt="image-20210714201049312"></li></ul><ol><li>给原型对象添加属性(<code>一般都是方法</code>)</li></ol><ul><li>作用: 函数的所有实例对象自动拥有原型中的属性(方法)</li></ul><ol><li>代码示例</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)</span><br><span class="line">console.log(Date.prototype, typeof Date.prototype)</span><br><span class="line">function Fun () &#123; &#125;</span><br><span class="line">console.log(Fun.prototype)  // 默认指向一个Object空对象(没有我们的属性)</span><br><span class="line"></span><br><span class="line">// 原型对象中有一个属性constructor, 它指向函数对象</span><br><span class="line">console.log(Date.prototype.constructor===Date)</span><br><span class="line">console.log(Fun.prototype.constructor===Fun)</span><br><span class="line"></span><br><span class="line">//给原型对象添加属性(一般是方法) ===&gt;实例对象可以访问</span><br><span class="line">Fun.prototype.test = function () &#123; console.log(&#x27;test()&#x27;) &#125;</span><br><span class="line">var fun = new Fun()</span><br><span class="line">fun.test()</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-显式原型与隐式原型"><a href="#Ⅱ-显式原型与隐式原型" class="headerlink" title="Ⅱ-显式原型与隐式原型"></a>Ⅱ-显式原型与隐式原型</h3><blockquote><ol><li>每个函数function都有一个<code>prototype</code>，即<code>显式</code>原型(属性)</li><li>每个实例对象都有一个[<code>__ proto __</code>]，可称为<code>隐式</code>原型(属性)</li><li>对象的隐式原型的值为其对应构造函数的显式原型的值</li><li>内存结构</li></ol><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210714203043314.png" alt="image-20210714203043314"></p><ol><li>总结:</li></ol><ul><li>函数的[<code>prototype</code>]属性: 在定义函数时自动添加的, 默认值是一个空Object对象</li><li>对象的[<code>__ proto __</code>]属性: 创建对象时自动添加的, <code>默认值为构造函数的prototype属性值</code></li><li>程序员能直接操作显式原型, 但不能直接操作隐式原型(ES6之前)</li></ul><ol><li>代码示例:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//定义构造函数</span><br><span class="line">function Fn() &#123;</span><br><span class="line"> // 内部默认执行语句: this.prototype = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">// 1. 每个函数function都有一个prototype，即显式原型属性, 默认指向一个空的Object对象</span><br><span class="line">console.log(Fn.prototype)</span><br><span class="line">// 2. 每个实例对象都有一个__proto__，可称为隐式原型</span><br><span class="line">//创建实例对象</span><br><span class="line">var fn = new Fn()  // 内部默认执行语句: this.__proto__ = Fn.prototype</span><br><span class="line">console.log(fn.__proto__)</span><br><span class="line">// 3. 对象的隐式原型的值为其对应构造函数的显式原型的值</span><br><span class="line">console.log(Fn.prototype===fn.__proto__) // true</span><br><span class="line">//给原型添加方法</span><br><span class="line">Fn.prototype.test = function () &#123;</span><br><span class="line">  console.log(&#x27;test()&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">//通过实例调用原型的方法</span><br><span class="line">fn.test()</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-原型链"><a href="#Ⅲ-原型链" class="headerlink" title="Ⅲ-原型链"></a>Ⅲ-原型链</h3><h4 id="①-原型链"><a href="#①-原型链" class="headerlink" title="① 原型链"></a>① <em>原型链</em></h4><blockquote><ol><li>原型链</li></ol><ul><li>访问一个对象的属性时，<ul><li>先在自身属性中查找，找到返回</li><li>如果没有, 再沿着[<code>__ proto __</code>]这条链向上查找, 找到返回</li><li>如果最终没找到, 返回undefined</li><li><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210714210912653.png" alt="image-20210714210912653"></li></ul></li><li>别名: 隐式原型链</li><li>作用: 查找对象的属性(方法)</li></ul></blockquote><h4 id="②构造函数-原型-实例对象的关系-图解"><a href="#②构造函数-原型-实例对象的关系-图解" class="headerlink" title="②构造函数/原型/实例对象的关系(图解)"></a>②<em>构造函数/原型/实例对象的关系(图解)</em></h4><blockquote><ol><li>```<br> var o1 = new Object();<br> var o2 = {};<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20210714212928432](https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210714212928432.png)</span><br><span class="line"></span><br><span class="line">1. ```</span><br><span class="line">    function Foo()&#123;  &#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210714212945164.png" alt="image-20210714212945164"></p><p>ps:所有函数的[<code>__ proto __</code>]都是一样的</p></blockquote><h4 id="③-属性问题"><a href="#③-属性问题" class="headerlink" title="③ 属性问题"></a>③ <em>属性问题</em></h4><blockquote><ul><li>读取对象的属性值时: 会自动到原型链中查找</li><li>设置对象的属性值时: 不会查找原型链, 如果当前对象中没有此属性, 直接添加此属性并设置其值</li><li>方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上</li><li>代码示例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function Fn() &#123; &#125;</span><br><span class="line">Fn.prototype.a = &#x27;xxx&#x27;</span><br><span class="line">var fn1 = new Fn()</span><br><span class="line">console.log(fn1.a, fn1) //xxx Fn&#123;&#125;</span><br><span class="line"></span><br><span class="line">var fn2 = new Fn()</span><br><span class="line">fn2.a = &#x27;yyy&#x27;</span><br><span class="line">console.log(fn1.a, fn2.a, fn2) //xxx yyy  Fn&#123;a: &quot;yyy&quot;&#125;</span><br><span class="line"></span><br><span class="line">function Person(name, age) &#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setName = function (name) &#123;</span><br><span class="line">  this.name = name</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&#x27;Tom&#x27;, 12)</span><br><span class="line">p1.setName(&#x27;Bob&#x27;)</span><br><span class="line">console.log(p1)  //Person &#123;name: &quot;Bob&quot;, age: 12&#125;</span><br><span class="line"></span><br><span class="line">var p2 = new Person(&#x27;Jack&#x27;, 12)</span><br><span class="line">p2.setName(&#x27;Cat&#x27;)</span><br><span class="line">console.log(p2) //Person &#123;name: &quot;Cat&quot;, age: 12&#125;</span><br><span class="line">console.log(p1.__proto__===p2.__proto__) // true   --&gt;所以方法一般定义在原型中</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅳ-instanceof"><a href="#Ⅳ-instanceof" class="headerlink" title="Ⅳ-instanceof"></a>Ⅳ-instanceof</h3><blockquote><ol><li>instanceof是如何判断的?</li></ol><ul><li>表达式: A instanceof B</li><li>如果B函数的显式原型对象在A对象的原型链上, 返回true, 否则返回false</li></ul><ol><li>Function是通过new自己产生的实例</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">案例1</span><br><span class="line"> */</span><br><span class="line">function Foo() &#123;  &#125;</span><br><span class="line">var f1 = new Foo()</span><br><span class="line">console.log(f1 instanceof Foo) // true</span><br><span class="line">console.log(f1 instanceof Object) // true</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">案例2</span><br><span class="line"> */</span><br><span class="line">console.log(Object instanceof Function) // true</span><br><span class="line">console.log(Object instanceof Object) // true</span><br><span class="line">console.log(Function instanceof Function) // true</span><br><span class="line">console.log(Function instanceof Object) // true</span><br><span class="line"></span><br><span class="line">function Foo() &#123;&#125;</span><br><span class="line">console.log(Object instanceof  Foo) // false</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅴ-相关面试题"><a href="#Ⅴ-相关面试题" class="headerlink" title="Ⅴ-相关面试题"></a>Ⅴ-相关面试题</h3><blockquote><p>测试题1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">测试题1</span><br><span class="line"> */</span><br><span class="line">function A () &#123;&#125;</span><br><span class="line">A.prototype.n = 1</span><br><span class="line">let b = new A()</span><br><span class="line">A.prototype = &#123; n: 2, m: 3&#125;</span><br><span class="line">let c = new A()</span><br><span class="line">console.log(b.n, b.m, c.n, c.m) // 1 undefined 2 3</span><br></pre></td></tr></table></figure><p>测试题2:原理看<a href="https://gitee.com/hongjilin/hongs-study-notes/blob/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md#%E2%91%A1*%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/%E5%8E%9F%E5%9E%8B/%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%B3%E7%B3%BB(%E5%9B%BE%E8%A7%A3)*">②<em>构造函数/原型/实例对象的关系(图解)</em></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> 测试题2</span><br><span class="line"> */</span><br><span class="line">function F ()&#123;&#125;</span><br><span class="line">Object.prototype.a = function()&#123;</span><br><span class="line">  console.log(&#x27;a()&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">Function.prototype.b = function()&#123;</span><br><span class="line">  console.log(&#x27;b()&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let f = new F()</span><br><span class="line">f.a() //a()</span><br><span class="line">f.b() //f.b is not a function --&gt;找不到</span><br><span class="line">F.a() //a()</span><br><span class="line">F.b() //b()</span><br><span class="line"></span><br><span class="line">console.log(f)</span><br><span class="line">console.log(Object.prototype)</span><br><span class="line">console.log(Function.prototype)</span><br></pre></td></tr></table></figure><p>结果图例</p><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210723173855550.png" alt="image-20210723173855550"></p></blockquote><h2 id="2、执行上下文与执行上下文栈"><a href="#2、执行上下文与执行上下文栈" class="headerlink" title="2、执行上下文与执行上下文栈"></a>2、执行上下文与执行上下文栈</h2><blockquote><blockquote><p>当代码在 JavaScript 中运行时，执行代码的环境非常重要，并将概括为以下几点：</p><p><strong>全局代码</strong>——第一次执行代码的默认环境。</p><p><strong>函数代码</strong>——当执行流进入函数体时。</p><p>(…) —— 我们当作 执行上下文 是当前代码执行的一个环境与范围。</p></blockquote><p>换句话说，当我们启动程序时，我们从全局执行上下文中开始。一些变量是在全局执行上下文中声明的。我们称之为全局变量。当程序调用一个函数时，会发生什么?</p><p>以下几个步骤：</p><ul><li>JavaScript 创建一个新的执行上下文，我们叫作本地执行上下文。</li><li>这个本地执行上下文将有它自己的一组变量，这些变量将是这个执行上下文的本地变量。</li><li>新的执行上下文被推到到执行堆栈中。可以将执行堆栈看作是一种保存程序在其执行中的位置的容器。</li></ul><p>函数什么时候结束?当它遇到一个 return 语句或一个结束括号}。</p><p>当一个函数结束时，会发生以下情况:</p><ul><li>这个本地执行上下文从执行堆栈中弹出。</li><li>函数将返回值返回调用上下文。调用上下文是调用这个本地的执行上下文，它可以是全局执行上下文，也可以是另外一个本地的执行上下文。这取决于调用执行上下文来处理此时的返回值，返回的值可以是一个对象、一个数组、一个函数、一个布尔值等等，如果函数没有 return 语句，则返回 undefined。</li><li>这个本地执行上下文被销毁，销毁是很重要，这个本地执行上下文中声明的所有变量都将被删除，不在有变量，这个就是为什么 称为本地执行上下文中自有的变量。</li></ul><p>此图出于CSDN的<a href="https://blog.csdn.net/wangfeijiu">Free Joe</a></p></blockquote><h3 id="Ⅰ-变量提升与函数提升"><a href="#Ⅰ-变量提升与函数提升" class="headerlink" title="Ⅰ-变量提升与函数提升"></a>Ⅰ-变量提升与函数提升</h3><blockquote><ol><li>变量声明提升</li></ol><ul><li>通过var定义(声明)的变量, 在定义语句之前就可以访问到</li><li>值: undefined</li></ul><ol><li>函数声明提升</li></ol><ul><li>通过function声明的函数, 在之前就可以直接调用</li><li>值: 函数定义(对象)</li></ul><ol><li>引出一个问题: 变量提升和函数提升是如何产生的?</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> 面试题 : 输出 undefined</span><br><span class="line">  */</span><br><span class="line"> var a = 3</span><br><span class="line"> function fn () &#123;</span><br><span class="line">   console.log(a)</span><br><span class="line">   var a = 4 //变量提升</span><br><span class="line"> &#125;</span><br><span class="line"> fn()  //undefined</span><br><span class="line">&#x27;--------------------------------------------&#x27;</span><br><span class="line"> console.log(b) //undefined  变量提升</span><br><span class="line"> fn2() //可调用  函数提升</span><br><span class="line"> // fn3() //不能  变量提升</span><br><span class="line"> var b = 3</span><br><span class="line"> function fn2() &#123;  console.log(&#x27;fn2()&#x27;) &#125;</span><br><span class="line"> var fn3 = function () &#123; console.log(&#x27;fn3()&#x27;) &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-执行上下文"><a href="#Ⅱ-执行上下文" class="headerlink" title="Ⅱ-执行上下文"></a>Ⅱ-执行上下文</h3><blockquote><ol><li>代码分类(位置)</li></ol><ul><li>全局代码</li><li>函数(局部)代码</li></ul><ol><li>全局执行上下文</li></ol><ul><li>在执行全局代码前将window确定为全局执行上下文</li><li>对全局数据进行预处理<ul><li>var定义的全局变量==&gt;undefined, 添加为window的属性</li><li>function声明的全局函数==&gt;赋值(fun), 添加为window的方法</li><li>this==&gt;赋值(window)</li></ul></li><li>开始执行全局代码</li></ul><ol><li>函数执行上下文</li></ol><ul><li>在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象(虚拟的, 存在于栈中)</li><li>对局部数据进行预处理<ul><li>形参变量==&gt;赋值(实参)==&gt;添加为执行上下文的属性</li><li><code>arguments</code>==&gt;赋值(实参列表), 添加为执行上下文的属性 –&gt;<a href="https://developer.mozilla.org/zh-CN/docs/orphaned/Web/JavaScript/Reference/Functions/arguments">不懂的同学看这里</a></li><li>var定义的局部变量==&gt;undefined, 添加为执行上下文的属性</li><li>function声明的函数 ==&gt;赋值(fun), 添加为执行上下文的方法</li><li>this==&gt;赋值(调用函数的对象)</li></ul></li><li>开始执行函数体代码</li></ul></blockquote><h3 id="Ⅲ-执行上下文栈"><a href="#Ⅲ-执行上下文栈" class="headerlink" title="Ⅲ-执行上下文栈"></a>Ⅲ-执行上下文栈</h3><blockquote><ol><li>在全局代码执行前, JS引擎就会创建一个栈来存储管理所有的执行上下文对象</li><li>在全局执行上下文(window)确定后, 将其添加到栈中(压栈)–&gt;<code>所以栈底百分百是[window]</code></li><li>在函数执行上下文创建后, 将其添加到栈中(压栈)</li><li>在当前函数执行完后,将栈顶的对象移除(出栈)</li><li>当所有的代码执行完后, 栈中只剩下window</li><li><code>上下文栈数==函数调用数+1</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//1. 进入全局执行上下文</span><br><span class="line">var a = 10</span><br><span class="line">var bar = function (x) &#123;</span><br><span class="line">  var b = 5</span><br><span class="line">  foo(x + b)   //3. 进入foo执行上下文           </span><br><span class="line">&#125;</span><br><span class="line">var foo = function (y) &#123;</span><br><span class="line">  var c = 5</span><br><span class="line">  console.log(a + c + y)</span><br><span class="line">&#125;</span><br><span class="line">bar(10) //2. 进入bar函数执行上下文</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210723183046182.png" alt="image-20210723183046182"></p><p>此处用一个动态图来展示:</p><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/%E6%89%A7%E8%A1%8C%E6%A0%88%E4%B8%8E%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97.gif" alt="img"></p><p>举个栗子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//栗子</span><br><span class="line">&lt;!--</span><br><span class="line">1. 依次输出什么?</span><br><span class="line">gb: undefined</span><br><span class="line">fb: 1</span><br><span class="line">fb: 2</span><br><span class="line">fb: 3</span><br><span class="line">fe: 3</span><br><span class="line">fe: 2</span><br><span class="line">fe: 1</span><br><span class="line">ge: 1</span><br><span class="line">2. 整个过程中产生了几个执行上下文?  5</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">console.log(&#x27;gb: &#x27;+ i)</span><br><span class="line">var i = 1</span><br><span class="line">foo(1)</span><br><span class="line">function foo(i) &#123;</span><br><span class="line">  if (i == 4) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#x27;fb:&#x27; + i)</span><br><span class="line">  foo(i + 1) //递归调用: 在函数内部调用自己</span><br><span class="line">  console.log(&#x27;fe:&#x27; + i) //出栈 所以会 3 2 1这样的结果</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;ge: &#x27; + i)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅳ-相关面试题"><a href="#Ⅳ-相关面试题" class="headerlink" title="Ⅳ-相关面试题"></a>Ⅳ-相关面试题</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">函数提升优先级高于变量提升,且不会被变量声明覆盖,但是会被变量赋值覆盖</span><br><span class="line">/*</span><br><span class="line">测试题1:  先执行变量提升, 再执行函数提升</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">function a() &#123;&#125;</span><br><span class="line">var a</span><br><span class="line">console.log(typeof a) // &#x27;function&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">测试题2:</span><br><span class="line">*/</span><br><span class="line">if (!(b in window)) &#123;</span><br><span class="line"> var b = 1</span><br><span class="line">&#125;</span><br><span class="line">console.log(b) // undefined</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">测试题3:</span><br><span class="line">*/</span><br><span class="line">var c = 1</span><br><span class="line">function c(c) &#123;</span><br><span class="line"> console.log(c)</span><br><span class="line"> var c = 3 //与此行无关</span><br><span class="line">&#125;</span><br><span class="line">c(2) // 报错  c is not a function</span><br></pre></td></tr></table></figure></blockquote><h2 id="3、作用域与作用域链"><a href="#3、作用域与作用域链" class="headerlink" title="3、作用域与作用域链"></a>3、作用域与作用域链</h2><h3 id="Ⅰ-作用域"><a href="#Ⅰ-作用域" class="headerlink" title="Ⅰ-作用域"></a>Ⅰ-作用域</h3><blockquote><ol><li>理解</li></ol><ul><li>就是一块”地盘”, 一个代码段所在的区域</li><li>它是静态的(相对于上下文对象), 在编写代码时就确定了</li></ul><ol><li>分类</li></ol><ul><li>全局作用域</li><li>函数作用域</li><li>没有块作用域(ES6有了) –&gt;(java语言也有)</li></ul><ol><li>作用</li></ol><ul><li>隔离变量，不同作用域下同名变量不会有冲突</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*  //没块作用域</span><br><span class="line"> if(true) &#123; var c = 3 &#125;</span><br><span class="line"> console.log(c)</span><br><span class="line"> */</span><br><span class="line"> var a = 10,</span><br><span class="line">   b = 20</span><br><span class="line"> function fn(x) &#123;</span><br><span class="line">   var a = 100, c = 300;</span><br><span class="line">   console.log(&#x27;fn()&#x27;, a, b, c, x) //100 20 300 10</span><br><span class="line">   function bar(x) &#123;</span><br><span class="line">     var a = 1000, d = 400</span><br><span class="line">     console.log(&#x27;bar()&#x27;, a, b, c, d, x)</span><br><span class="line">   &#125;</span><br><span class="line">   bar(100)//1000 20 300 400 100</span><br><span class="line">   bar(200)//1000 20 300 400 200</span><br><span class="line"> &#125;</span><br><span class="line"> fn(10)</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-作用域与执行上下文的区别与联系"><a href="#Ⅱ-作用域与执行上下文的区别与联系" class="headerlink" title="Ⅱ-作用域与执行上下文的区别与联系"></a>Ⅱ-作用域与执行上下文的区别与联系</h3><blockquote><ol><li>区别1:</li></ol><ul><li>全局作用域之外，每个函数都会创建自己的作用域，<code>作用域在函数定义时就已经确定了。而不是在函数调用时</code></li><li>全局执行上下文环境是在全局作用域确定之后, js代码马上执行之前创建</li><li>函数执行上下文是在调用函数时, 函数体代码执行之前创建</li></ul><ol><li>区别2:</li></ol><ul><li>作用域是静态的, 只要函数定义好了就一直存在, 且不会再变化</li><li>执行上下文是动态的, 调用函数时创建, 函数调用结束时就会自动释放</li></ul><ol><li>联系:</li></ol><ul><li>执行上下文(对象)是从属于所在的作用域</li><li>全局上下文环境==&gt;全局作用域</li><li>函数上下文环境==&gt;对应的函数使用域</li></ul><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210727141319410.png" alt="image-20210727141319410"></p></blockquote><h3 id="Ⅲ-作用域链"><a href="#Ⅲ-作用域链" class="headerlink" title="Ⅲ-作用域链"></a>Ⅲ-作用域链</h3><blockquote><ol><li>理解</li></ol><ul><li>多个上下级关系的作用域形成的链, 它的方向是从下向上的(从内到外)</li><li>查找变量时就是沿着作用域链来查找的</li></ul><ol><li>查找一个变量的查找规则</li></ol><ul><li>在当前作用域下的执行上下文中查找对应的属性, 如果有直接返回, 否则进入2</li><li>在上一级作用域的执行上下文中查找对应的属性, 如果有直接返回, 否则进入3</li><li>再次执行2的相同操作, 直到全局作用域, 如果还找不到就抛出找不到的异常</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line"> function fn1() &#123;</span><br><span class="line">   var b = 2</span><br><span class="line">   function fn2() &#123;</span><br><span class="line">     var c = 3</span><br><span class="line">     console.log(c)</span><br><span class="line">     console.log(b)</span><br><span class="line">     console.log(a)</span><br><span class="line">     console.log(d)</span><br><span class="line">   &#125;</span><br><span class="line">   fn2()</span><br><span class="line"> &#125;</span><br><span class="line"> fn1()</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅳ-相关面试题-1"><a href="#Ⅳ-相关面试题-1" class="headerlink" title="Ⅳ-相关面试题"></a>Ⅳ-相关面试题</h3><h4 id="①-作用域在函数定义时就已经确定了。而不是在函数调用时"><a href="#①-作用域在函数定义时就已经确定了。而不是在函数调用时" class="headerlink" title="① 作用域在函数定义时就已经确定了。而不是在函数调用时"></a>① <code>作用域在函数定义时就已经确定了。而不是在函数调用时</code></h4><blockquote><p>作用域1:<code>作用域在函数定义时就已经确定了。而不是在函数调用时</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x = 10;</span><br><span class="line">function fn() &#123; console.log(x); &#125;</span><br><span class="line">function show(f) &#123;</span><br><span class="line">  var x = 20;</span><br><span class="line">  f();</span><br><span class="line">&#125;</span><br><span class="line">show(fn); //输出10</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210726192714660.png" alt="image-20210726192714660"></p></blockquote><h4 id="②-对象变量不能产生局部作用域"><a href="#②-对象变量不能产生局部作用域" class="headerlink" title="② 对象变量不能产生局部作用域"></a>② 对象变量不能产生局部作用域</h4><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var fn = function () &#123;</span><br><span class="line"> console.log(fn)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line">var obj = &#123; //对象变量不能产生局部作用域,所以会找到全局去,导致报错</span><br><span class="line"> fn2: function () &#123;</span><br><span class="line">  console.log(fn2)</span><br><span class="line">  //console.log(this.fn2)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn2()</span><br></pre></td></tr></table></figure></blockquote><h2 id="4、闭包预备知识点梳理"><a href="#4、闭包预备知识点梳理" class="headerlink" title="4、闭包预备知识点梳理"></a>4、闭包预备知识点梳理</h2><blockquote><p>在进入闭包之前,你要确保上面知识点你能掌握.你不确定 ? 噢好吧,那你就跟着我看下这部分梳理(如果懂得直接跳过即可)</p></blockquote><h3 id="Ⅰ-举个栗子分析执行上下文"><a href="#Ⅰ-举个栗子分析执行上下文" class="headerlink" title="Ⅰ- 举个栗子分析执行上下文"></a>Ⅰ- 举个栗子分析执行上下文</h3><blockquote><p>在讨论闭包之前，让我们看下下方的代码(建议先只看代码自己头脑风暴再看笔记中的描述),也算是对上面知识点的梳理回顾：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1: let a = 3</span><br><span class="line">2: function addTwo(x) &#123;</span><br><span class="line">3:  let ret = x + 2</span><br><span class="line">4:   return ret</span><br><span class="line">5:  &#125;</span><br><span class="line">6: let b = addTwo(a)</span><br><span class="line">7: console.log(b)</span><br></pre></td></tr></table></figure><p>为了理解 JavaScript 引擎是如何工作的，让我们详细分析一下：</p><ol><li>在第 1 行，我们在全局执行上下文中声明了一个新变量 a，并将赋值为 3。</li><li>接下来就变得棘手了，第 2 行到第 5 行实际上是在一起的。这里发生了什么?</li></ol><ul><li>我们在全局执行上下文中声明了一个名为<code>addTwo</code>的新变量,我们给它分配了什么? –&gt;<code>一个函数定义</code>。</li><li>两个括号{}之间的任何内容都被分配给<code>addTwo</code>，<code>函数内部的代码没有被求值，没有被执行，只是存储在一个变量中以备将来使用</code>。</li></ul><ol><li>现在我们在第 6 行。</li></ol><ul><li>它看起来很简单，但是这里有很多东西需要拆开分析。首先，我们在全局执行上下文中声明一个新变量，并将其标记为[<code>b</code>]，<code>变量一经声明，其值即为 undefined</code>。</li><li>接下来，仍然在第 6 行，我们看到一个赋值操作符。我们准备给变量<code>b</code>赋一个新值，接下来我们看到一个函数被调用。<code>当您看到一个变量后面跟着一个圆括号(…)时，这就是调用函数的信号</code>，接着，每个函数都返回一些东西(值、对象或 undefined)，无论从函数返回什么，都将赋值给变量<code>b</code>。</li></ul><ol><li>但是首先我们需要调用标记为<code>addTwo</code>的函数。JavaScript 将在其全局执行上下文内存中查找名为<code>addTwo</code>的变量。噢，它找到了一个，它是在[<code>步骤 2(或第 2 - 5 行)中定义</code>]的。变量[<code>addTwo</code>]包含一个函数定义。</li></ol><ul><li>注意:<code>变量[a]作为参数传递给函数</code>。</li><li>JavaScript 在全局执行上下文内存中搜索变量<code>a</code>，找到它，发现它的值是 3，并将数字 3 作为参数传递给函数，准备好执行函数。</li></ul><ol><li>现在执行上下文将切换,创建了一个新的本地执行上下文，我们将其命名为[“<code>addTwo 执行上下文</code>”，<code>执行上下文被推送到调用堆栈上</code>。在 addTwo 执行上下文中，我们要做的第一件事是什么?</li></ol><ul><li>你可能会说，“在 addTwo 执行上下文中声明了一个新的变量 ret”，<code>这是不对的</code>。</li><li><code>正确的答案是</code>:我们需要先看函数的参数。<code>在 addTwo 执行上下文中声明一个新的变量[x]</code>，因为值 3 是作为参数传递的，所以变量 x 被赋值为 3。</li><li>下一步才是在 addTwo 执行上下文中声明一个新的变量<code>ret</code>。它的值被设置为 undefined(第三行)。</li></ul><ol><li>仍然是第 3 行，需要执行一个相加操作。</li></ol><ul><li>首先我们需要<code>x</code>的值，JavaScript 会寻找一个变量<code>x</code>，它会首先在<code>addTwo</code>执行上下文中寻找，找到了一个值为 3。第二个操作数是数字 2。两个相加结果为 5 就被分配给变量<code>ret</code>。</li></ul><ol><li>第 4 行，我们返回变量<code>ret</code>的内容，在 addTwo 执行上下文中查找，找到值为 5，返回，函数结束。</li><li>第 4 - 5 行，函数结束。</li></ol><ul><li><code>addTwo 执行上下文被销毁</code>，变量<code>x</code>和<code>ret</code>被消去了，它们已经不存在了。<code>addTwo 执行上下文从调用堆栈中弹出</code>，返回值返回给调用上下文，在这种情况下，调用上下文是全局执行上下文，因为函数<code>addTwo</code> 是从全局执行上下文调用的。</li></ul><ol><li>现在我们继续第 4 步的内容，返回值 5 被分配给变量<code>b</code>，<code>此时实际上程序仍然在第 6 行</code>(盗梦空间既视感<img src="https://assets.gitee.com/assets/emoji/dog-90422f7a15bca6134552482c3115f5d7.png" alt=":dog:">)</li><li>在第 7 行，<code>b</code>的值 5 被打印到控制台了。</li></ol><p>对于一个非常简单的程序，这是一个非常冗长的解释，我们甚至还没有涉及闭包。但肯定会涉及的，不过首先我们得绕一两个弯。</p></blockquote><h3 id="Ⅱ-举个栗子分析词法作用域"><a href="#Ⅱ-举个栗子分析词法作用域" class="headerlink" title="Ⅱ-举个栗子分析词法作用域"></a>Ⅱ-举个栗子分析词法作用域</h3><blockquote><p>这里想说明，我们在函数执行上下文中有变量，在全局执行上下文中有变量。JavaScript 的一个复杂之处在于它如何查找变量，如果在函数执行上下文中找不到变量，它将在调用上下文中寻找它，如果在它的调用上下文中没有找到，就一直往上一级，直到它在全局执行上下文中查找为止。(如果最后找不到，它就是 undefined)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1: let val1 = 2</span><br><span class="line">2: function multiplyThis(n) &#123;</span><br><span class="line">3:   let ret = n * val1</span><br><span class="line">4:    return ret</span><br><span class="line">5: &#125;</span><br><span class="line">6: let multiplied = multiplyThis(6)</span><br><span class="line">7: console.log(&#x27;example of scope:&#x27;, multiplied)</span><br></pre></td></tr></table></figure><p>下面列出向个步骤来解释一下（如果你已经熟悉了，请跳过）：</p><ol><li>在全局执行上下文中声明一个新的变量<code>val1</code>，并将其赋值为 2。</li><li>行 2 - 5，声明一个新的变量 <code>multiplyThis</code>，并给它分配一个函数定义。</li><li>第六行，声明一个在全局执行上下文 <code>multiplied</code> 新变量。</li><li>从全局执行上下文内存中查找变量<code>multiplyThis</code>，并将其作为函数执行，传递数字 6 作为参数。</li></ol><ul><li>新函数调用(创建新执行上下文），创建一个新的 <code>multiplyThis</code> 函数执行上下文。</li><li>在 <code>multiplyThis</code> 执行上下文中，<code>声明一个变量 n 并将其赋值为 6</code> –&gt;声明后才会进入函数体内部执行</li></ul><ol><li>执行函数回到第 3 行。</li></ol><ul><li><p>在<code>multiplyThis</code>执行上下文中，声明一个变量<code>ret</code>。</p></li><li><p>继续第 3 行。对两个操作数 n 和 val1 进行乘法运算.在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiplyThis</span><br></pre></td></tr></table></figure><p>执行上下文中查找变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n</span><br></pre></td></tr></table></figure><p>。</p><ul><li>我们在步骤 6 中声明了它,它的内容是数字 6。在<code>multiplyThis</code>执行上下文中查找变量<code>val1</code>。</li><li><code>multiplyThis</code>执行上下文没有一个标记为 val1 的变量。<code>我们向调用上下文查找，调用上下文是全局执行上下文，在全局执行上下文中</code>寻找 [<code>val1</code>]。哦，是的、在那儿，它在步骤 1 中定义，数值是 2。</li></ul></li><li><p>继续第 3 行。将两个操作数相乘并将其赋值给<code>ret</code>变量，6 * 2 = 12，ret 现在值为 12。</p></li></ul><ol><li>返回<code>ret</code>变量，销毁<code>multiplyThis</code>执行上下文及其变量 <code>ret</code> 和 <code>n</code> 。变量 <code>val1</code> 没有被销毁，因为它是全局执行上下文的一部分。</li><li>回到第 6 行。在调用上下文中，数字 12 赋值给 <code>multiplied</code> 的变量。</li><li>最后在第 7 行，我们在控制台中打印 <code>multiplied</code> 变量的值</li></ol><p>在这个例子中，我们需要记住一个函数可以访问在它的调用上下文中定义的变量，这个就是<strong>词法作用域（Lexical scope）</strong>。</p></blockquote><h3 id="Ⅲ-返回函数的函数-高阶函数"><a href="#Ⅲ-返回函数的函数-高阶函数" class="headerlink" title="Ⅲ- 返回函数的函数[高阶函数]"></a>Ⅲ- 返回函数的函数[<code>高阶函数</code>]</h3><blockquote><p>在第一个例子中，函数<code>addTwo</code>返回一个数字。请记住，函数可以返回任何东西。让我们看一个返回函数的函数示例，因为这对于下方理解闭包非常重要。看栗子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1: let val = 7</span><br><span class="line">2: function createAdder() &#123;</span><br><span class="line">3:   function addNumbers(a, b) &#123;</span><br><span class="line">4:     let ret = a + b</span><br><span class="line">5:     return ret</span><br><span class="line">6:   &#125;</span><br><span class="line">7:   return addNumbers</span><br><span class="line">8: &#125;</span><br><span class="line">9: let adder = createAdder()</span><br><span class="line">10: let sum = adder(val, 8)</span><br><span class="line">11: console.log(&#x27;example of function returning a function: &#x27;, sum)</span><br></pre></td></tr></table></figure><p>让我们回到分步分解：</p><ol><li>第一行。我们在全局执行上下文中声明一个变量<code>val</code>并赋值为 7。</li><li>行 2 - 8。我们在全局执行上下文中声明了一个名为 <code>createAdder</code> 的变量，并为其分配了一个函数定义。</li></ol><ul><li>内部的第 3 至 7 行描述了上述函数定义，和以前一样，在这一点上，我们没有直接讨论这个函数。我们只是将函数定义存储到[<code>createAdder</code>]变量中。</li></ul><ol><li>第 9 行。</li></ol><ul><li>我们在全局执行上下文中声明了一个名为 <code>adder</code> 的新变量，暂时，值为 undefined</li><li>我们看到括号()，我们需要执行或调用一个函数，查找全局执行上下文的内存并查找名为<code>createAdder</code> 的变量，它是在步骤 2 中创建的。好吧，我们调用它。</li></ul><ol><li>调用函数时，执行到第 2 行。</li></ol><ul><li>创建一个新的<code>createAdder</code>执行上下文。我们可以在<code>createAdder</code>的执行上下文中创建自有变量。js 引擎将<code>createAdder</code>的上下文添加到调用堆栈。这个函数没有参数，让我们<code>直接跳到它的主体部分</code>.</li></ul><ol><li>第 3 - 6 行(执行到主体函数中)。</li></ol><ul><li>我们有一个新的函数声明，我们在<code>createAdder</code>执行上下文中创建一个变量 addNumbers。这很重要，<code>addnumber</code>只存在于<code>createAdder</code>执行上下文中。我们将函数定义存储在名为 <code>addNumbers</code> 的自有变量中。</li><li>在第 7 行，我们返回变量<code>addNumbers</code>的内容。js 引擎查找一个名为<code>addNumbers</code>的变量并找到它，这是一个函数定义。好的，函数可以返回任何东西，包括函数定义。我们返<code>addNumbers</code>的定义。第 4 行和第 5 行括号之间的内容构成该函数定义。</li></ul><ol><li>[return addNumbers]时，<code>createAdder</code>执行上下文将被销毁。<code>addNumbers</code> 变量不再存在。但<code>addNumbers</code>函数定义仍然存在，<code>因为它返回并赋值给了 adder 变量</code>。</li></ol><ul><li><code>此处很重要</code>!!!此时的[<code>adder=createAdder()</code>]实际上它的值是[<code>addNumbers</code>]的函数定义而不是[<code>createAdder</code>]了,adder现在是一个匿名函数–这里有点绕,要确定理解</li></ul><ol><li>第 10 行。我们在全局执行上下文中定义了一个新的变量 <code>sum</code>，先赋值为 undefined;</li></ol><ul><li>接下来我们需要执行一个函数。哪个函数?<ul><li>是名为<code>adder</code>变量中定义的函数。我们在全局执行上下文中查找它，果然找到了它，这个函数有两个参数。</li><li>让我们查找这两个参数，第一个是我们在步骤 1 中定义的变量<code>val</code>，它表示数字 7，第二个是数字 8。</li></ul></li><li>现在我们要执行这个函数，函数定义概述在第 3-5 行，<code>因为这个函数是匿名</code>，为了方便理解，我们暂且叫它<code>adder</code>吧。这时创建一个<code>adder</code>函数执行上下文，在<code>adder</code>执行上下文中创建了两个新变量 <code>a</code> 和 <code>b</code>。它们分别被赋值为 7 和 8，因为这些是我们在上一步传递给函数的参数。</li></ul><ol><li>执行回到第 4 行。</li></ol><ul><li>在<code>adder</code>执行上下文中声明了一个名为<code>ret</code>的新变量,</li><li>将变量<code>a</code>的内容和变量<code>b</code>的内容相加得 15 并赋给 ret 变量。</li></ul><ol><li><code>ret</code>变量从该函数返回。这个匿名函数执行上下文被销毁，从调用堆栈中删除，变量<code>a</code>、<code>b</code>和<code>ret</code>不再存在。</li><li>返回值被分配给我们在步骤 9 中定义的<code>sum</code>变量。</li><li>我们将<code>sum</code>的值打印到控制台。</li></ol><p>如预期，控制台将打印 15。我们在这里确实经历了很多困难，我想在这里说明几点。首先，函数定义可以存储在变量中，函数定义在程序调用之前是不可见的。其次，每次调用函数时，都会(临时)创建一个本地执行上下文。当函数完成时，执行上下文将消失。函数在遇到 return 或右括号}时执行完成。</p></blockquote><h5 id="高阶函数是什么"><a href="#高阶函数是什么" class="headerlink" title="高阶函数是什么?"></a><code>高阶函数是什么?</code></h5><blockquote><p>所谓高阶函数，就是一个函数就可以接收另一个函数作为参数，或者是返回一个函数–&gt;常见的高阶函数有map、reduce、filter、sort等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var ADD =function add(a) &#123;</span><br><span class="line">return function(b) &#123;</span><br><span class="line">return a+b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">调用：ADD(2)(3)即可获得结果</span><br></pre></td></tr></table></figure><ol><li>map</li></ol><ul><li>```<br>//<br>map接受一个函数作为参数，不改变原来的数组，只是返回一个全新的数组<br>var arr = [1,2,3,4,5]<br>var arr1 = arr.map(item =&gt; item = 2)<br>//arr  输出[1,2,3,4,5]<br>//arr1 输出[2,2,2,2,2]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. reduce</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  //</span><br><span class="line">  reduce也是返回一个全新的数组。reduce接受一个函数作为参数，这个函数要有两个形参，代表数组中的前两项，reduce会将这个函数的结果与数组中的第三项再次组成这个函数的两个形参以此类推进行累积操作</span><br><span class="line">  var arr = [1,2,3,4,5]</span><br><span class="line">  var arr2 = arr.reduce((a,b)=&gt; a+b)</span><br><span class="line">  console.log(arr2) // 15</span><br></pre></td></tr></table></figure></li></ul><ol><li>filter</li></ol><ul><li>```<br>//<br>filter返回过滤后的数组。filter也接收一个函数作为参数，这个函数将作用于数组中的每个元素，根据该函数每次执行后返回的布尔值来保留结果，如果是true就保留，如果是false就过滤掉（这点与map要区分）<br>var arr = [1,2,3,4,5]<br> var arr3 = arr.filter(item =&gt; item % 2 == 0)<br>console.log(arr3)// [2,4]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 5、闭包</span><br><span class="line"></span><br><span class="line">一个函数和对其周围状态（**lexical environment，词法环境**）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是**闭包**（**closure**）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</span><br><span class="line"></span><br><span class="line">本来闭包部分是看`尚硅谷`的教学视频,当时那位老师在此部分讲解的让我觉得并没特别清晰(在刚开始时没讲到重点,导致难以理解,但是在后面有提到就懂了),所以我自己看完后再去翻阅许多关于闭包的资料进行自学,随后将其梳理整合并加以自己感悟记录于此</span><br><span class="line"></span><br><span class="line">### Ⅰ-引出闭包概念</span><br><span class="line"></span><br><span class="line">#### ① 错误场景</span><br><span class="line"></span><br><span class="line">需求: `点击某个按钮, 提示&quot;点击的是第n个按钮&quot;`</span><br><span class="line"></span><br></pre></td></tr></table></figure><button>测试1</button><br><button>测试2</button><br><button>测试3</button><!--需求: 点击某个按钮, 提示"点击的是第n个按钮"</li><li>-&gt;<script type="text/javascript">var btns = document.getElementsByTagName('button')//注意[btns]不是一个数组,它是一个伪数组//每次获取[btns.length]其实都是需要进行计算的(因为它是伪数组)//所以为了性能更好,在此处赋值,就只需要计算一次for (var i = 0,length=btns.length; i < length; i++) {  var btn = btns[i]  btn.onclick = function () {  //遍历加监听    alert('第'+(i+1)+'个')     //结果 全是[4]  }}</script>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">此处错误是,直接修改并使用全局变量[`i`],导致for循环结束后,所有点击按钮绑定的弹窗值都是[`i+1`]</span><br><span class="line"></span><br><span class="line">随后调用时,都会找到[`i`]这个变量,但是此时i==3,所以所有结果都是4</span><br><span class="line"></span><br><span class="line">![image-20210727143351376](https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210727143351376.png)</span><br><span class="line"></span><br><span class="line">#### ② 将变量挂载到自身来解决</span><br><span class="line"></span><br><span class="line">解决方式:将btn所对应的下标保存在btn上</span><br><span class="line"></span><br></pre></td></tr></table></figure><button>测试1</button><br><button>测试2</button><br><button>测试3</button><!--需求: 点击某个按钮, 提示"点击的是第n个按钮"</li><li>-&gt;<script type="text/javascript">var btns = document.getElementsByTagName('button')for (var i = 0,length=btns.length; i < length; i++) {  var btn = btns[i]  //将btn所对应的下标保存在btn上  btn.index = i  btn.onclick = function () {  //遍历加监听    alert('第'+(i+1)+'个')     //结果 全是[4]  }}</script>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">将其放在自己的身上,需要时自己找自己拿,这样就能解决</span><br><span class="line"></span><br><span class="line">![image-20210727143824641](https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210727143824641.png)</span><br><span class="line"></span><br><span class="line">#### ③ 利用闭包</span><br><span class="line"></span><br><span class="line">利用闭包知识点解决,引出下方知识点,不懂的可以带着疑问继续往下看</span><br><span class="line"></span><br></pre></td></tr></table></figure><body><button>测试1</button><button>测试2</button><button>测试3</button></li></ul><script type="text/javascript"> //利用闭包 for (var i = 0,length=btns.length; i < length; i++) {    //此处的j是局部的,它将传入的[i]存入局部的[j]中,这样就能实现效果    (function (j) {     var btn = btns[j]     btn.onclick = function () {       alert('第'+(j+1)+'个')     }   })(i) }</script>  </body><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20210727143824641](https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210727143824641.png)</span><br><span class="line"></span><br><span class="line">### Ⅱ-举个闭包栗子分析理解</span><br><span class="line"></span><br><span class="line">按照上方 [`4`]代码举例分析流程的方式 来尝试理解`闭包`概念</span><br><span class="line"></span><br><span class="line">提前给出一个闭包栗子进行分析,先看看发生什么,再去看它的概念进行印证,相信我,你会有种拨开迷雾的感受</span><br><span class="line"></span><br><span class="line">#### ① 按照正常逻辑理解</span><br><span class="line"></span><br><span class="line">先说,此部分不是按照闭包机制进行理解,所以中途发觉不对(`肯定有地方不对劲`)请勿钻牛角尖,主要用作后方对照</span><br><span class="line"></span><br></pre></td></tr></table></figure>1: function createCounter() {2:   let counter = 03:   const myFunction = function() {4:     counter = counter + 15:     return counter6:   }7:   return myFunction8: }9: const increment = createCounter()10: const c1 = increment()11: const c2 = increment()12: const c3 = increment()13: console.log('example increment', c1, c2, c3)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">现在，我们已经从前几个示例中掌握了它的诀窍，让我们按照预期的方式快速执行它： (`错误的流程理解,故意按照正常的逻辑流程走,做印证`)</span><br><span class="line"></span><br><span class="line">1. 行 1 - 8。我们在全局执行上下文中创建了一个新的变量`createCounter`，并赋值了一个的函数定义。</span><br><span class="line">2. 第 9 行。</span><br><span class="line"></span><br><span class="line">- 我们在全局执行上下文中声明了一个名为`increment`的新变量。</span><br><span class="line">- 我们需要调用`createCounter`函数并将其返回值赋给`increment`变量。</span><br><span class="line"></span><br><span class="line">1. 返回执行 行 1 - 8。调用函数，创建新的本地执行上下文。</span><br><span class="line"></span><br><span class="line">- 第 2 行。在本地执行上下文中，声明一个名为`counter`的新变量并赋值为 0;</span><br><span class="line">- 行 3 - 6。声明一个名为`myFunction`的新变量，变量在本地执行上下文中声明,变量的内容是为第 4 行和第 5 行所定义。</span><br><span class="line">- 第 7 行。返回`myFunction`变量的内容，删除本地执行上下文。变量`myFunction`和`counter`不再存在。此时控制权回到了调用上下文。</span><br><span class="line"></span><br><span class="line">1. 再次回到 第 9 行</span><br><span class="line"></span><br><span class="line">- 在调用上下文(全局执行上下文)中，`createCounter`返回的值赋给了`increment`，变量`increment`现在包含一个函数定义内容为`createCounter`返回的函数。</span><br><span class="line">- 它不再标记为`myFunction`，但它的定义是相同的。在全局上下文中，它是的标记为 `labeledincrement`。</span><br><span class="line"></span><br><span class="line">1. 第 10 行。声明一个新变量(c1)。</span><br><span class="line"></span><br><span class="line">- 继续第 10 行。查找`increment`变量，它是一个函数并调用它。它包含前面返回的函数定义，如第 4-5 行所定义的。</span><br><span class="line">- 创建一个新的执行上下文。没有参数。开始执行函数。</span><br><span class="line"></span><br><span class="line">1. 回到 第 4 行。</span><br><span class="line"></span><br><span class="line">- counter=counter + 1。在本地执行上下文中查找`counter`变量。</span><br><span class="line">- 我们只是创建了那个上下文，从来没有声明任何局部变量。让我们看看全局执行上下文。这里也没有`counter`变量。</span><br><span class="line">- Javascript 会将其计算为 counter = undefined + 1，声明一个标记为`counter`的新局部变量，并将其赋值为 number 1，`因为 undefined 被当作值为 0。` --&gt;此处是错误的哦,别钻牛角尖,正确的理解在下方,此处是做错误对比</span><br><span class="line"></span><br><span class="line">1. 第 5 行。我们变量`counter`的值(1)，我们销毁本地执行上下文和`counter`变量。</span><br><span class="line">2. 回到第 10 行。返回值(1)被赋给 c1。</span><br><span class="line">3. 第 11 行。重复步骤 10-14，c2 也被赋值为 1。</span><br><span class="line">4. 第 12 行。重复步骤 10-14，c3 也被赋值为 1。</span><br><span class="line">5. 第 13 行。我们打印变量 c1 c2 和 c3 的内容。</span><br><span class="line"></span><br><span class="line">你自己试试，看看会发生什么。你会将注意到，`它并不像从我上面的解释中所期望的那样记录 1,1,1。而是记录 1,2,3`。这个是为什么?</span><br><span class="line"></span><br><span class="line">#### ②正确的理解</span><br><span class="line"></span><br><span class="line">不知怎么滴，`increment`函数记住了那个`cunter`的值。这是怎么回事?</span><br><span class="line"></span><br><span class="line">&gt; 1. counter是全局执行上下文的一部分吗?</span><br><span class="line">&gt;</span><br><span class="line">&gt; - 尝试 console.log(counter)，得到undefined的结果,显然不是这样的。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 1. 也许，当你调用increment时，它会以某种方式返回它创建的函数(createCounter)?</span><br><span class="line">&gt;</span><br><span class="line">&gt; - 这怎么可能呢?变量increment包含函数定义，而不是函数的来源，显然也不是这样的。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 1. 所以一定有另一种机制。**闭包**，我们终于找到了，丢失的那块。</span><br><span class="line">&gt;</span><br><span class="line">&gt; - **-`它是这样工作的，无论何时声明新函数并将其赋值给变量，都要存储函数定义和闭包。闭包包含在函数创建时作用域中的所有变量，它类似于背包。函数定义附带一个小背包，它的包中存储了函数定义创建时作用域中的所有变` **</span><br><span class="line"></span><br><span class="line">**所以我们上面的解释都是错的，让我们再试一次，但是这次是正确的**</span><br><span class="line"></span><br></pre></td></tr></table></figure>1: function createCounter() {2:   let counter = 03:   const myFunction = function() {4:     counter = counter + 15:     return counter6:   }7:   return myFunction8: }9: const increment = createCounter()10: const c1 = increment()11: const c2 = increment()12: const c3 = increment()13: console.log('example increment', c1, c2, c3)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 同上，第`1-8`行。我们在全局执行上下文中创建了一个新的变量`createCounter`，它得到了指定的函数定义。</span><br><span class="line">2. 同上，第`9`行。</span><br><span class="line"></span><br><span class="line">- 我们在全局执行上下文中声明了一个名为`increment`的新变量。</span><br><span class="line">- 我们需要调用`createCounter`函数并将其返回值赋给`increment`变量。</span><br><span class="line"></span><br><span class="line">1. 同上，第`1-8`行。调用函数，创建新的本地执行上下文。</span><br><span class="line"></span><br><span class="line">- 第`2`行。在本地执行上下文中，声明一个名为`counter`的新变量并赋值为 `0` 。</span><br><span class="line">- 第`3-6`行。声明一个名为`myFunction`的新变量，变量在本地执行上下文中声明,变量的内容是另一个函数定义。如第`4`行和第`5`行所定义，现在我们还创建了一个闭包，并将其作为函数定义的一部分。闭包包含作用域中的变量，在本例中是变量`counter`(值为`0`)。</span><br><span class="line">- 第`7`行。返回`myFunction`变量的内容,删除本地执行上下文。`myFunction`和`counter`不再存在。控制权交给了调用上下文，我们返回函数定义和它的闭包，闭包中包含了创建它时在作用域内的变量。</span><br><span class="line"></span><br><span class="line">1. 回到第`9`行。</span><br><span class="line"></span><br><span class="line">- 在调用上下文(全局执行上下文)中，`createCounter`返回的值被指定为`increment`</span><br><span class="line">- 变量`increment`现在包含一个函数定义(和闭包),由createCounter返回的函数定义,它不再标记为`myFunction`，但它的定义是相同的,在全局上下文中，称为`increment`。</span><br><span class="line"></span><br><span class="line">1. 第`10`行。声明一个新变量`c1`。</span><br><span class="line"></span><br><span class="line">- 继续第`10`行。查找变量`increment`，它是一个函数，调用它。它包含前面返回的函数定义,如第`4-5`行所定义的。(`它还有一个带有变量的闭包`)。</span><br><span class="line">- 创建一个新的执行上下文，没有参数，开始执行函数。</span><br><span class="line"></span><br><span class="line">1. 第`4`行。[`counter = counter + 1`]，寻找变量 [`counter`]，`在查找本地或全局执行上下文之前，让我们检查一下闭包`，瞧，闭包包含一个名为[`counter`]的变量，其值为`0`。在第`4`行表达式之后，它的值被设置为`1`。它再次被储存在闭包里，闭包现在包含值为`1`的变量 [`counter`]。</span><br><span class="line">2. 第`5`行。我们返回`counter的值`，销毁本地执行上下文。</span><br><span class="line">3. 回到第`10`行。返回值`1`被赋给变量`c1`。</span><br><span class="line">4. 第`11`行。我们重复步骤`10-14`。这一次，在闭包中此时变量`counter`的值是1。它在第`12`行设置的，它的值被递增并以`2`的形式存储在递增函数的闭包中,`c2`被赋值为`2`。</span><br><span class="line">5. 第`12`行。重复步骤`10-14`行,`c3`被赋值为3。</span><br><span class="line">6. 第13行。我们打印变量`c1 c2`和`c3`的值。</span><br><span class="line"></span><br><span class="line">** `你此时可能会问，是否有任何函数具有闭包，甚至是在全局范围内创建的函数?` **</span><br><span class="line"></span><br><span class="line">&gt; 答案是肯定的。在全局作用域中创建的函数创建闭包，但是由于这些函数是在全局作用域中创建的，所以它们可以访问全局作用域中的所有变量，闭包的概念并不重要。</span><br><span class="line"></span><br><span class="line">&gt; 但当函数返回函数时，闭包的概念就变得更加重要了。返回的函数可以访问不属于全局作用域的变量，但它们仅存在于其闭包中。</span><br><span class="line"></span><br><span class="line">### Ⅲ-常见的闭包</span><br><span class="line"></span><br><span class="line">#### ① 将函数作为另一个函数的返回值</span><br><span class="line"></span><br></pre></td></tr></table></figure>// 1. 将函数作为另一个函数的返回值 function fn1() {   var a = 2   function fn2() {     a++     console.log(a)   }   return fn2 } var f = fn1() f() // 3 f() // 4<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### ② 将函数作为实参传递给另一个函数调用</span><br><span class="line"></span><br></pre></td></tr></table></figure>// 2. 将函数作为实参传递给另一个函数调用 function showDelay(msg, time) {   setTimeout(function () {     alert(msg)   }, time) } showDelay('atguigu', 2000)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### ③ 高阶函数与柯里化</span><br><span class="line"></span><br><span class="line">有时候闭包在你甚至没有注意到它的时候就会出现，你可能已经看到了我们称为部分应用程序的示例</span><br><span class="line"></span><br><span class="line">当然如果你还不理解的话可以,可以完整的多看几次本笔记闭包知识点部分,或者结合上方[ `Ⅱ-举个闭包栗子分析理解` ](https://gitee.com/hongjilin/hongs-study-notes/blob/master/编程_前端开发学习笔记/HTML+CSS+JS基础笔记/JavaScript笔记/A_JavaScript进阶学习笔记.md#Ⅱ-举个闭包栗子分析理解)进行理解</span><br><span class="line"></span><br><span class="line">##### 1、从 ES6 高阶箭头函数理解函数柯里化(`运用到闭包`)</span><br><span class="line"></span><br><span class="line">1. 首先看到了这样的一个例子：</span><br><span class="line"></span><br></pre></td></tr></table></figure>let add = a => b => a + b<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 以上是一个很简单的相加函数，把它转化成 ES5 的写法如下</span><br><span class="line"></span><br></pre></td></tr></table></figure>function add(a) {    return function(b) {        return a + b    }}var add3 = add(3) //add3表示一个指向函数的变量 可以当成函数调用名来用add3(4) === 3 + 4 //true<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 再简化一下，可以写成如下形式：</span><br><span class="line"></span><br></pre></td></tr></table></figure>let add = function(a) {  var param = a;  var innerFun = function(b) {      return param + b;  }  return innerFun;}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 虽然好像没什么意义，但是很显然上述使用了[`闭包`]，而且该函数的返回值是一个函数。其实，这就是`高阶函数的定义：以函数为参数或者返回值是函数的函数。`</span><br><span class="line"></span><br><span class="line">![image-20210415160945789](https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210415160945789.png)</span><br><span class="line"></span><br><span class="line">##### 2、柯里化</span><br><span class="line"></span><br><span class="line">1. 图例:</span><br><span class="line"></span><br><span class="line">![image-20210415161137977](https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210415161137977.png)</span><br><span class="line"></span><br><span class="line">1. 关键就是`理解柯里化`，其实可以把它理解成，柯里化后，`将第一个参数变量存在函数里面了(闭包)`，然后本来需要n个参数的函数可以变成只需要剩下的（n - 1个）参数就可以调用，比如</span><br><span class="line"></span><br></pre></td></tr></table></figure>let add = x => y => x + ylet add2 = add(2)-*----------------------------------本来完成 add 这个操作，应该是这样调用let add = (x, y) => x + yadd(2,3)----------------------------------1. 而现在 add2 函数完成同样操作只需要一个参数，这在函数式编程中广泛应用。let add = x => y => x + ylet add2 = add(2)2.详细解释一下，就是 add2 函数 等价于 有了 x 这个闭包变量的 y => x + y 函数,并且此时 x = 2，所以此时调用add2(3) === 2 + 3<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 4、总结</span><br><span class="line"></span><br><span class="line">1. 如果是`a =&gt; b =&gt; c =&gt; &#123;xxx&#125;`这种多次柯里化的,如何理解?</span><br><span class="line"></span><br><span class="line">理解:前`n - 1`次调用，其实是提前将参数传递进去，并没有调用最内层函数体，最后一次调用才会调用最内层函数体，并返回最内层函数体的返回值</span><br><span class="line"></span><br><span class="line">1. 结合上文可知，这里的多个连续箭头（无论俩个箭头函数三个及以上）函数连在一起 就是在柯里化。所以连续箭头函数就是多次柯里化函数的 es6 写法。</span><br><span class="line">2. `调用特点`:let test = a =&gt; b =&gt; c =&gt; &#123;xxx&#125;</span><br><span class="line"></span><br><span class="line">比如对于上面的 `test` 函数，它有 3 个箭头， 这个函数要被调用 3 次 `test(a)(b)(c)`，前两次调用只是在传递参数，只有最后依次调用才会返回 `&#123;xxx&#125;` 代码段的返回值，并且在 `&#123;xxx&#125;` 代码段中可以调用 a,b,c</span><br><span class="line"></span><br><span class="line">### Ⅳ-闭包的作用</span><br><span class="line"></span><br><span class="line">1. 使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)</span><br><span class="line">2. 让函数外部可以操作(读写)到函数内部的数据(变量/函数)</span><br><span class="line"></span><br><span class="line">问题:</span><br><span class="line"></span><br><span class="line">1. 函数执行完后, 函数内部声明的局部变量是否还存在?</span><br><span class="line">   - 一般是不存在, 存在于闭中的变量才可能存在</span><br><span class="line">2. 在函数外部能直接访问函数内部的局部变量吗?</span><br><span class="line">   - 不能, 但我们可以通过闭包让外部操作它</span><br><span class="line"></span><br><span class="line">### Ⅴ-闭包的生命周期</span><br><span class="line"></span><br><span class="line">1. 产生: 在嵌套内部函数定义执行完时就产生了(不是在调用)</span><br><span class="line">2. 死亡: 在嵌套的内部函数成为垃圾对象时</span><br><span class="line"></span><br><span class="line">- 即没有人指向它时死亡,通常置为[`null`],当然指向其他也行,但不安全(容易污染变量)</span><br><span class="line"></span><br></pre></td></tr></table></figure>//闭包的生命周期function fn1() {   //此时闭包就已经产生了(函数提升,实际上[fn2]提升到了第一行, 内部函数对象已经创建了)   var a = 2   function fn2 () { //如果时[let fn2=function(){}],那么在这行才会产生闭包     a++     console.log(a)   }   return fn2 } var f = fn1() f() // 3 f() // 4 f = null //闭包死亡(包含闭包的函数对象成为垃圾对象)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Ⅵ-闭包的应用</span><br><span class="line"></span><br><span class="line">闭包的应用 : 定义JS模块</span><br><span class="line"></span><br><span class="line">- 具有特定功能的js文件</span><br><span class="line">- 将所有的数据和功能都封装在一个函数内部(私有的)</span><br><span class="line">- 只向外暴露一个包信n个方法的对象或函数</span><br><span class="line">- 模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</span><br><span class="line"></span><br><span class="line">1. 模块定义:</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  //myModule.js</span><br><span class="line">  function myModule() &#123;</span><br><span class="line">    //私有数据</span><br><span class="line">    var msg = &#x27;My atguigu&#x27;</span><br><span class="line">    //操作数据的函数</span><br><span class="line">    function doSomething() &#123;</span><br><span class="line">      console.log(&#x27;doSomething() &#x27;+msg.toUpperCase())</span><br><span class="line">    &#125;</span><br><span class="line">    function doOtherthing () &#123;</span><br><span class="line">      console.log(&#x27;doOtherthing() &#x27;+msg.toLowerCase())</span><br><span class="line">    &#125;</span><br><span class="line">                                    </span><br><span class="line">    //向外暴露对象(给外部使用的方法)</span><br><span class="line">    return &#123;</span><br><span class="line">      doSomething: doSomething,</span><br><span class="line">      doOtherthing: doOtherthing</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">                                    </span><br><span class="line">  -----------------------------------------------------------------</span><br><span class="line">  // myModule2.js   </span><br><span class="line">  (function () &#123;</span><br><span class="line">    //私有数据</span><br><span class="line">    var msg = &#x27;My atguigu&#x27;</span><br><span class="line">    //操作数据的函数</span><br><span class="line">    function doSomething() &#123;</span><br><span class="line">      console.log(&#x27;doSomething() &#x27;+msg.toUpperCase())</span><br><span class="line">    &#125;</span><br><span class="line">    function doOtherthing () &#123;</span><br><span class="line">      console.log(&#x27;doOtherthing() &#x27;+msg.toLowerCase())</span><br><span class="line">    &#125;</span><br><span class="line">                                    </span><br><span class="line">    //向外暴露对象(给外部使用的方法)</span><br><span class="line">    window.myModule2 = &#123;</span><br><span class="line">      doSomething: doSomething,</span><br><span class="line">      doOtherthing: doOtherthing</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()    </span><br><span class="line">                                        </span><br></pre></td></tr></table></figure><ol><li>模块调用</li></ol><ul><li>```<br>//调用示例<br>————  模块调用1 ——————————————–<script type="text/javascript" src="myModule.js"></script><script type="text/javascript">  var module = myModule()  module.doSomething()  module.doOtherthing()</script>————  模块调用2 ——————————————–<script type="text/javascript" src="myModule2.js"></script><script type="text/javascript">  myModule2.doSomething()  myModule2.doOtherthing()</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Ⅶ-闭包的缺点及解决</span><br><span class="line"></span><br><span class="line">1. 缺点:</span><br><span class="line"></span><br><span class="line">- 函数执行完后, 函数内的局部变量没有释放, 占用内存时间会变长</span><br><span class="line">- 容易造成内存泄露</span><br><span class="line"></span><br><span class="line">1. 解决:</span><br><span class="line"></span><br><span class="line">- 能不用闭包就不用</span><br><span class="line"></span><br><span class="line">- 及时释放</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  function fn1() &#123;</span><br><span class="line">    var arr = new Array(100000)</span><br><span class="line">    function fn2() &#123;</span><br><span class="line">      console.log(arr.length)</span><br><span class="line">    &#125;</span><br><span class="line">    return fn2</span><br><span class="line">  &#125;</span><br><span class="line">  var f = fn1()</span><br><span class="line">  f()</span><br><span class="line">  f = null //让内部函数成为垃圾对象--&gt;回收闭包</span><br></pre></td></tr></table></figure></li></ul><p>我还有一个解决方式,调用时直接<code>f()()</code>直接运行调用即可–&gt;匿名函数,用完自动就销毁了</p><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210727191229838.png" alt="image-20210727191229838"></p></blockquote><h3 id="Ⅷ-内存溢出与内存泄露"><a href="#Ⅷ-内存溢出与内存泄露" class="headerlink" title="Ⅷ-内存溢出与内存泄露"></a>Ⅷ-内存溢出与内存泄露</h3><blockquote><ol><li>内存溢出</li></ol><ul><li>一种程序运行出现的错误</li><li>当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误</li></ul><ol><li>内存泄露</li></ol><ul><li>占用的内存没有及时释放</li><li><code>内存泄露积累多了就容易导致内存溢出</code></li><li>常见的内存泄露:<ul><li>意外的全局变量</li><li>没有及时清理的计时器或回调函数</li><li>闭包</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> // 1. 内存溢出</span><br><span class="line"> var obj = &#123;&#125;</span><br><span class="line"> for (var i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">   obj[i] = new Array(10000000)</span><br><span class="line">   console.log(&#x27;-----&#x27;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 2. 内存泄露</span><br><span class="line">   // 意外的全局变量</span><br><span class="line"> function fn() &#123;</span><br><span class="line">   a = new Array(10000000)  //不使用var let const去承接</span><br><span class="line">   console.log(a)</span><br><span class="line"> &#125;</span><br><span class="line"> fn()</span><br><span class="line"></span><br><span class="line">  // 没有及时清理的计时器或回调函数</span><br><span class="line"> var intervalId = setInterval(function () &#123; //启动循环定时器后不清理</span><br><span class="line">   console.log(&#x27;----&#x27;)</span><br><span class="line"> &#125;, 1000)</span><br><span class="line"></span><br><span class="line"> // clearInterval(intervalId)</span><br><span class="line"></span><br><span class="line">   // 闭包</span><br><span class="line"> function fn1() &#123;</span><br><span class="line">   var a = 4</span><br><span class="line">   function fn2() &#123;</span><br><span class="line">     console.log(++a)</span><br><span class="line">   &#125;</span><br><span class="line">   return fn2</span><br><span class="line"> &#125;</span><br><span class="line"> var f = fn1()</span><br><span class="line"> f()</span><br><span class="line"> // f = null</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>不使用let const var等去声明,实际上是挂载到[<code>window</code>]上的,所以导致内存泄露<img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210727193110329.png" alt="image-20210727193110329"></p></blockquote><h3 id="Ⅸ-相关面试题1"><a href="#Ⅸ-相关面试题1" class="headerlink" title="Ⅸ-相关面试题1"></a>Ⅸ-相关面试题1</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//代码片段一  --&gt;没有产生闭包:因为内部函数没有调用外部变量</span><br><span class="line">var name = &quot;The Window&quot;;</span><br><span class="line">var object = &#123;</span><br><span class="line"> name : &quot;My Object&quot;,</span><br><span class="line"> getNameFunc : function()&#123;</span><br><span class="line">   return function()&#123;</span><br><span class="line">     return this.name;</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(object.getNameFunc()());  //?  the window</span><br><span class="line">//函数体的this是window</span><br><span class="line"></span><br><span class="line">//代码片段二</span><br><span class="line">var name2 = &quot;The Window&quot;;</span><br><span class="line">var object2 = &#123;</span><br><span class="line"> name2 : &quot;My Object&quot;,</span><br><span class="line"> getNameFunc : function()&#123;</span><br><span class="line"> //此处的this指向是[getNameFunc],他是对象中的属性,所以this指向就是object</span><br><span class="line">   var that = this;</span><br><span class="line">   return function()&#123;</span><br><span class="line">     //此处用的是保存的  that</span><br><span class="line">     return that.name2;</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(object2.getNameFunc()()); //?  my object</span><br></pre></td></tr></table></figure><ol><li>代码片段一:</li></ol><ul><li>函数体的<code>this</code>指向是[<code>window</code>]</li><li>没有产生闭包:因为内部函数没有调用外部变量</li></ul><ol><li>代码片段二为何指向是对象?</li></ol><ul><li>this指向是调用它的[<code>getNameFunc</code>],他是对象中的属性,所以this指向就是object</li><li>产生了闭包</li></ul></blockquote><h3 id="Ⅹ-相关面试题2"><a href="#Ⅹ-相关面试题2" class="headerlink" title="Ⅹ-相关面试题2"></a>Ⅹ-相关面试题2</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function fun(n,o) &#123;</span><br><span class="line"> console.log(o)</span><br><span class="line"> return &#123;</span><br><span class="line">   fun:function(m)&#123;</span><br><span class="line">     return fun(m,n)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = fun(0) //undefined</span><br><span class="line">a.fun(1)  //0</span><br><span class="line">a.fun(2)  //0</span><br><span class="line">a.fun(3)  //0</span><br><span class="line"></span><br><span class="line">var b = fun(0).fun(1).fun(2).fun(3) //undefined 0 1 2</span><br><span class="line"></span><br><span class="line">var c = fun(0).fun(1) //undefined  0</span><br><span class="line">c.fun(2)//1 --&gt;经过上方定义后 n固定为1</span><br><span class="line">c.fun(3)//1 --&gt;此处是陷阱!!!  一直没有改到n,所以一直是1</span><br></pre></td></tr></table></figure></blockquote><h1 id="三、面向对象高级"><a href="#三、面向对象高级" class="headerlink" title="三、面向对象高级"></a>三、面向对象高级</h1><blockquote><p>此部分要求你对前方<a href="https://gitee.com/hongjilin/hongs-study-notes/blob/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md#1%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE">函数高级部分的1、原型与原型链</a>比较熟悉,如果掌握不够好理解会相对困难</p></blockquote><h2 id="1、对象创建模式"><a href="#1、对象创建模式" class="headerlink" title="1、对象创建模式"></a>1、对象创建模式</h2><h3 id="Ⅰ-Object构造函数模式"><a href="#Ⅰ-Object构造函数模式" class="headerlink" title="Ⅰ-Object构造函数模式"></a>Ⅰ-Object构造函数模式</h3><blockquote><p>方式一: Object构造函数模式</p><ul><li>套路: 先创建空Object对象, 再动态添加属性/方法</li><li>适用场景: 起始时不确定对象内部数据</li><li>问题: 语句太多</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*一个人: name:&quot;Tom&quot;, age: 12*/</span><br><span class="line">// 先创建空Object对象</span><br><span class="line"> var p = new Object()</span><br><span class="line"> p = &#123;&#125; //此时内部数据是不确定的</span><br><span class="line"> // 再动态添加属性/方法</span><br><span class="line"> p.name = &#x27;Tom&#x27;</span><br><span class="line"> p.age = 12</span><br><span class="line"> p.setName = function (name) &#123;</span><br><span class="line">   this.name = name</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //测试</span><br><span class="line"> console.log(p.name, p.age)</span><br><span class="line"> p.setName(&#x27;Bob&#x27;)</span><br><span class="line"> console.log(p.name, p.age)</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅱ-对象字面量模式"><a href="#Ⅱ-对象字面量模式" class="headerlink" title="Ⅱ-对象字面量模式"></a>Ⅱ-对象字面量模式</h3><blockquote><p>方式二: 对象字面量模式</p><ul><li>套路: 使用{}创建对象, 同时指定属性/方法</li><li>适用场景: 起始时对象内部数据是确定的</li><li>问题: 如果创建多个对象, 有重复代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//对象字面量模式</span><br><span class="line">var p = &#123;</span><br><span class="line">   name: &#x27;Tom&#x27;,</span><br><span class="line">   age: 12,</span><br><span class="line">   setName: function (name) &#123;</span><br><span class="line">     this.name = name</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> //测试</span><br><span class="line"> console.log(p.name, p.age)</span><br><span class="line"> p.setName(&#x27;JACK&#x27;)</span><br><span class="line"> console.log(p.name, p.age)</span><br><span class="line"></span><br><span class="line"> var p2 = &#123;  //如果创建多个对象代码很重复</span><br><span class="line">   name: &#x27;Bob&#x27;,</span><br><span class="line">   age: 13,</span><br><span class="line">   setName: function (name) &#123;</span><br><span class="line">     this.name = name</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-工厂模式"><a href="#Ⅲ-工厂模式" class="headerlink" title="Ⅲ-工厂模式"></a>Ⅲ-工厂模式</h3><blockquote><p>方式三: 工厂模式</p><ul><li>套路: 通过工厂函数动态创建对象并返回</li><li>适用场景: 需要创建多个对象</li><li>问题: <code>对象没有一个具体的类型</code>, 都是Object类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//返回一个对象的函数===&gt;工厂函数</span><br><span class="line">function createPerson(name, age) &#123; </span><br><span class="line"> var obj = &#123;</span><br><span class="line">   name: name,</span><br><span class="line">   age: age,</span><br><span class="line">   setName: function (name) &#123;</span><br><span class="line">     this.name = name</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建2个人</span><br><span class="line">var p1 = createPerson(&#x27;Tom&#x27;, 12)</span><br><span class="line">var p2 = createPerson(&#x27;Bob&#x27;, 13)</span><br><span class="line"></span><br><span class="line">// p1/p2是Object类型</span><br><span class="line"></span><br><span class="line">function createStudent(name, price) &#123;</span><br><span class="line"> var obj = &#123;</span><br><span class="line">   name: name,</span><br><span class="line">   price: price</span><br><span class="line"> &#125;</span><br><span class="line"> return obj</span><br><span class="line">&#125;</span><br><span class="line">var s = createStudent(&#x27;张三&#x27;, 12000)</span><br><span class="line">// s也是Object</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅳ-自定义构造函数模式"><a href="#Ⅳ-自定义构造函数模式" class="headerlink" title="Ⅳ-自定义构造函数模式"></a>Ⅳ-自定义构造函数模式</h3><blockquote><p>方式四: 自定义构造函数模式</p><ul><li>套路: 自定义构造函数, 通过new创建对象</li><li>适用场景: 需要创建多个<code>类型确定</code>的对象,与上方工厂模式有所对比</li><li>问题: 每个对象都有相同的数据, 浪费内存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//定义类型</span><br><span class="line">function Person(name, age) &#123;</span><br><span class="line"> this.name = name</span><br><span class="line"> this.age = age</span><br><span class="line"> this.setName = function (name) &#123;</span><br><span class="line">   this.name = name</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&#x27;Tom&#x27;, 12)</span><br><span class="line">p1.setName(&#x27;Jack&#x27;)</span><br><span class="line">console.log(p1.name, p1.age)</span><br><span class="line">console.log(p1 instanceof Person)</span><br><span class="line"></span><br><span class="line">function Student (name, price) &#123;</span><br><span class="line"> this.name = name</span><br><span class="line"> this.price = price</span><br><span class="line">&#125;</span><br><span class="line">var s = new Student(&#x27;Bob&#x27;, 13000)</span><br><span class="line">console.log(s instanceof Student)</span><br><span class="line"></span><br><span class="line">var p2 = new Person(&#x27;JACK&#x27;, 23)</span><br><span class="line">console.log(p1, p2)</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅴ-构造函数-原型的组合模式"><a href="#Ⅴ-构造函数-原型的组合模式" class="headerlink" title="Ⅴ-构造函数+原型的组合模式"></a>Ⅴ-构造函数+原型的组合模式</h3><blockquote><p>方式六: 构造函数+原型的组合模式–&gt;<code>最好用这个写法</code></p><ul><li>套路: 自定义构造函数, 属性在函数中初始化, 方法添加到原型上</li><li>适用场景: 需要<code>创建多个类型确定</code>的对象</li><li>放在原型上可以节省空间(只需要加载一遍方法)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//在构造函数中只初始化一般函数</span><br><span class="line">function Person(name, age) &#123; </span><br><span class="line"> this.name = name</span><br><span class="line"> this.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setName = function (name) &#123;</span><br><span class="line"> this.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p1 = new Person(&#x27;Tom&#x27;, 23)</span><br><span class="line">var p2 = new Person(&#x27;Jack&#x27;, 24)</span><br><span class="line">console.log(p1, p2)</span><br></pre></td></tr></table></figure></blockquote><h2 id="2、继承模式"><a href="#2、继承模式" class="headerlink" title="2、继承模式"></a>2、继承模式</h2><h3 id="Ⅰ-原型链继承"><a href="#Ⅰ-原型链继承" class="headerlink" title="Ⅰ-原型链继承"></a>Ⅰ-原型链继承</h3><blockquote><p>方式1: 原型链继承</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> 1. 套路</span><br><span class="line">    - 定义父类型构造函数</span><br><span class="line">    - 给父类型的原型添加方法</span><br><span class="line">    - 定义子类型的构造函数</span><br><span class="line">    - 创建父类型的对象赋值给子类型的原型</span><br><span class="line">    - `将子类型原型的构造属性设置为子类型`--&gt;此处有疑惑的可以看本笔记[函数高级部分的1、原型与原型链](#1、原型与原型链)</span><br><span class="line">    - 给子类型原型添加方法</span><br><span class="line">    - 创建子类型的对象: 可以调用父类型的方法</span><br><span class="line"> 2. 关键</span><br><span class="line">    - `子类型的原型为父类型的一个实例对象`</span><br><span class="line">//父类型</span><br><span class="line">function Supper() &#123;</span><br><span class="line">this.supProp = &#x27;父亲的原型链&#x27;</span><br><span class="line">&#125;</span><br><span class="line">//给父类型的原型上增加一个[showSupperProp]方法,打印自身subProp</span><br><span class="line">Supper.prototype.showSupperProp = function () &#123;</span><br><span class="line">console.log(this.supProp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子类型</span><br><span class="line">function Sub() &#123;</span><br><span class="line">this.subProp = &#x27;儿子的原型链&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子类型的原型为父类型的一个实例对象</span><br><span class="line">Sub.prototype = new Supper()</span><br><span class="line">// 让子类型的原型的constructor指向子类型</span><br><span class="line">// 如果不加,其构造函数找的[`new Supper()`]时从顶层Object继承来的构造函数,指向[`Supper()`]</span><br><span class="line">Sub.prototype.constructor = Sub</span><br><span class="line">//给子类型的原型上增加一个[showSubProp]方法,打印自身subProp</span><br><span class="line">Sub.prototype.showSubProp = function () &#123;</span><br><span class="line">console.log(this.subProp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var sub = new Sub()</span><br><span class="line"></span><br><span class="line">sub.showSupperProp() //父亲的原型链</span><br><span class="line">sub.showSubProp() //儿子的原型链</span><br><span class="line">console.log(sub)  </span><br><span class="line">/**</span><br><span class="line">Sub &#123;subProp: &quot;儿子的原型链&quot;&#125;</span><br><span class="line">subProp: &quot;儿子的原型链&quot;</span><br><span class="line">__proto__: Supper</span><br><span class="line">constructor: ƒ Sub()</span><br><span class="line">showSubProp: ƒ ()</span><br><span class="line">supProp: &quot;父亲的原型链&quot;</span><br><span class="line">__proto__: Object</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></blockquote><h4 id="①-示例图"><a href="#①-示例图" class="headerlink" title="① 示例图"></a>① 示例图</h4><blockquote><p><code>注意</code>:此图中没有体现[<code>constructor构造函数 </code>],会在下方构造函数补充处指出</p><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210728101320606.png" alt="image-20210728101320606"></p></blockquote><h4 id="②-构造函数补充"><a href="#②-构造函数补充" class="headerlink" title="② 构造函数补充"></a>② 构造函数补充</h4><blockquote><p>对于代码中[<code>Sub.prototype.constructor = Sub</code>]是否有疑惑?</p><p>如果不加,其构造函数找的[<code>new Supper()</code>]是从顶层Object继承来的构造函数,指向[<code>Supper()</code>],虽然如果你不加这句话,大体上使用是不受影响的,但是你有一个属性指向是错误的,如果在大型项目中万一万一哪里再调用到了呢?</p><ol><li>这里可以补充一下constructor 的概念：</li></ol><ul><li><code>constructor 我们称为构造函数，因为它指回构造函数本身</code></li><li>其作用是让某个构造函数产生的 所有实例对象（比如f） 能够找到他的构造函数（比如Fun），用法就是f.constructor</li></ul><ol><li>此时实例对象里没有constructor 这个属性，于是沿着原型链往上找到Fun.prototype 里的constructor，并指向Fun 函数本身</li></ol><ul><li>constructor本就存在于原型中,指向构造函数,成为子对象后，如果该原型链中的constructor在自身没有而是在父原型中找到,所以指向父类的构造函数</li></ul><ol><li>由于这里的继承是直接改了构造函数的prototype 的指向，所以在 sub的原型链中，Sub.prototype 没有constructor 属性，反而是看到了一个super 实例</li><li>这就让sub 实例的constructor 无法使用了。为了他还能用，就在那个super 实例中手动加了一个constructor 属性，且指向Sub 函数看到了一个super 实例</li></ol></blockquote><h3 id="Ⅱ-借用构造函数继承-假的"><a href="#Ⅱ-借用构造函数继承-假的" class="headerlink" title="Ⅱ-借用构造函数继承(假的)"></a>Ⅱ-借用构造函数继承(假的)</h3><blockquote><p>方式2: 借用构造函数继承(假的)</p><ol><li>套路:<ul><li>定义父类型构造函数</li><li>定义子类型构造函数</li><li>在子类型构造函数中调用父类型构造</li></ul></li><li>关键:<ul><li><code>在子类型构造函数中通用call()调用父类型构造函数</code></li></ul></li><li>作用:</li></ol><ul><li>能借用父类中的构造方法,但是不灵活</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line"> this.name = name</span><br><span class="line"> this.age = age</span><br><span class="line">&#125;</span><br><span class="line">function Student(name, age, price) &#123;</span><br><span class="line">  //此处利用call(),将 [Student]的this传递给Person构造函数</span><br><span class="line"> Person.call(this, name, age)  // 相当于: this.Person(name, age)</span><br><span class="line"> /*this.name = name</span><br><span class="line"> this.age = age*/</span><br><span class="line"> this.price = price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var s = new Student(&#x27;Tom&#x27;, 20, 14000)</span><br><span class="line">console.log(s.name, s.age, s.price)</span><br></pre></td></tr></table></figure><p>[<code>Person</code>]中的this是动态变化的,在[<code>Student</code>]中利用[<code>Person.call(this, name, age)</code>]改变了其this指向,所以可以实现此效果</p></blockquote><h3 id="Ⅲ-组合继承"><a href="#Ⅲ-组合继承" class="headerlink" title="Ⅲ-组合继承"></a>Ⅲ-组合继承</h3><blockquote><p>方式3: 原型链+借用构造函数的组合继承</p><ol><li>利用原型链实现对父类型对象的方法继承</li><li>利用super()借用父类型构建函数初始化相同属性</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line"> this.name = name</span><br><span class="line"> this.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setName = function (name) &#123;</span><br><span class="line"> this.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Student(name, age, price) &#123;</span><br><span class="line"> Person.call(this, name, age)  // 为了得到属性</span><br><span class="line"> this.price = price</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = new Person() // 为了能看到父类型的方法</span><br><span class="line">Student.prototype.constructor = Student //修正constructor属性</span><br><span class="line">Student.prototype.setPrice = function (price) &#123;</span><br><span class="line"> this.price = price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var s = new Student(&#x27;Tom&#x27;, 24, 15000)</span><br><span class="line">s.setName(&#x27;Bob&#x27;)</span><br><span class="line">s.setPrice(16000)</span><br><span class="line">console.log(s.name, s.age, s.price)</span><br></pre></td></tr></table></figure></blockquote><h1 id="三、线程机制与事件机制"><a href="#三、线程机制与事件机制" class="headerlink" title="三、线程机制与事件机制"></a>三、线程机制与事件机制</h1><h2 id="1、进程与线程"><a href="#1、进程与线程" class="headerlink" title="1、进程与线程"></a>1、进程与线程</h2><blockquote><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210728115630974.png" alt="image-20210728115630974"></p></blockquote><h3 id="Ⅰ-进程"><a href="#Ⅰ-进程" class="headerlink" title="Ⅰ- 进程"></a>Ⅰ- 进程</h3><blockquote><ol><li>程序的一次执行,它<code>占有一片独有的内存空间</code></li><li>可以通过windows任务管理器查看进程</li></ol><ul><li>可以看出每个程序的内存空间是相互独立的</li><li><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210728115541255.png" alt="image-20210728115541255"></li></ul></blockquote><h3 id="Ⅱ-线程"><a href="#Ⅱ-线程" class="headerlink" title="Ⅱ-线程"></a>Ⅱ-线程</h3><blockquote><p>概念:</p><ul><li>是进程内的一个独立执行单元</li><li>是程序执行的一个完整流程</li><li>是CPU的最小的调度单元</li></ul></blockquote><h3 id="Ⅲ-进程与线程"><a href="#Ⅲ-进程与线程" class="headerlink" title="Ⅲ-进程与线程"></a>Ⅲ-进程与线程</h3><blockquote><ol><li>应用程序必须运行在某个进程的某个线程上</li><li>一个进程中至少有一个运行的线程:主线程 –&gt;进程启动后自动创建</li><li>一个进程中也可以同时运行多个线程:此时我们会说这个程序是多线程运行的</li><li>多个进程之间的数据是不能直接共享的 –&gt;内存相互独立(隔离)</li><li><code>线程池(thread pool)</code>:保存多个线程对象的容器,实现线程对象的反复利用</li></ol></blockquote><h3 id="Ⅳ-引出的问题"><a href="#Ⅳ-引出的问题" class="headerlink" title="Ⅳ-引出的问题"></a>Ⅳ-引出的问题</h3><h4 id="①-何为多进程与多线程"><a href="#①-何为多进程与多线程" class="headerlink" title="① 何为多进程与多线程?"></a>① 何为多进程与多线程?</h4><blockquote><p>多进程运行: 一应用程序可以同时启动多个实例运行</p><p>多线程: 在一个进程内, 同时有多个线程运行</p></blockquote><h4 id="②比较单线程与多线程"><a href="#②比较单线程与多线程" class="headerlink" title="②比较单线程与多线程?"></a>②比较单线程与多线程?</h4><blockquote><p>多线程:</p><ul><li>优点:能有效提升CPU的利用率</li><li>缺点</li><li>创建多线程开销</li><li>线程间切换开销</li><li>死锁与状态同步问题</li></ul><p>单线程:</p><ul><li>优点:顺序编程简单易懂</li><li>缺点:效率低</li></ul></blockquote><h4 id="③-JS是单线程还是多线程"><a href="#③-JS是单线程还是多线程" class="headerlink" title="③ JS是单线程还是多线程?"></a>③ JS是单线程还是多线程?</h4><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JS是单线程运行的 , 但使用H5中的 Web Workers可以多线程运行</span><br></pre></td></tr></table></figure><ul><li>只能由一个线程去操作DOM界面</li><li>具体原因可看下方<a href="https://gitee.com/hongjilin/hongs-study-notes/blob/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md#3%E3%80%81JS%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84">3、JS是单线程的</a>部分给出的详解</li></ul></blockquote><h4 id="④-浏览器运行是单线程还是多线程"><a href="#④-浏览器运行是单线程还是多线程" class="headerlink" title="④ 浏览器运行是单线程还是多线程?"></a>④ 浏览器运行是单线程还是多线程?</h4><blockquote><p>都是多线程运行的</p></blockquote><h4 id="⑤-浏览器运行是单进程还是多进程"><a href="#⑤-浏览器运行是单进程还是多进程" class="headerlink" title="⑤ 浏览器运行是单进程还是多进程?"></a>⑤ 浏览器运行是单进程还是多进程?</h4><blockquote><p>有的是单进程:</p><ul><li>firefox</li><li>老版IE</li></ul><p>有的是多进程:</p><ul><li>chrome</li><li>新版IE</li></ul><p>如何查看浏览器是否是多进程运行的呢? 任务管理器–&gt;进程</p></blockquote><h2 id="2、浏览器内核"><a href="#2、浏览器内核" class="headerlink" title="2、浏览器内核"></a>2、浏览器内核</h2><blockquote><p>支撑浏览器运行的最核心的程序</p></blockquote><h3 id="Ⅰ-不同浏览器的内核"><a href="#Ⅰ-不同浏览器的内核" class="headerlink" title="Ⅰ-不同浏览器的内核"></a>Ⅰ-不同浏览器的内核</h3><blockquote><ul><li>Chrome, Safari : webkit</li><li>firefox : Gecko</li><li>IE : Trident</li><li>360,搜狗等国内浏览器: Trident + webkit</li></ul></blockquote><h3 id="Ⅱ-内核由什么模块组成"><a href="#Ⅱ-内核由什么模块组成" class="headerlink" title="Ⅱ-内核由什么模块组成?"></a>Ⅱ-内核由什么模块组成?</h3><blockquote><p>主线程</p><ol><li>js引擎模块 : 负责js程序的编译与运行</li><li>html,css文档解析模块 : 负责页面文本的解析(拆解)</li><li>dom/css模块 : 负责dom/css在内存中的相关处理</li><li>布局和渲染模块 : 负责页面的布局和效果的绘制</li><li>布局和渲染模块 : 负责页面的布局和效果的绘制</li></ol><p>分线程</p><ul><li>定时器模块 : 负责定时器的管理</li><li>网络请求模块 : 负责服务器请求(常规/Ajax)</li><li>事件响应模块 : 负责事件的管理</li></ul><p>图例</p><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210728141032723.png" alt="image-20210728141032723"></p></blockquote><h2 id="3、定时器引发的思考"><a href="#3、定时器引发的思考" class="headerlink" title="3、定时器引发的思考"></a>3、定时器引发的思考</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;启动定时器&lt;/button&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> document.getElementById(&#x27;btn&#x27;).onclick = function () &#123;</span><br><span class="line">   var start = Date.now()</span><br><span class="line">   console.log(&#x27;启动定时器前...&#x27;)</span><br><span class="line">   setTimeout(function () &#123;</span><br><span class="line">     console.log(&#x27;定时器执行了&#x27;, Date.now()-start) //定时器并不能保证真正定时执行,一般会延迟一丁点</span><br><span class="line">   &#125;, 200)</span><br><span class="line">   console.log(&#x27;启动定时器后...&#x27;)</span><br><span class="line">   // 做一个长时间的工作</span><br><span class="line">   for (var i = 0; i &lt; 1000000000; i++) &#123; //会造成定时器延长很长时间</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅰ-定时器真是定时执行的吗"><a href="#Ⅰ-定时器真是定时执行的吗" class="headerlink" title="Ⅰ-定时器真是定时执行的吗?"></a>Ⅰ-定时器真是定时执行的吗?</h3><blockquote><ul><li>定时器并不能保证真正定时执行</li><li>一般会延迟一丁点(可以接受), 也有可能延迟很长时间(不能接受)</li></ul></blockquote><h3 id="Ⅱ-定时器回调函数是在分线程执行的吗"><a href="#Ⅱ-定时器回调函数是在分线程执行的吗" class="headerlink" title="Ⅱ-定时器回调函数是在分线程执行的吗?"></a>Ⅱ-定时器回调函数是在分线程执行的吗?</h3><blockquote><p>在主线程执行的, JS是单线程的</p></blockquote><h3 id="Ⅲ-定时器是如何实现的"><a href="#Ⅲ-定时器是如何实现的" class="headerlink" title="Ⅲ-定时器是如何实现的?"></a>Ⅲ-定时器是如何实现的?</h3><blockquote><p><code>事件循环模型</code>,在下方给出详解</p></blockquote><h2 id="3、JS是单线程的"><a href="#3、JS是单线程的" class="headerlink" title="3、JS是单线程的"></a>3、JS是单线程的</h2><h3 id="Ⅰ-如何证明JS执行是单线程的"><a href="#Ⅰ-如何证明JS执行是单线程的" class="headerlink" title="Ⅰ-如何证明JS执行是单线程的"></a>Ⅰ-如何证明JS执行是单线程的</h3><blockquote><ul><li><code>setTimeout()的回调函数是在主线程执行的</code></li><li>定时器回调函数只有在运行栈中的代码全部执行完后才有可能执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 如何证明JS执行是单线程的</span><br><span class="line">setTimeout(function () &#123; //4. 在将[timeout 1111]弹窗关闭后,再等一秒 执行此处</span><br><span class="line">   console.log(&#x27;timeout 2222&#x27;)</span><br><span class="line">   alert(&#x27;22222222&#x27;)</span><br><span class="line"> &#125;, 2000)</span><br><span class="line"> setTimeout(function () &#123; //3. 过了一秒后 打印 timeout 1111并弹窗,此处如果不将弹窗关闭,不会继续执行上方222</span><br><span class="line">   console.log(&#x27;timeout 1111&#x27;)</span><br><span class="line">   alert(&#x27;1111111&#x27;)</span><br><span class="line"> &#125;, 1000)</span><br><span class="line"> setTimeout(function () &#123; //2. 然后打印timeout() 00000</span><br><span class="line">   console.log(&#x27;timeout() 00000&#x27;)</span><br><span class="line"> &#125;, 0)</span><br><span class="line"> function fn() &#123; //1. fn()</span><br><span class="line">   console.log(&#x27;fn()&#x27;)</span><br><span class="line"> &#125;</span><br><span class="line"> fn()</span><br><span class="line">//----------------------</span><br><span class="line"> console.log(&#x27;alert()之前&#x27;)</span><br><span class="line"> alert(&#x27;------&#x27;) //暂停当前主线程的执行, 同时暂停计时, 点击确定后, 恢复程序执行和计时</span><br><span class="line"> console.log(&#x27;alert()之后&#x27;)</span><br></pre></td></tr></table></figure><p>流程结果:</p><ol><li>先打印了[<code>fn()</code>],然后马上就打印了[<code>timeout() 00000</code>]</li><li>过了一秒后 打印 timeout 1111并弹窗,此处如果不将弹窗关闭,不会继续执行上方222</li><li>在将[timeout 1111]弹窗关闭后,<code>再等一秒</code> 执行此处</li></ol><ul><li>问:为何明明写的是2秒,却关闭上一个弹窗再过一秒就执行?</li><li>解:并不是关闭后再计算的,而是一起计算的,alert只是暂停了主线程执行</li></ul></blockquote><h3 id="Ⅱ-JS引擎执行代码的基本流程与代码分类"><a href="#Ⅱ-JS引擎执行代码的基本流程与代码分类" class="headerlink" title="Ⅱ-JS引擎执行代码的基本流程与代码分类"></a>Ⅱ-JS引擎执行代码的基本流程与代码分类</h3><blockquote><p>代码分类:</p><ul><li>初始化代码</li><li>回调代码</li></ul><p>js引擎执行代码的基本流程</p><ol><li>先执行初始化代码: 包含一些特别的代码 回调函数(异步执行)</li></ol><ul><li>设置定时器</li><li>绑定事件监听</li><li>发送ajax请求</li></ul><ol><li>后面在某个时刻才会执行回调代码</li></ol></blockquote><h3 id="Ⅲ-为什么js要用单线程模式-而不用多线程模式"><a href="#Ⅲ-为什么js要用单线程模式-而不用多线程模式" class="headerlink" title="Ⅲ-为什么js要用单线程模式, 而不用多线程模式?"></a>Ⅲ-为什么js要用单线程模式, 而不用多线程模式?</h3><blockquote><ol><li>JavaScript的单线程，与它的用途有关。</li><li>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。</li><li>这决定了它只能是单线程，否则会带来很复杂的同步问题<ul><li>举个栗子:如果我们要实现更新页面上一个dom节点然后删除,用单线程是没问题的</li><li>但是如果多线程,当我删除线程先删除了dom节点,更新线程要去更新的时候就会出错</li></ul></li></ol></blockquote><h2 id="4、事件循环模型-Event-Loop-机制"><a href="#4、事件循环模型-Event-Loop-机制" class="headerlink" title="4、事件循环模型(Event Loop)机制"></a>4、事件循环模型(Event Loop)机制</h2><h3 id="Ⅰ-概念引出"><a href="#Ⅰ-概念引出" class="headerlink" title="Ⅰ-概念引出"></a>Ⅰ-概念引出</h3><blockquote><p>我们都知道，<code>javascript从诞生之日起就是一门单线程的非阻塞的脚本语言</code>。这是由其最初的用途来决定的：<code>与浏览器交互</code>。</p><p>单线程意味着，javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务。</p><p><code>非阻塞</code>:</p><blockquote><p>而非阻塞则是当代码需要进行一项异步任务（无法立刻返回结果，需要花一定时间才能返回的任务，如I/O事件）的时候，主线程会挂起（pending）这个任务，然后在异步任务返回结果的时候再根据一定规则去执行相应的回调。</p></blockquote><p><code>单线程是必要的</code>:</p><blockquote><p>也是javascript这门语言的基石，原因之一在其最初也是最主要的执行环境——浏览器中，我们需要进行各种各样的dom操作。试想一下 如果javascript是多线程的，那么当两个线程同时对dom进行一项操作，例如一个向其添加事件，而另一个删除了这个dom，此时该如何处理呢？因此，为了保证不会 发生类似于这个例子中的情景，javascript选择只用一个主线程来执行代码，这样就保证了程序执行的一致性。</p></blockquote><p>当然，现如今人们也意识到，单线程在保证了执行顺序的同时也限制了javascript的效率，因此开发出了<code>web workers</code>技术。这项技术号称可以让javaScript成为一门多线程语言。</p><blockquote><p>然而，使用web workers技术开的多线程有着诸多限制，例如：<code>所有新线程都受主线程的完全控制，不能独立执行</code>。这意味着这些“线程” 实际上应属于主线程的子线程。另外，这些子线程并没有执行I/O操作的权限，只能为主线程分担一些诸如计算等任务。所以严格来讲这些线程并没有完整的功能，也因此这项技术并非改变了javascript语言的单线程本质。</p></blockquote><p>可以预见，未来的javascript也会一直是一门单线程的语言。</p><p>话说回来，前面提到javascript的另一个特点是“<code>非阻塞</code>”，那么javascript引擎到底是如何实现的这一点呢？</p><blockquote><p>答案就是——event loop（事件循环）。</p></blockquote><p><strong>注：<code>虽然nodejs中的也存在与传统浏览器环境下的相似的事件循环。然而两者间却有着诸多不同，故把两者分开，单独解释</code>。</strong></p></blockquote><h3 id="Ⅱ-浏览器环境下JS引擎的事件循环机制"><a href="#Ⅱ-浏览器环境下JS引擎的事件循环机制" class="headerlink" title="Ⅱ-浏览器环境下JS引擎的事件循环机制"></a>Ⅱ-浏览器环境下JS引擎的事件循环机制</h3><h4 id="①-执行栈概念"><a href="#①-执行栈概念" class="headerlink" title="① 执行栈概念"></a>① 执行栈概念</h4><blockquote><p>执行上下文栈详情可以看上方笔记 –&gt;<a href="https://gitee.com/hongjilin/hongs-study-notes/blob/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md#2%E3%80%81%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88">函数高级的2、执行上下文与执行上下文栈</a>,此处继续进行一次概述加深理解</p><p>当javascript代码执行的时候会将不同的变量存于内存中的不同位置：<code>堆（heap）</code>和<code>栈（stack）</code>中来加以区分。其中，堆里存放着一些对象。而栈中则存放着一些基础类型变量以及对象的指针。 <code>但是我们这里说的执行栈和上面这个栈的意义却有些不同</code>。</p><p><code>执行栈</code>:</p><blockquote><p>当我们调用一个方法的时候，js会生成一个与这个方法对应的执行环境（context），又叫<code>执行上下文</code>。这个执行环境中存在着这个方法的私有作用域、上层作用域的指向、方法的参数，这个作用域中定义的变量以及这个作用域的this对象。 而当一系列方法被依次调用的时候，因为js是单线程的，同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方。这个地方被称为执行栈。</p></blockquote><p>当一个脚本第一次执行的时候，js引擎会解析这段代码，并将其中的同步代码按照执行顺序加入执行栈中，然后从头开始执行。如果当前执行的是一个方法，那么js会向执行栈中添加这个方法的执行环境，然后进入这个执行环境继续执行其中的代码。<code>当这个执行环境中的代码 执行完毕并返回结果后，js会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境</code>。这个过程反复进行，直到执行栈中的代码全部执行完毕。</p><p>此处继续拿出栈图加深理解:<img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/%E6%89%A7%E8%A1%8C%E6%A0%88%E4%B8%8E%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97.gif" alt="img"></p><p>从图片可知，一个方法执行会向执行栈中加入这个方法的执行环境，在这个执行环境中还可以调用其他方法，甚至是自己，其结果不过是在执行栈中再添加一个执行环境。这个过程可以是无限进行下去的，<code>除非发生了栈溢出，即超过了所能使用内存的最大值</code>。</p><p>以上的过程说的都是同步代码的执行。那么当一个异步代码（如发送ajax请求数据）执行后会如何呢？</p><blockquote><p>刚刚说过js的另一大特点是非阻塞，实现这一点的关键在于下面要说的这项机制——<code>事件队列（Task Queue）</code>。</p></blockquote></blockquote><h4 id="②-事件队列（Task-Queue）"><a href="#②-事件队列（Task-Queue）" class="headerlink" title="② 事件队列（Task Queue）"></a>② 事件队列（Task Queue）</h4><blockquote><p>JS引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务,当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列，我们称之为<code>事件队列</code>。</p><blockquote><p>被放入事件队列不会立刻执行其回调，而是<code>等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务</code>。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，<code>这样就形成了一个无限的循环。这就是这个过程被称为“事件循环（Event Loop）”的原因。</code></p></blockquote><p>这里还有一张图来展示这个过程:<img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210729163242840.png" alt="image-20210729163242840"></p><p>图中的stack表示我们所说的执行栈，web apis则是代表一些异步事件，而callback queue即事件队列。</p><p>以上的事件循环过程是一个宏观的表述，实际上因为异步任务之间并不相同，因此他们的执行优先级也有区别。<code>不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）</code>,此部分看下方详解</p></blockquote><h3 id="Ⅲ-宏任务-macro-task-与微任务-micro-task"><a href="#Ⅲ-宏任务-macro-task-与微任务-micro-task" class="headerlink" title="Ⅲ-宏任务(macro task)与微任务(micro task)"></a>Ⅲ-宏任务(<strong>macro task</strong>)与微任务(<strong>micro task</strong>)</h3><blockquote><p>宏任务与微任务亦属于<a href="https://gitee.com/hongjilin/hongs-study-notes/blob/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md#%E2%85%A1-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83%E4%B8%8BJS%E5%BC%95%E6%93%8E%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6">Ⅱ-浏览器环境下JS引擎的事件循环机制</a>内知识点,但本人觉得比较重要,将其提高至其知识点</p></blockquote><h4 id="①-宏任务队列与微任务队列解释"><a href="#①-宏任务队列与微任务队列解释" class="headerlink" title="① 宏任务队列与微任务队列解释"></a>① 宏任务队列与微任务队列解释</h4><blockquote><p>顾名思义,宏任务放至宏任务队列(<code>简称宏队列</code>)中、微任务放至微任务队列(<code>简称微队列</code>)中</p><ol><li>JS中用来存储待执行回调函数的队列包含2个不同特定的列队</li></ol><ul><li><code>宏队列</code>:用来保存待执行的宏任务(回调),比如:<code>定时器</code>回调/ajax回调/dom事件回调</li><li><code>微队列</code>:用来保存待执行的微任务(回调),比如:<code>Promise</code>的回调/muntation回调</li></ul><ol><li>JS执行时会区别这2个队列:<ul><li>JS执行引擎首先必须执行所有的<code>初始化同步任务</code>代码</li><li>每次准备取出第一个<code>宏任务执行前</code>,都要将所有的<code>微任务</code>一个一个取出来执行</li></ul></li></ol><p>前面我们介绍过，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。并且在当前执行栈为空的时候，主线程会 查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p><p>我们只需记住:** <code>当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行</code> **</p></blockquote><h4 id="②-原理图"><a href="#②-原理图" class="headerlink" title="② 原理图"></a>② 原理图</h4><blockquote><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/Promise%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0_%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="Promise系统学习_宏任务微任务原理图"></p></blockquote><h4 id="③-由代码逆向理解宏任务与微任务"><a href="#③-由代码逆向理解宏任务与微任务" class="headerlink" title="③ 由代码逆向理解宏任务与微任务"></a>③ 由代码逆向理解宏任务与微任务</h4><blockquote><p>代码示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123; </span><br><span class="line">      console.log(&#x27;timeout callback1（）&#x27;)//立即放入宏队列</span><br><span class="line">      Promise.resolve(3).then(</span><br><span class="line">        value =&gt; &#123; </span><br><span class="line">          console.log(&#x27;Promise onResolved3()&#x27;, value)//当这个宏任务执行后 立马放入微队列,所以这个微任务执行完后下个宏任务才能执行 </span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;, 0)</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123; </span><br><span class="line">      console.log(&#x27;timeout callback2（）&#x27;) //立即放入宏队列,</span><br><span class="line">    &#125;, 0)</span><br><span class="line"></span><br><span class="line">    Promise.resolve(1).then(</span><br><span class="line">      value =&gt; &#123; </span><br><span class="line">        console.log(&#x27;Promise onResolved1()&#x27;, value)//立即放入微队列</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          console.log(&#x27;timeout callback3（）&#x27;, value) //立即放入宏任务</span><br><span class="line">        &#125;, 0)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Promise.resolve(2).then(</span><br><span class="line">      value =&gt; &#123; </span><br><span class="line">        console.log(&#x27;Promise onResolved2()&#x27;, value)//立即放入微队列</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">console.log(&#x27;同步代码&#x27;) //同步代码立即执行</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x27;同步代码&#x27;,</span><br><span class="line"> &#x27;Promise onResolved1()&#x27;,</span><br><span class="line"> &#x27;Promise onResolved2()&#x27;,</span><br><span class="line"> &#x27;timeout callback1（）&#x27;,</span><br><span class="line"> &#x27;Promise onResolved3()&#x27;,</span><br><span class="line"> &#x27;timeout callback2（）&#x27;,</span><br><span class="line"> &#x27;timeout callback3（）&#x27;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅳ-node环境下的事件循环机制"><a href="#Ⅳ-node环境下的事件循环机制" class="headerlink" title="Ⅳ-node环境下的事件循环机制"></a>Ⅳ-<strong>node环境下的事件循环机制</strong></h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不学node的小伙伴就跳过此部分直接去下一节Web Workers笔记吧</span><br></pre></td></tr></table></figure></blockquote><h4 id="①-与浏览器环境有何不同"><a href="#①-与浏览器环境有何不同" class="headerlink" title="① 与浏览器环境有何不同?"></a>① <strong>与浏览器环境有何不同?</strong></h4><blockquote><p>在node中，事件循环表现出的状态与浏览器中大致相同。不同的是node中有一套自己的模型。node中事件循环的实现是依靠的libuv引擎。我们知道node选择chrome v8引擎作为js解释器，v8引擎将js代码分析后去调用对应的node api，而这些api最后则由libuv引擎驱动，执行对应的任务，并把不同的事件放在不同的队列中等待主线程执行。 <code>因此实际上node中的事件循环存在于libuv引擎中</code>。</p></blockquote><h4 id="②-事件循环模型"><a href="#②-事件循环模型" class="headerlink" title="② 事件循环模型"></a>② <strong>事件循环模型</strong></h4><blockquote><p>下面是一个libuv引擎中的事件循环的模型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//libuv引擎中的事件循环的模型</span><br><span class="line">┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;──connections───     │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">  └───────────────────────┘</span><br></pre></td></tr></table></figure><p><em>注：模型中的每一个方块代表事件循环的一个阶段</em></p><p>这个模型是node官网上的一篇文章中给出的，我下面的解释也都来源于这篇文章。我会在文末把文章地址贴出来，有兴趣的朋友可以亲自与看看原文。</p></blockquote><h4 id="③-事件循环各阶段详解"><a href="#③-事件循环各阶段详解" class="headerlink" title="③ 事件循环各阶段详解"></a>③ <strong>事件循环各阶段详解</strong></h4><blockquote><p>从上面这个模型中，我们可以大致分析出node中的事件循环的顺序：</p><blockquote><p>外部输入数据–&gt;轮询阶段(poll)–&gt;检查阶段(check)–&gt;关闭事件回调阶段(close callback)–&gt;定时器检测阶段(timer)–&gt;I/O事件回调阶段(I/O callbacks)–&gt;闲置阶段(idle, prepare)–&gt;轮询阶段…</p></blockquote><p>这些阶段大致的功能如下：</p><ul><li>timers(定时器检测阶段): 这个阶段执行定时器队列中的回调如 <code>setTimeout()</code> 和 <code>setInterval()</code>。</li><li>I/O callbacks(I/O事件回调阶段): 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和<code>setImmediate()</code>的回调。</li><li>idle, prepare: 这个阶段仅在内部使用，可以不必理会。</li><li>poll(轮询阶段): 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。</li><li>check(检查阶段): <code>setImmediate()</code>的回调会在这个阶段执行。</li><li>close callbacks(关闭事件回调阶段): 例如<code>socket.on(&#39;close&#39;, ...)</code>这种close事件的回调。</li></ul><p>下面我们来按照代码第一次进入libuv引擎后的顺序来详细解说这些阶段：</p></blockquote><h5 id="poll-轮询阶段"><a href="#poll-轮询阶段" class="headerlink" title="poll(轮询阶段)"></a><strong>poll(轮询阶段)</strong></h5><blockquote><p>当个v8引擎将js代码解析后传入libuv引擎后，循环首先进入poll阶段。poll阶段的执行逻辑如下： 先查看poll queue中是否有事件，有任务就按先进先出的顺序依次执行回调。 当queue为空时，会检查是否有setImmediate()的callback，如果有就进入check阶段执行这些callback。但同时也会检查是否有到期的timer，如果有，就把这些到期的timer的callback按照调用顺序放到timer queue中，之后循环会进入timer阶段执行queue中的 callback。 这两者的顺序是不固定的，收到代码运行的环境的影响。如果两者的queue都是空的，那么loop会在poll阶段停留，直到有一个i/o事件返回，循环会进入i/o callback阶段并立即执行这个事件的callback。</p><p>值得注意的是，poll阶段在执行poll queue中的回调时实际上不会无限的执行下去。<code>有两种情况poll阶段会终止执行poll queue中的下一个回调：1.所有回调执行完毕。2.执行数超过了node的限制。</code></p></blockquote><h5 id="check-检查阶段"><a href="#check-检查阶段" class="headerlink" title="check(检查阶段)"></a>check(检查阶段)</h5><blockquote><p>check阶段专门用来执行<code>setImmediate()</code>方法的回调，当poll阶段进入空闲状态，并且setImmediate queue中有callback时，事件循环进入这个阶段。</p></blockquote><h5 id="close-callbacks-关闭事件回调阶段"><a href="#close-callbacks-关闭事件回调阶段" class="headerlink" title="close callbacks(关闭事件回调阶段)"></a>close callbacks(关闭事件回调阶段)</h5><blockquote><p>当一个socket连接或者一个handle被突然关闭时（例如调用了<code>socket.destroy()</code>方法），close事件会被发送到这个阶段执行回调。否则事件会用<code>process.nextTick（）</code>方法发送出去。</p></blockquote><h5 id="timers-定时器检测阶段"><a href="#timers-定时器检测阶段" class="headerlink" title="timers(定时器检测阶段)"></a>timers(定时器检测阶段)</h5><blockquote><p>这个阶段以先进先出的方式执行所有到期的timer加入timer队列里的callback，一个timer callback指得是一个通过setTimeout或者setInterval函数设置的回调函数。</p></blockquote><h5 id="I-O-callbacks-I-O事件回调阶段"><a href="#I-O-callbacks-I-O事件回调阶段" class="headerlink" title="I/O callbacks(I/O事件回调阶段)"></a>I/O callbacks(I/O事件回调阶段)</h5><blockquote><p>如上文所言，这个阶段主要执行大部分I/O事件的回调，包括一些为操作系统执行的回调。例如一个TCP连接生错误时，系统需要执行回调来获得这个错误的报告。</p></blockquote><h4 id="④-process-nextTick-setTimeout与setImmediate的区别与使用场景"><a href="#④-process-nextTick-setTimeout与setImmediate的区别与使用场景" class="headerlink" title="④ process.nextTick,setTimeout与setImmediate的区别与使用场景"></a>④ <strong>process.nextTick,setTimeout与setImmediate的区别与使用场景</strong></h4><blockquote><p>在node中有三个常用的用来推迟任务执行的方法：process.nextTick,setTimeout（setInterval与之相同）与setImmediate</p></blockquote><p>这三者间存在着一些非常不同的区别：</p><h5 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a><strong>process.nextTick()</strong></h5><blockquote><p>尽管没有提及，但是实际上node中存在着一个特殊的队列，即nextTick queue。这个队列中的回调执行虽然没有被表示为一个阶段，当时这些事件却会在每一个阶段执行完毕准备进入下一个阶段时优先执行。当事件循环准备进入下一个阶段之前，会先检查nextTick queue中是否有任务，如果有，那么会先清空这个队列。与执行poll queue中的任务不同的是，这个操作在队列清空前是不会停止的。这也就意味着，错误的使用<code>process.nextTick()</code>方法会导致node进入一个死循环。。直到内存泄漏。</p><p>使用这个方法比较合适呢？下面有一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const server = net.createServer(() =&gt; &#123;&#125;).listen(8080);</span><br><span class="line">server.on(&#x27;listening&#x27;, () =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><p>这个例子中当，当listen方法被调用时，除非端口被占用，否则会立刻绑定在对应的端口上。这意味着此时这个端口可以立刻触发listening事件并执行其回调。然而，这时候<code>on(&#39;listening)</code>还没有将callback设置好，自然没有callback可以执行。为了避免出现这种情况，node会在listen事件中使用<code>process.nextTick()</code>方法，确保事件在回调函数绑定后被触发。</p></blockquote><h5 id="setTimeout-和setImmediate"><a href="#setTimeout-和setImmediate" class="headerlink" title="setTimeout()和setImmediate()"></a><strong>setTimeout()和setImmediate()</strong></h5><blockquote><p>在三个方法中，这两个方法最容易被弄混。实际上，某些情况下这两个方法的表现也非常相似。然而实际上，这两个方法的意义却大为不同。</p><p><code>setTimeout()</code>方法是定义一个回调，并且希望这个回调在我们所指定的时间间隔后第一时间去执行。注意这个“第一时间执行”，这意味着，受到操作系统和当前执行任务的诸多影响，该回调并不会在我们预期的时间间隔后精准的执行。执行的时间存在一定的延迟和误差，这是不可避免的。node会在可以执行timer回调的第一时间去执行你所设定的任务。</p><p><code>setImmediate()</code>方法从意义上将是立刻执行的意思，但是实际上它却是在一个固定的阶段才会执行回调，即poll阶段之后。有趣的是，这个名字的意义和之前提到过的<code>process.nextTick()</code>方法才是最匹配的。node的开发者们也清楚这两个方法的命名上存在一定的混淆，他们表示不会把这两个方法的名字调换过来—因为有大量的node程序使用着这两个方法，调换命名所带来的好处与它的影响相比不值一提。</p><p><code>setTimeout()</code>和不设置时间间隔的<code>setImmediate()</code>表现上及其相似。猜猜下面这段代码的结果是什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">   console.log(&#x27;timeout&#x27;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">   console.log(&#x27;immediate&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实际上，答案是不一定。没错，就连node的开发者都无法准确的判断这两者的顺序谁前谁后。这取决于这段代码的运行环境。运行环境中的各种复杂的情况会导致在同步队列里两个方法的顺序随机决定。但是，在一种情况下可以准确判断两个方法回调的执行顺序，那就是在一个I/O事件的回调中。下面这段代码的顺序永远是固定的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">   setTimeout(() =&gt; &#123;</span><br><span class="line">       console.log(&#x27;timeout&#x27;);</span><br><span class="line">   &#125;, 0);</span><br><span class="line">   setImmediate(() =&gt; &#123;</span><br><span class="line">       console.log(&#x27;immediate&#x27;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>答案永远是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">immediate</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure><p>因为在I/O事件的回调中，setImmediate方法的回调永远在timer的回调前执行。</p></blockquote><h2 id="5、Web-Workers"><a href="#5、Web-Workers" class="headerlink" title="5、Web Workers"></a>5、Web Workers</h2><blockquote><p>想了解更多可以点击链接查看更多,此处只是大致了解学习 –&gt;<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers">Web Workers</a></p><ol><li>H5规范提供了js分线程的实现, 取名为: Web Workers</li><li>相关API</li></ol><ul><li>Worker: 构造函数, 加载分线程执行的js文件</li><li>Worker.prototype.onmessage: 用于接收另一个线程的回调函数</li><li>Worker.prototype.postMessage: 向另一个线程发送消息</li></ul><ol><li>不足</li></ol><ul><li>worker内代码不能操作DOM(更新UI)</li><li>不能跨域加载JS</li><li>不是每个浏览器都支持这个新特性</li></ul></blockquote><h3 id="Ⅰ-抛砖引玉-引出用处"><a href="#Ⅰ-抛砖引玉-引出用处" class="headerlink" title="Ⅰ-抛砖引玉,引出用处"></a>Ⅰ-抛砖引玉,引出用处</h3><blockquote><p>还是拿斐波那契（Fibonacci）数列来做例子,这东西效率低,可以拿来模拟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;数值&quot; id=&quot;number&quot;&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;计算&lt;/button&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> // 1 1 2 3 5 8    f(n) = f(n-1) + f(n-2)</span><br><span class="line"> function fibonacci(n) &#123;</span><br><span class="line">   return n&lt;=2 ? 1 : fibonacci(n-1) + fibonacci(n-2)  //递归调用</span><br><span class="line"> &#125;</span><br><span class="line"> // console.log(fibonacci(7))</span><br><span class="line"> var input = document.getElementById(&#x27;number&#x27;)</span><br><span class="line"> document.getElementById(&#x27;btn&#x27;).onclick = function () &#123;</span><br><span class="line">   var number = input.value</span><br><span class="line">   var result = fibonacci(number)</span><br><span class="line">   alert(result)</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当我运行此行代码,传入计算数值为50左右(有的甚至更低),整个页面就会卡住好久的时间不能操作(计算结束后才会弹窗,但是未弹窗的这段时间用户并不能进行操作),这时候就会发现单线程的弊端了</p></blockquote><h3 id="Ⅱ-尝试使用"><a href="#Ⅱ-尝试使用" class="headerlink" title="Ⅱ-尝试使用"></a>Ⅱ-尝试使用</h3><blockquote><ol><li>H5规范提供了js分线程的实现, 取名为: Web Workers</li><li>相关API</li></ol><ul><li>Worker: 构造函数, 加载分线程执行的js文件</li><li>Worker.prototype.onmessage: 用于接收另一个线程的回调函数</li><li>Worker.prototype.postMessage: 向另一个线程发送消息</li></ul><ol><li>不足</li></ol><ul><li>worker内代码不能操作DOM(更新UI)</li><li>不能跨域加载JS</li><li>不是每个浏览器都支持这个新特性</li></ul></blockquote><h4 id="①-主线程"><a href="#①-主线程" class="headerlink" title="① 主线程"></a>① 主线程</h4><blockquote><ol><li>创建一个Worker对象</li><li>绑定[主线程接收分线程返回的数据]方法</li><li>主线程向分线程发送数据,然后等待接受数据</li><li>接收到分线程回馈的数据,将数据进行处理(如弹窗)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;数值&quot; id=&quot;number&quot;&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;计算&lt;/button&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> var input = document.getElementById(&#x27;number&#x27;)</span><br><span class="line"> document.getElementById(&#x27;btn&#x27;).onclick = function () &#123;</span><br><span class="line">   var number = input.value</span><br><span class="line"></span><br><span class="line">   //创建一个Worker对象</span><br><span class="line">   var worker = new Worker(&#x27;worker.js&#x27;)</span><br><span class="line">   // 绑定接收消息的监听</span><br><span class="line">   worker.onmessage = function (event) &#123; //此处变成回调代码,会在初始化工作完成后才会进行</span><br><span class="line">     console.log(&#x27;主线程接收分线程返回的数据: &#x27;+event.data)</span><br><span class="line">     alert(event.data)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 向分线程发送消息</span><br><span class="line">   worker.postMessage(number)</span><br><span class="line">   console.log(&#x27;主线程向分线程发送数据: &#x27;+number)</span><br><span class="line"> &#125;</span><br><span class="line"> // console.log(this) // window</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="②-分线程"><a href="#②-分线程" class="headerlink" title="② 分线程"></a>② 分线程</h4><blockquote><p>将计算放置分线程中</p><p><code>注意</code>:alert(result) alert是window的方法, 在分线程不能调用,<code>分线程中的全局对象不再是window</code>, 所以在分线程中不可能更新界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//worker.js</span><br><span class="line">function fibonacci(n) &#123;</span><br><span class="line"> return n&lt;=2 ? 1 : fibonacci(n-1) + fibonacci(n-2)  //递归调用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(this)</span><br><span class="line">this.onmessage = function (event) &#123;</span><br><span class="line"> var number = event.data</span><br><span class="line"> console.log(&#x27;分线程接收到主线程发送的数据: &#x27;+number)</span><br><span class="line"> //计算</span><br><span class="line"> var result = fibonacci(number)</span><br><span class="line"> postMessage(result)</span><br><span class="line"> console.log(&#x27;分线程向主线程返回数据: &#x27;+result)</span><br><span class="line"> // alert(result)  alert是window的方法, 在分线程不能调用</span><br><span class="line"> // 分线程中的全局对象不再是window, 所以在分线程中不可能更新界面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ⅲ-流程原理图"><a href="#Ⅲ-流程原理图" class="headerlink" title="Ⅲ-流程原理图"></a>Ⅲ-流程原理图</h3><blockquote><p><img src="https://gitee.com/hongjilin/hongs-study-notes/raw/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML+CSS+JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/JavaScript%E7%AC%94%E8%AE%B0/A_JavaScript%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/image-20210729173545339.png" alt="image-20210729173545339"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
